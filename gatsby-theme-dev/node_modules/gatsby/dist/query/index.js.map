{"version":3,"file":"index.js","names":["process","env","GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY","console","info","concurrency","Number","calcDirtyQueryIds","state","trackedQueries","trackedComponents","deletedQueries","queries","queriesWithBabelErrors","Set","component","values","hasFlag","errors","FLAG_ERROR_EXTRACTION","queryId","pages","add","dirtyQueryIds","query","has","dirty","push","groupQueryIds","queryIds","grouped","p","slice","store","getState","staticQueryIds","static","pageQueryIds","page","map","path","get","filter","Boolean","createQueue","createJobFn","activity","graphqlRunner","graphqlTracing","GraphQLRunner","worker","cb","job","setImmediate","undefined","queryRunner","span","then","result","tick","catch","error","fastq","processQueries","onQueryDone","Promise","resolve","reject","fastQueue","forEach","err","res","kill","idle","drain","createStaticQueryJob","staticQueryComponents","hash","id","componentPath","isPage","context","onDevelopStaticQueryDone","websocketManager","emitStaticQueryData","processStaticQueries","processedQueries","NODE_ENV","createPageDependencyBatcher","flush","processPageQueries","createPageQueryJob","components"],"sources":["../../src/query/index.ts"],"sourcesContent":["import _ from \"lodash\"\nimport fastq from \"fastq\"\nimport { IProgressReporter } from \"gatsby-cli/lib/reporter/reporter-progress\"\nimport { store } from \"../redux\"\nimport { IGatsbyPage, IGatsbyState } from \"../redux/types\"\nimport { hasFlag, FLAG_ERROR_EXTRACTION } from \"../redux/reducers/queries\"\nimport { IQueryJob, queryRunner } from \"./query-runner\"\nimport {\n  IStaticQueryResult,\n  websocketManager,\n} from \"../utils/websocket-manager\"\nimport { GraphQLRunner } from \"./graphql-runner\"\nimport { IGroupedQueryIds } from \"../services\"\nimport { createPageDependencyBatcher } from \"../redux/actions/add-page-dependency\"\n\nif (process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) {\n  console.info(\n    `GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY: Running with concurrency set to \\`${process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY}\\``\n  )\n}\n\nconst concurrency =\n  Number(process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) || 4\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or staticQuery.id's).\n *\n * Dirty state is tracked in `queries` reducer, here we simply filter\n * them from all tracked queries.\n */\nexport function calcDirtyQueryIds(state: IGatsbyState): Array<string> {\n  const { trackedQueries, trackedComponents, deletedQueries } = state.queries\n\n  const queriesWithBabelErrors = new Set()\n  for (const component of trackedComponents.values()) {\n    if (hasFlag(component.errors, FLAG_ERROR_EXTRACTION)) {\n      for (const queryId of component.pages) {\n        queriesWithBabelErrors.add(queryId)\n      }\n    }\n  }\n  // Note: trackedQueries contains both - page and static query ids\n  const dirtyQueryIds: Array<string> = []\n  for (const [queryId, query] of trackedQueries) {\n    if (deletedQueries.has(queryId)) {\n      continue\n    }\n    if (query.dirty > 0 && !queriesWithBabelErrors.has(queryId)) {\n      dirtyQueryIds.push(queryId)\n    }\n  }\n  return dirtyQueryIds\n}\n\nexport { calcDirtyQueryIds as calcInitialDirtyQueryIds }\n\n/**\n * Groups queryIds by whether they are static or page queries.\n */\nexport function groupQueryIds(queryIds: Array<string>): IGroupedQueryIds {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n\n  const { pages } = store.getState()\n\n  return {\n    staticQueryIds: grouped?.static || [],\n    pageQueryIds:\n      grouped?.page\n        ?.map(path => pages.get(path) as IGatsbyPage)\n        ?.filter(Boolean) || [],\n  }\n}\n\nfunction createQueue<QueryIDType>({\n  createJobFn,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}: {\n  createJobFn: (\n    state: IGatsbyState,\n    queryId: QueryIDType\n  ) => IQueryJob | undefined\n  state: IGatsbyState\n  activity: IProgressReporter\n  graphqlRunner: GraphQLRunner\n  graphqlTracing: boolean\n}): fastq.queue<QueryIDType, any> {\n  if (!graphqlRunner) {\n    graphqlRunner = new GraphQLRunner(store, { graphqlTracing })\n  }\n  state = state || store.getState()\n\n  function worker(queryId: QueryIDType, cb): void {\n    const job = createJobFn(state, queryId)\n    if (!job) {\n      setImmediate(() => cb(null, undefined))\n      return\n    }\n    queryRunner(graphqlRunner, job, activity?.span)\n      .then(result => {\n        if (activity.tick) {\n          activity.tick()\n        }\n        // Note: we need setImmediate to ensure garbage collection has a chance\n        //  to get started during query running\n        setImmediate(() => cb(null, { job, result }))\n      })\n      .catch(error => {\n        cb(error)\n      })\n  }\n  // Note: fastq.promise version is much slower\n  return fastq(worker, concurrency)\n}\n\nasync function processQueries<QueryIDType>({\n  queryIds,\n  createJobFn,\n  onQueryDone,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}: {\n  queryIds: Array<QueryIDType>\n  createJobFn: (\n    state: IGatsbyState,\n    queryId: QueryIDType\n  ) => IQueryJob | undefined\n  onQueryDone:\n    | (({ job, result }: { job: IQueryJob; result: unknown }) => void)\n    | undefined\n  state: IGatsbyState\n  activity: IProgressReporter\n  graphqlRunner: GraphQLRunner\n  graphqlTracing: boolean\n}): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fastQueue = createQueue({\n      createJobFn,\n      state,\n      activity,\n      graphqlRunner,\n      graphqlTracing,\n    })\n\n    queryIds.forEach((queryId: QueryIDType) => {\n      fastQueue.push(queryId, (err, res) => {\n        if (err) {\n          fastQueue.kill()\n          reject(err)\n          return\n        }\n        if (res && onQueryDone) {\n          onQueryDone(res)\n        }\n      })\n    })\n\n    if (!fastQueue.idle()) {\n      fastQueue.drain = (): any => resolve()\n    } else {\n      resolve()\n    }\n  })\n}\n\nfunction createStaticQueryJob(\n  state: IGatsbyState,\n  queryId: string\n): IQueryJob | undefined {\n  const component = state.staticQueryComponents.get(queryId)\n\n  if (!component) {\n    return undefined\n  }\n\n  const { hash, id, query, componentPath } = component\n\n  return {\n    id: queryId,\n    query,\n    isPage: false,\n    hash,\n    componentPath,\n    context: { path: id },\n  }\n}\n\nfunction onDevelopStaticQueryDone({\n  job,\n  result,\n}: {\n  job: IQueryJob\n  result: IStaticQueryResult[\"result\"]\n}): void {\n  if (!job.hash) {\n    return\n  }\n\n  websocketManager.emitStaticQueryData({\n    result,\n    id: job.hash,\n  })\n}\n\nexport async function processStaticQueries(\n  queryIds: IGroupedQueryIds[\"staticQueryIds\"],\n  { state, activity, graphqlRunner, graphqlTracing }\n): Promise<void> {\n  const processedQueries = await processQueries<string>({\n    queryIds,\n    createJobFn: createStaticQueryJob,\n    onQueryDone:\n      process.env.NODE_ENV === `production`\n        ? undefined\n        : onDevelopStaticQueryDone,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n\n  // at this point, we're done grabbing page dependencies, so we need to\n  // flush out the batcher in case there are any left\n  createPageDependencyBatcher.flush()\n\n  return processedQueries\n}\n\nexport async function processPageQueries(\n  queryIds: IGroupedQueryIds[\"pageQueryIds\"],\n  { state, activity, graphqlRunner, graphqlTracing }\n): Promise<void> {\n  const processedQueries = await processQueries<IGatsbyPage>({\n    queryIds,\n    createJobFn: createPageQueryJob,\n    onQueryDone: undefined,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n\n  // at this point, we're done grabbing page dependencies, so we need to\n  // flush out the batcher in case there are any left\n  createPageDependencyBatcher.flush()\n\n  return processedQueries\n}\n\nfunction createPageQueryJob(\n  state: IGatsbyState,\n  page: IGatsbyPage\n): IQueryJob | undefined {\n  const component = state.components.get(page.componentPath)\n\n  if (!component) {\n    return undefined\n  }\n\n  const { path, componentPath, context } = page\n  const { query } = component\n\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n"],"mappings":"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"}