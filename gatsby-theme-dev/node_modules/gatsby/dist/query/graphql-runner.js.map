{"version":3,"file":"graphql-runner.js","names":["_rootNodeMap","WeakMap","_trackedRootNodes","WeakSet","GraphQLRunner","constructor","store","collectStats","graphqlTracing","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","document","errors","warnings","NoDeprecatedCustomRule","length","add","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","parentSpan","queryName","componentPath","forceGraphqlTracing","telemetryResolverTimings","statsQuery","body","crypto","createHash","update","digest","err","message","reporter","warn","tracer","GraphQLSpanTracer","tags","start","execute","rootValue","contextValue","withResolverContext","customContext","variableValues","end"],"sources":["../../src/query/graphql-runner.ts"],"sourcesContent":["import crypto from \"crypto\"\nimport { Span } from \"opentracing\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n  NoDeprecatedCustomRule,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\n\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IGraphQLRunnerStatResults, IGraphQLRunnerStats } from \"./types\"\nimport { IGraphQLTelemetryRecord } from \"../schema/type-definitions\"\nimport GraphQLSpanTracer from \"./graphql-span-tracer\"\n\n// Preserve these caches across graphql instances.\nconst _rootNodeMap = new WeakMap()\nconst _trackedRootNodes = new WeakSet()\n\ntype Query = string | Source\n\nexport interface IQueryOptions {\n  parentSpan: Span | undefined\n  queryName: string\n  componentPath?: string | undefined\n  forceGraphqlTracing?: boolean\n  telemetryResolverTimings?: Array<IGraphQLTelemetryRecord>\n}\n\nexport interface IGraphQLRunnerOptions {\n  collectStats?: boolean\n  graphqlTracing?: boolean\n}\n\nexport class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakSet<DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n  graphqlTracing: boolean\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    { collectStats, graphqlTracing }: IGraphQLRunnerOptions = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n      _rootNodeMap,\n      _trackedRootNodes,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakSet()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    this.graphqlTracing = graphqlTracing || false\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakSet()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    document: DocumentNode\n  ): {\n    errors: ReadonlyArray<GraphQLError>\n    warnings: ReadonlyArray<GraphQLError>\n  } {\n    let errors: ReadonlyArray<GraphQLError> = []\n    let warnings: ReadonlyArray<GraphQLError> = []\n    if (!this.validDocuments.has(document)) {\n      errors = validate(schema, document)\n      warnings = validate(schema, document, [NoDeprecatedCustomRule])\n      if (!errors.length) {\n        this.validDocuments.add(document)\n      }\n    }\n    return { errors, warnings }\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  async query(\n    query: Query,\n    context: Record<string, unknown>,\n    {\n      parentSpan,\n      queryName,\n      componentPath,\n      forceGraphqlTracing = false,\n      telemetryResolverTimings,\n    }: IQueryOptions\n  ): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n      let statsQuery = query\n      if (typeof statsQuery !== `string`) {\n        statsQuery = statsQuery.body\n      }\n\n      this.stats.uniqueQueries.add(\n        crypto.createHash(`sha1`).update(statsQuery).digest(`hex`)\n      )\n    }\n\n    const document = this.parse(query)\n    const { errors, warnings } = this.validate(schema, document)\n\n    // Queries are usually executed in batch. But after the batch is finished\n    // cache just wastes memory without much benefits.\n    // TODO: consider a better strategy for cache purging/invalidation\n    this.scheduleClearCache()\n\n    if (warnings.length > 0) {\n      // TODO: move those warnings to the caller side, e.g. query-runner.ts\n      warnings.forEach(err => {\n        const message = componentPath ? `\\nQueried in ${componentPath}` : ``\n        reporter.warn(err.message + message)\n      })\n    }\n\n    if (errors.length > 0) {\n      return { errors }\n    }\n\n    let tracer\n    if ((this.graphqlTracing || forceGraphqlTracing) && parentSpan) {\n      tracer = new GraphQLSpanTracer(`GraphQL Query`, {\n        parentSpan,\n        tags: {\n          queryName: queryName,\n        },\n      })\n\n      tracer.start()\n    }\n\n    try {\n      // `execute` will return a promise\n      return await execute({\n        schema,\n        document,\n        rootValue: context,\n        contextValue: withResolverContext({\n          schema,\n          schemaComposer: schemaCustomization.composer,\n          context,\n          customContext: schemaCustomization.context,\n          nodeModel: this.nodeModel,\n          stats: this.stats,\n          tracer,\n          telemetryResolverTimings,\n        }),\n        variableValues: context,\n      })\n    } finally {\n      if (tracer) {\n        tracer.end()\n      }\n    }\n  }\n}\n"],"mappings":"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"}