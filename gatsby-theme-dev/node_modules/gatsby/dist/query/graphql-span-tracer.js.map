{"version":3,"file":"graphql-span-tracer.js","names":["GraphQLSpanTracer","constructor","name","activityArgs","parentActivity","report","phantomActivity","activities","Map","getParentActivity","start","end","forEach","activity","createResolverActivity","path","prev","key","parentSpan","getActivity","span","tags","field","pathToArray","join","setActivity","gqlPath","length","get","set"],"sources":["../../src/query/graphql-span-tracer.ts"],"sourcesContent":["import { Path } from \"graphql/jsutils/Path\"\n\nimport report from \"gatsby-cli/lib/reporter\"\nimport { IActivityArgs } from \"gatsby-cli/src/reporter/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli/src/reporter/reporter-phantom\"\n\nimport { IGraphQLSpanTracer } from \"../schema/type-definitions\"\nimport { pathToArray } from \"./utils\"\n\n/**\n * Tracks and knows how to get a parent span for a particular\n *  point in query resolver for a particular query and path\n */\nexport default class GraphQLSpanTracer implements IGraphQLSpanTracer {\n  parentActivity: IPhantomReporter\n  activities: Map<string, IPhantomReporter>\n\n  constructor(name: string, activityArgs: IActivityArgs) {\n    this.parentActivity = report.phantomActivity(\n      name,\n      activityArgs\n    ) as IPhantomReporter\n    this.activities = new Map()\n  }\n\n  getParentActivity(): IPhantomReporter {\n    return this.parentActivity\n  }\n\n  start(): void {\n    this.parentActivity.start()\n  }\n\n  end(): void {\n    this.activities.forEach(activity => {\n      activity.end()\n    })\n    this.parentActivity.end()\n  }\n\n  createResolverActivity(path: Path, name: string): IPhantomReporter {\n    let prev: Path | undefined = path.prev\n    while (typeof prev?.key === `number`) {\n      prev = prev.prev\n    }\n    const parentSpan = this.getActivity(prev).span\n    const activity = report.phantomActivity(`GraphQL Resolver`, {\n      parentSpan,\n      tags: {\n        field: name,\n        path: pathToArray(path).join(`.`),\n      },\n    })\n    this.setActivity(path, activity)\n    return activity\n  }\n\n  getActivity(gqlPath: Path | undefined): IPhantomReporter {\n    const path = pathToArray(gqlPath)\n    let activity\n    if (path.length > 0) {\n      activity = this.activities.get(path.join(`.`))\n      if (activity) {\n        return activity\n      }\n    }\n\n    return this.parentActivity\n  }\n\n  setActivity(gqlPath: Path, activity: IPhantomReporter): void {\n    const path = pathToArray(gqlPath)\n    this.activities.set(path.join(`.`), activity)\n  }\n}\n"],"mappings":";;;;;;;AAEA;;AAKA;;AAEA;AACA;AACA;AACA;AACe,MAAMA,iBAAN,CAAsD;EAInEC,WAAW,CAACC,IAAD,EAAeC,YAAf,EAA4C;IACrD,KAAKC,cAAL,GAAsBC,iBAAA,CAAOC,eAAP,CACpBJ,IADoB,EAEpBC,YAFoB,CAAtB;IAIA,KAAKI,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;EACD;;EAEDC,iBAAiB,GAAqB;IACpC,OAAO,KAAKL,cAAZ;EACD;;EAEDM,KAAK,GAAS;IACZ,KAAKN,cAAL,CAAoBM,KAApB;EACD;;EAEDC,GAAG,GAAS;IACV,KAAKJ,UAAL,CAAgBK,OAAhB,CAAwBC,QAAQ,IAAI;MAClCA,QAAQ,CAACF,GAAT;IACD,CAFD;IAGA,KAAKP,cAAL,CAAoBO,GAApB;EACD;;EAEDG,sBAAsB,CAACC,IAAD,EAAab,IAAb,EAA6C;IACjE,IAAIc,IAAsB,GAAGD,IAAI,CAACC,IAAlC;;IACA,OAAO,iBAAOA,IAAP,0CAAO,MAAMC,GAAb,MAAsB,QAA7B,EAAsC;MAAA;;MACpCD,IAAI,GAAGA,IAAI,CAACA,IAAZ;IACD;;IACD,MAAME,UAAU,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,EAAuBI,IAA1C;;IACA,MAAMP,QAAQ,GAAGR,iBAAA,CAAOC,eAAP,CAAwB,kBAAxB,EAA2C;MAC1DY,UAD0D;MAE1DG,IAAI,EAAE;QACJC,KAAK,EAAEpB,IADH;QAEJa,IAAI,EAAE,IAAAQ,kBAAA,EAAYR,IAAZ,EAAkBS,IAAlB,CAAwB,GAAxB;MAFF;IAFoD,CAA3C,CAAjB;;IAOA,KAAKC,WAAL,CAAiBV,IAAjB,EAAuBF,QAAvB;IACA,OAAOA,QAAP;EACD;;EAEDM,WAAW,CAACO,OAAD,EAA8C;IACvD,MAAMX,IAAI,GAAG,IAAAQ,kBAAA,EAAYG,OAAZ,CAAb;IACA,IAAIb,QAAJ;;IACA,IAAIE,IAAI,CAACY,MAAL,GAAc,CAAlB,EAAqB;MACnBd,QAAQ,GAAG,KAAKN,UAAL,CAAgBqB,GAAhB,CAAoBb,IAAI,CAACS,IAAL,CAAW,GAAX,CAApB,CAAX;;MACA,IAAIX,QAAJ,EAAc;QACZ,OAAOA,QAAP;MACD;IACF;;IAED,OAAO,KAAKT,cAAZ;EACD;;EAEDqB,WAAW,CAACC,OAAD,EAAgBb,QAAhB,EAAkD;IAC3D,MAAME,IAAI,GAAG,IAAAQ,kBAAA,EAAYG,OAAZ,CAAb;IACA,KAAKnB,UAAL,CAAgBsB,GAAhB,CAAoBd,IAAI,CAACS,IAAL,CAAW,GAAX,CAApB,EAAoCX,QAApC;EACD;;AA5DkE"}