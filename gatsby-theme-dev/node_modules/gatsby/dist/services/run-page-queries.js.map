{"version":3,"file":"run-page-queries.js","names":["ONE_MINUTE","runPageQueries","parentSpan","queryIds","store","program","graphqlRunner","assertStore","state","getState","pageQueryIds","length","activity","reporter","createProgress","id","process","env","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","start","cancelNotice","gatsby_executing_command","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","isCI","showExperimentNoticeAfterTimeout","processPageQueries","graphqlTracing","done"],"sources":["../../src/services/run-page-queries.ts"],"sourcesContent":["import { processPageQueries } from \"../query\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport {\n  showExperimentNoticeAfterTimeout,\n  CancelExperimentNoticeCallbackOrUndefined,\n} from \"../utils/show-experiment-notice\"\nimport { isCI } from \"gatsby-core-utils\"\n\nconst ONE_MINUTE = 1 * 60 * 1000\n\nexport async function runPageQueries({\n  parentSpan,\n  queryIds,\n  store,\n  program,\n  graphqlRunner,\n}: Partial<IQueryRunningContext>): Promise<void> {\n  assertStore(store)\n  const state = store.getState()\n\n  if (!queryIds) {\n    return\n  }\n\n  const { pageQueryIds } = queryIds\n\n  if (pageQueryIds.length === 0) {\n    return\n  }\n\n  const activity = reporter.createProgress(\n    `run page queries`,\n    pageQueryIds.length,\n    0,\n    {\n      id: `page-query-running`,\n      parentSpan,\n    }\n  )\n\n  // TODO: This is hacky, remove with a refactor of PQR itself\n  if (!process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    activity.start()\n  }\n\n  let cancelNotice: CancelExperimentNoticeCallbackOrUndefined\n  if (\n    process.env.gatsby_executing_command === `develop` &&\n    !process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n    !isCI()\n  ) {\n    cancelNotice = showExperimentNoticeAfterTimeout(\n      `Query On Demand`,\n      `https://gatsby.dev/query-on-demand-feedback`,\n      `which avoids running page queries in development until you visit a page â€” so a lot less upfront work. Here's how to try it:\n\nmodules.exports = {\n  flags: { QUERY_ON_DEMAND: true },\n  plugins: [...]\n}\n`,\n      ONE_MINUTE\n    )\n  }\n\n  await processPageQueries(pageQueryIds, {\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing: program?.graphqlTracing,\n  })\n\n  if (cancelNotice) {\n    cancelNotice()\n  }\n\n  if (!process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    activity.done()\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAIA;;AAEA,MAAMA,UAAU,GAAG,IAAI,EAAJ,GAAS,IAA5B;;AAEO,eAAeC,cAAf,CAA8B;EACnCC,UADmC;EAEnCC,QAFmC;EAGnCC,KAHmC;EAInCC,OAJmC;EAKnCC;AALmC,CAA9B,EAM0C;EAC/C,IAAAC,wBAAA,EAAYH,KAAZ;EACA,MAAMI,KAAK,GAAGJ,KAAK,CAACK,QAAN,EAAd;;EAEA,IAAI,CAACN,QAAL,EAAe;IACb;EACD;;EAED,MAAM;IAAEO;EAAF,IAAmBP,QAAzB;;EAEA,IAAIO,YAAY,CAACC,MAAb,KAAwB,CAA5B,EAA+B;IAC7B;EACD;;EAED,MAAMC,QAAQ,GAAGC,iBAAA,CAASC,cAAT,CACd,kBADc,EAEfJ,YAAY,CAACC,MAFE,EAGf,CAHe,EAIf;IACEI,EAAE,EAAG,oBADP;IAEEb;EAFF,CAJe,CAAjB,CAd+C,CAwB/C;;;EACA,IAAI,CAACc,OAAO,CAACC,GAAR,CAAYC,0CAAjB,EAA6D;IAC3DN,QAAQ,CAACO,KAAT;EACD;;EAED,IAAIC,YAAJ;;EACA,IACEJ,OAAO,CAACC,GAAR,CAAYI,wBAAZ,KAA0C,SAA1C,IACA,CAACL,OAAO,CAACC,GAAR,CAAYK,mCADb,IAEA,CAAC,IAAAC,qBAAA,GAHH,EAIE;IACAH,YAAY,GAAG,IAAAI,sDAAA,EACZ,iBADY,EAEZ,6CAFY,EAGZ;AACP;AACA;AACA;AACA;AACA;AACA,CATmB,EAUbxB,UAVa,CAAf;EAYD;;EAED,MAAM,IAAAyB,yBAAA,EAAmBf,YAAnB,EAAiC;IACrCF,KADqC;IAErCI,QAFqC;IAGrCN,aAHqC;IAIrCoB,cAAc,EAAErB,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEqB;EAJY,CAAjC,CAAN;;EAOA,IAAIN,YAAJ,EAAkB;IAChBA,YAAY;EACb;;EAED,IAAI,CAACJ,OAAO,CAACC,GAAR,CAAYC,0CAAjB,EAA6D;IAC3DN,QAAQ,CAACe,IAAT;EACD;AACF"}