{"version":3,"file":"index.js","names":["loadPlugins","rawConfig","rootDir","config","normalizeConfig","validateConfigPluginsOptions","currentAPIs","getAPI","browser","browserAPIs","node","nodeAPIs","ssr","ssrAPIs","pluginInfos","loadInternalPlugins","pluginArray","flattenPlugins","x","collatePluginAPIs","flattenedPlugins","badExports","handleBadExports","handleMultipleReplaceRenderers","store","dispatch","type","payload"],"sources":["../../../src/bootstrap/load-plugins/index.ts"],"sourcesContent":["import { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport * as browserAPIs from \"../../utils/api-browser-docs\"\nimport ssrAPIs from \"../../../cache-dir/api-ssr-docs\"\nimport { loadInternalPlugins } from \"./load-internal-plugins\"\nimport {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  validateConfigPluginsOptions,\n} from \"./validate\"\nimport { IFlattenedPlugin } from \"./types\"\nimport { normalizeConfig } from \"./utils/normalize\"\nimport { getAPI } from \"./utils/get-api\"\nimport { flattenPlugins } from \"./utils/flatten-plugins\"\nimport { IGatsbyConfig } from \"../../internal\"\n\nexport async function loadPlugins(\n  rawConfig: IGatsbyConfig,\n  rootDir: string\n): Promise<Array<IFlattenedPlugin>> {\n  // Turn all strings in plugins: [`...`] into the { resolve: ``, options: {} } form\n  const config = normalizeConfig(rawConfig)\n\n  // Show errors for invalid plugin configuration\n  await validateConfigPluginsOptions(config, rootDir)\n\n  const currentAPIs = getAPI({\n    browser: browserAPIs,\n    node: nodeAPIs,\n    ssr: ssrAPIs,\n  })\n\n  // Collate internal plugins, site config plugins, site default plugins\n  const pluginInfos = loadInternalPlugins(config, rootDir)\n\n  // Create a flattened array of the plugins\n  const pluginArray = flattenPlugins(pluginInfos)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ currentAPIs, flattenedPlugins: pluginArray })\n\n  // From this point on, these are fully-resolved plugins.\n  let flattenedPlugins = x.flattenedPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins as IGatsbyState[\"flattenedPlugins\"],\n  })\n\n  return flattenedPlugins\n}\n"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAOA;;AACA;;AACA;;;;;;AAGO,eAAeA,WAAf,CACLC,SADK,EAELC,OAFK,EAG6B;EAClC;EACA,MAAMC,MAAM,GAAG,IAAAC,0BAAA,EAAgBH,SAAhB,CAAf,CAFkC,CAIlC;;EACA,MAAM,IAAAI,sCAAA,EAA6BF,MAA7B,EAAqCD,OAArC,CAAN;EAEA,MAAMI,WAAW,GAAG,IAAAC,cAAA,EAAO;IACzBC,OAAO,EAAEC,WADgB;IAEzBC,IAAI,EAAEC,QAFmB;IAGzBC,GAAG,EAAEC;EAHoB,CAAP,CAApB,CAPkC,CAalC;;EACA,MAAMC,WAAW,GAAG,IAAAC,wCAAA,EAAoBZ,MAApB,EAA4BD,OAA5B,CAApB,CAdkC,CAgBlC;;EACA,MAAMc,WAAW,GAAG,IAAAC,8BAAA,EAAeH,WAAf,CAApB,CAjBkC,CAmBlC;EACA;;EACA,MAAMI,CAAC,GAAG,IAAAC,2BAAA,EAAkB;IAAEb,WAAF;IAAec,gBAAgB,EAAEJ;EAAjC,CAAlB,CAAV,CArBkC,CAuBlC;;EACA,IAAII,gBAAgB,GAAGF,CAAC,CAACE,gBAAzB;EACA,MAAMC,UAAU,GAAGH,CAAC,CAACG,UAArB,CAzBkC,CA2BlC;;EACA,MAAM,IAAAC,0BAAA,EAAiB;IAAEhB,WAAF;IAAee;EAAf,CAAjB,CAAN,CA5BkC,CA8BlC;;EACAD,gBAAgB,GAAG,IAAAG,wCAAA,EAA+B;IAChDH;EADgD,CAA/B,CAAnB,CA/BkC,CAmClC;;EACAI,YAAA,CAAMC,QAAN,CAAe;IACbC,IAAI,EAAG,4BADM;IAEbC,OAAO,EAAEP;EAFI,CAAf;;EAKA,OAAOA,gBAAP;AACD"}