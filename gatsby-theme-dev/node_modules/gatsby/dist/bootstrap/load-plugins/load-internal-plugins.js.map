{"version":3,"file":"load-internal-plugins.js","names":["TYPESCRIPT_PLUGIN_NAME","loadInternalPlugins","config","rootDir","plugins","configuredPluginNames","Set","internalPlugins","filter","Boolean","forEach","relPath","absPath","path","join","__dirname","push","processPlugin","plugin","processedPlugin","add","name","resolve","require","options","slash","pathCheck","has","GATSBY_CLOUD_PLUGIN_NAME","incompatibleGatsbyCloudPlugin","reporter","panic","process","env","GATSBY_CLOUD","addGatsbyPluginCloudPluginWhenInstalled","GATSBY_PLUGIN_PREVIEW_NAME","addGatsbyPluginPreviewWhenInstalled","processedTypeScriptPlugin","allExtensions","isTSX","jsxPragma","cwd","id","createPluginId","version","createFileContentHash","pluginOptions","getResolvedFieldsForPlugin","program","store","getState","pageCreatorOptions","directory","pageCreatorPlugin","find","processedPageCreatorPlugin"],"sources":["../../../src/bootstrap/load-plugins/load-internal-plugins.ts"],"sourcesContent":["import { slash } from \"gatsby-core-utils\"\nimport path from \"path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { store } from \"../../redux\"\nimport {\n  IPluginInfo,\n  IPluginRefObject,\n  IPluginRefOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { processPlugin } from \"./process-plugin\"\nimport { createPluginId } from \"./utils/create-id\"\nimport { createFileContentHash } from \"./utils/create-hash\"\nimport {\n  addGatsbyPluginCloudPluginWhenInstalled,\n  addGatsbyPluginPreviewWhenInstalled,\n  incompatibleGatsbyCloudPlugin,\n  GATSBY_CLOUD_PLUGIN_NAME,\n  GATSBY_PLUGIN_PREVIEW_NAME,\n} from \"./utils/handle-gatsby-cloud\"\nimport { getResolvedFieldsForPlugin } from \"../../utils/parcel/compile-gatsby-files\"\n\nconst TYPESCRIPT_PLUGIN_NAME = `gatsby-plugin-typescript`\n\nexport function loadInternalPlugins(\n  config: ISiteConfig = {},\n  rootDir: string\n): Array<IPluginInfo> {\n  // Instantiate plugins.\n  const plugins: Array<IPluginInfo> = []\n  const configuredPluginNames = new Set()\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404-500`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n    `../../internal-plugins/bundle-optimisations`,\n    `../../internal-plugins/functions`,\n  ].filter(Boolean) as Array<string>\n\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath, rootDir))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      const processedPlugin = processPlugin(plugin, rootDir)\n      plugins.push(processedPlugin)\n      configuredPluginNames.add(processedPlugin.name)\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin(\n        {\n          resolve: require.resolve(`gatsby-plugin-page-creator`),\n          options: {\n            path: slash(path.join(plugin.resolve, `src/pages`)),\n            pathCheck: false,\n          },\n        },\n        rootDir\n      )\n    )\n  })\n\n  if (\n    _CFLAGS_.GATSBY_MAJOR === `4` &&\n    configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    incompatibleGatsbyCloudPlugin(plugins)\n  ) {\n    reporter.panic(\n      `Plugin gatsby-plugin-gatsby-cloud is not compatible with your gatsby version. Please upgrade to gatsby-plugin-gatsby-cloud@next`\n    )\n  }\n\n  if (\n    !configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    (process.env.GATSBY_CLOUD === `true` || process.env.GATSBY_CLOUD === `1`)\n  ) {\n    addGatsbyPluginCloudPluginWhenInstalled(plugins, rootDir)\n  }\n\n  if (\n    !configuredPluginNames.has(GATSBY_PLUGIN_PREVIEW_NAME) &&\n    (process.env.GATSBY_CLOUD === `true` || process.env.GATSBY_CLOUD === `1`)\n  ) {\n    addGatsbyPluginPreviewWhenInstalled(plugins, rootDir)\n  }\n\n  // Support Typescript by default but allow users to override it\n  if (!configuredPluginNames.has(TYPESCRIPT_PLUGIN_NAME)) {\n    const processedTypeScriptPlugin = processPlugin(\n      {\n        resolve: require.resolve(TYPESCRIPT_PLUGIN_NAME),\n        options: {\n          // TODO(@mxstbr): Do not hard-code these defaults but infer them from the\n          // pluginOptionsSchema of gatsby-plugin-typescript\n          allExtensions: false,\n          isTSX: false,\n          jsxPragma: `React`,\n        },\n      },\n      rootDir\n    )\n    plugins.push(processedTypeScriptPlugin)\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n    ...getResolvedFieldsForPlugin(rootDir, `default-site-plugin`),\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions: IPluginRefOptions | undefined = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      (plugin): plugin is IPluginRefObject =>\n        typeof plugin !== `string` &&\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash((plugin.options && plugin.options.path) || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  const processedPageCreatorPlugin = processPlugin(\n    {\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    },\n    rootDir\n  )\n\n  plugins.push(processedPageCreatorPlugin)\n\n  // Partytown plugin collects usage of <Script strategy={\"off-main-thread\"} />\n  // in `wrapRootElement`, so we have to make sure it's the last one running to be able to\n  // collect scripts that users might inject in their `wrapRootElement`\n  plugins.push(\n    processPlugin(\n      path.join(__dirname, `../../internal-plugins/partytown`),\n      rootDir\n    )\n  )\n\n  return plugins\n}\n"],"mappings":"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"}