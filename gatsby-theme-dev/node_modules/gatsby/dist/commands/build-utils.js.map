{"version":3,"file":"build-utils.js","names":["checkFolderIsEmpty","path","fs","existsSync","readdirSync","length","checkAndRemoveEmptyDir","publicDir","pagePath","pageHtmlDirectory","dirname","generateHtmlPath","pageDataDirectory","join","fixedPagePath","removeSync","sortedPageKeysByNestedLevel","pageKeys","sort","a","b","currentPagePathValue","split","previousPagePathValue","removePageFiles","removePages","map","removePromise","removePageHtmlFile","then","store","dispatch","type","payload","removePageDataList","removePageData","Promise","all","forEach","FSisCaseInsensitive","process","env","TEST_FORCE_CASE_FS","platform","normalizePagePath","toLowerCase","endsWith","slice","pageGenerationActionPriority","regenerate","reuse","delete","calcDirtyHtmlFiles","state","toRegenerate","Set","toDelete","toCleanupFromTrackedState","normalizedPagePathToAction","Map","markActionForPage","action","normalizedPagePath","previousAction","get","overwritePreviousAction","previousActionPriority","currentActionPriority","add","actualPath","set","html","unsafeBuiltinWasUsedInSSR","reporter","warn","trackedHtmlFiles","htmlFile","page","pages","isDeleted","getPageMode","dirty","Array","from","markHtmlDirtyIfResultOfUsedStaticQueryChanged","getState","dirtyStaticQueryResults","trackedStaticQueryResults","staticQueryResultState","staticQueryHash","dirtyTemplates","staticQueriesByTemplate","staticQueryHashes","componentPath","dirtyStaticQueryHash","includes","dirtyPages","dirtyTemplate","component","components"],"sources":["../../src/commands/build-utils.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport { platform } from \"os\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport {\n  remove as removePageHtmlFile,\n  generateHtmlPath,\n  fixedPagePath,\n} from \"gatsby-core-utils\"\nimport { removePageData } from \"../utils/page-data\"\nimport { store } from \"../redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { getPageMode } from \"../utils/page-mode\"\n\nconst checkFolderIsEmpty = (path: string): boolean =>\n  fs.existsSync(path) && !fs.readdirSync(path).length\n\nconst checkAndRemoveEmptyDir = (publicDir: string, pagePath: string): void => {\n  const pageHtmlDirectory = path.dirname(generateHtmlPath(publicDir, pagePath))\n  const pageDataDirectory = path.join(\n    publicDir,\n    `page-data`,\n    fixedPagePath(pagePath)\n  )\n  // if page's folder is empty also remove matching page-data folder\n  if (checkFolderIsEmpty(pageHtmlDirectory)) {\n    fs.removeSync(pageHtmlDirectory)\n  }\n  if (checkFolderIsEmpty(pageDataDirectory)) {\n    fs.removeSync(pageDataDirectory)\n  }\n}\n\nconst sortedPageKeysByNestedLevel = (pageKeys: Array<string>): Array<string> =>\n  pageKeys.sort((a, b) => {\n    const currentPagePathValue = a.split(`/`).length\n    const previousPagePathValue = b.split(`/`).length\n    return previousPagePathValue - currentPagePathValue\n  })\n\nexport const removePageFiles = async (\n  publicDir: string,\n  pageKeys: Array<string>\n): Promise<void> => {\n  const removePages = pageKeys.map(pagePath => {\n    const removePromise = removePageHtmlFile({ publicDir }, pagePath)\n    removePromise.then(() => {\n      store.dispatch({\n        type: `HTML_REMOVED`,\n        payload: pagePath,\n      })\n    })\n    return removePromise\n  })\n\n  const removePageDataList = pageKeys.map(pagePath =>\n    removePageData(publicDir, pagePath)\n  )\n\n  return Promise.all([...removePages, ...removePageDataList]).then(() => {\n    // Sort removed pageKeys by nested directories and remove if empty.\n    sortedPageKeysByNestedLevel(pageKeys).forEach(pagePath => {\n      checkAndRemoveEmptyDir(publicDir, pagePath)\n    })\n  })\n}\n\nconst FSisCaseInsensitive = process.env.TEST_FORCE_CASE_FS\n  ? process.env.TEST_FORCE_CASE_FS === `INSENSITIVE`\n  : platform() === `win32` || platform() === `darwin`\nfunction normalizePagePath(path: string): string {\n  if (path === `/`) {\n    return `/`\n  }\n\n  if (FSisCaseInsensitive) {\n    // e.g. /TEST/ and /test/ would produce \"same\" artifacts on case insensitive\n    // file systems\n    path = path.toLowerCase()\n  }\n\n  return path.endsWith(`/`) ? path.slice(0, -1) : path\n}\n\ntype PageGenerationAction = \"delete\" | \"regenerate\" | \"reuse\"\nconst pageGenerationActionPriority: Record<PageGenerationAction, number> = {\n  // higher the number, higher the priority\n  regenerate: 2,\n  reuse: 1,\n  delete: 0,\n}\n\nexport function calcDirtyHtmlFiles(state: IGatsbyState): {\n  toRegenerate: Array<string>\n  toDelete: Array<string>\n  toCleanupFromTrackedState: Set<string>\n} {\n  const toRegenerate = new Set<string>()\n  const toDelete = new Set<string>()\n  const toCleanupFromTrackedState = new Set<string>()\n  const normalizedPagePathToAction = new Map<\n    string,\n    {\n      actualPath: string\n      action: PageGenerationAction\n    }\n  >()\n\n  /**\n   * multiple page paths can result in same html and page-data filenames\n   * so we need to keep that in mind when generating list of pages\n   * to regenerate and more importantly - to delete (so we don't delete html and page-data file\n   * when path changes slightly but it would still result in same html and page-data filenames\n   * for example adding/removing trailing slash between builds or even mid build with plugins\n   * like `gatsby-plugin-remove-trailing-slashes`). Additionally similar consideration need to\n   * be accounted for cases where page paths casing on case-insensitive file systems.\n   */\n  function markActionForPage(path: string, action: PageGenerationAction): void {\n    const normalizedPagePath = normalizePagePath(path)\n\n    const previousAction = normalizedPagePathToAction.get(normalizedPagePath)\n    let overwritePreviousAction = false\n    if (previousAction) {\n      const previousActionPriority =\n        pageGenerationActionPriority[previousAction.action]\n      const currentActionPriority = pageGenerationActionPriority[action]\n\n      if (currentActionPriority > previousActionPriority) {\n        overwritePreviousAction = true\n        toCleanupFromTrackedState.add(previousAction.actualPath)\n        if (previousAction.action === `delete`) {\n          // \"reuse\" or \"regenerate\" will take over, so we should\n          // remove path from list of paths to delete\n          toDelete.delete(previousAction.actualPath)\n        }\n      }\n    }\n\n    if (!previousAction || overwritePreviousAction) {\n      normalizedPagePathToAction.set(normalizedPagePath, {\n        actualPath: path,\n        action,\n      })\n      if (action === `delete`) {\n        toDelete.add(path)\n      } else if (action === `regenerate`) {\n        toRegenerate.add(path)\n      }\n    }\n  }\n\n  if (state.html.unsafeBuiltinWasUsedInSSR) {\n    reporter.warn(\n      `Previous build used unsafe builtin method. We need to rebuild all pages`\n    )\n  }\n\n  state.html.trackedHtmlFiles.forEach(function (htmlFile, path) {\n    const page = state.pages.get(path)\n    if (htmlFile.isDeleted || !page) {\n      // FIXME: checking pages state here because pages are not persisted\n      // and because of that `isDeleted` might not be set ...\n      markActionForPage(path, `delete`)\n    } else {\n      if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n        if (getPageMode(page, state) === `SSG`) {\n          if (htmlFile.dirty || state.html.unsafeBuiltinWasUsedInSSR) {\n            markActionForPage(path, `regenerate`)\n          } else {\n            markActionForPage(path, `reuse`)\n          }\n        }\n      } else {\n        if (htmlFile.dirty || state.html.unsafeBuiltinWasUsedInSSR) {\n          markActionForPage(path, `regenerate`)\n        } else {\n          markActionForPage(path, `reuse`)\n        }\n      }\n    }\n  })\n\n  return {\n    toRegenerate: Array.from(toRegenerate),\n    toDelete: Array.from(toDelete),\n    toCleanupFromTrackedState,\n  }\n}\n\nexport function markHtmlDirtyIfResultOfUsedStaticQueryChanged(): void {\n  const state = store.getState()\n\n  const dirtyStaticQueryResults = new Set<string>()\n  state.html.trackedStaticQueryResults.forEach(function (\n    staticQueryResultState,\n    staticQueryHash\n  ) {\n    if (staticQueryResultState.dirty) {\n      dirtyStaticQueryResults.add(staticQueryHash)\n    }\n  })\n\n  // we have dirty static query hashes - now we need to find templates that use them\n  const dirtyTemplates = new Set<string>()\n  state.staticQueriesByTemplate.forEach(function (\n    staticQueryHashes,\n    componentPath\n  ) {\n    for (const dirtyStaticQueryHash of dirtyStaticQueryResults) {\n      if (staticQueryHashes.includes(dirtyStaticQueryHash)) {\n        dirtyTemplates.add(componentPath)\n        break // we already know this template need to rebuild, no need to check rest of queries\n      }\n    }\n  })\n\n  // mark html as dirty\n  const dirtyPages = new Set<string>()\n  for (const dirtyTemplate of dirtyTemplates) {\n    const component = state.components.get(dirtyTemplate)\n    if (component) {\n      for (const page of component.pages) {\n        dirtyPages.add(page)\n      }\n    }\n  }\n\n  store.dispatch({\n    type: `HTML_MARK_DIRTY_BECAUSE_STATIC_QUERY_RESULT_CHANGED`,\n    payload: {\n      pages: dirtyPages,\n      staticQueryHashes: dirtyStaticQueryResults,\n    },\n  })\n}\n"],"mappings":"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"}