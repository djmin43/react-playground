{"version":3,"file":"serve.js","names":["process","env","GATSBY_EXPERIMENTAL_LMDB_STORE","detectLmdbStore","onExit","telemetry","trackCli","readMatchPaths","program","filePath","path","join","directory","rawJSON","fs","readFile","error","report","warn","chalk","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","reachMatch","sendFile","err","module","exports","startBackgroundUpdate","initTracer","GATSBY_OPEN_TRACING_CONFIG_FILE","openTracingConfigFile","prefixPaths","port","open","host","parseInt","configModule","getConfigFile","config","preferDefault","pathPrefix","configPathPrefix","trailingSlash","root","app","express","partytownProxiedURLs","use","thirdPartyProxyPath","partytownProxy","router","Router","expressMiddleware","compression","configureTrailingSlash","pages","get","pathName","getDataStore","getNode","values","iterateNodesByType","static","dotfiles","compiledFunctionsDir","functions","readFileSync","e","functionMiddlewares","getFunctions","GraphQLEngine","require","getData","renderPageData","renderHTML","graphqlEngine","dbPath","requestedPagePath","params","pagePath","potentialPagePath","reverseFixedPagePath","page","findPageByPath","mode","requestActivity","phantomActivity","start","spanContext","span","context","data","results","serverDataHeaders","name","value","Object","entries","setHeader","serverDataStatus","status","send","contentType","end","_","header","printInstructions","appName","urls","console","log","lanUrlForTerminal","localUrlForTerminal","startListening","listen","prepareUrls","ssl","sitePackageJson","info","Promise","resolve","openurl","localUrlForBrowser","catch","detectPortInUseAndPrompt","message"],"sources":["../../src/commands/serve.ts"],"sourcesContent":["import path from \"path\"\nimport openurl from \"better-opn\"\nimport fs from \"fs-extra\"\nimport compression from \"compression\"\nimport express from \"express\"\nimport chalk from \"chalk\"\nimport { match as reachMatch } from \"@gatsbyjs/reach-router/lib/utils\"\nimport onExit from \"signal-exit\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport { IProgram } from \"./types\"\nimport { IPreparedUrls, prepareUrls } from \"../utils/prepare-urls\"\nimport {\n  IGatsbyConfig,\n  IGatsbyFunction,\n  IGatsbyPage,\n  IGatsbyState,\n} from \"../redux/types\"\nimport { reverseFixedPagePath } from \"../utils/page-data\"\nimport { initTracer } from \"../utils/tracer\"\nimport { configureTrailingSlash } from \"../utils/express-middlewares\"\nimport { getDataStore, detectLmdbStore } from \"../datastore\"\nimport { functionMiddlewares } from \"../internal-plugins/functions/middleware\"\nimport {\n  thirdPartyProxyPath,\n  partytownProxy,\n} from \"../internal-plugins/partytown/proxy\"\n\nprocess.env.GATSBY_EXPERIMENTAL_LMDB_STORE = `1`\ndetectLmdbStore()\n\ninterface IMatchPath {\n  path: string\n  matchPath: string\n}\n\ninterface IServeProgram extends IProgram {\n  prefixPaths: boolean\n}\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async (\n  program: IServeProgram\n): Promise<Array<IMatchPath>> => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath, `utf8`)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON) as Array<IMatchPath>\n}\n\nconst matchPathRouter =\n  (\n    matchPaths: Array<IMatchPath>,\n    options: {\n      root: string\n    }\n  ) =>\n  (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const matchPath = matchPaths.find(\n        ({ matchPath }) => reachMatch(matchPath, url) !== null\n      )\n      if (matchPath) {\n        return res.sendFile(\n          path.join(matchPath.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n\nmodule.exports = async (program: IServeProgram): Promise<void> => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  await initTracer(\n    process.env.GATSBY_OPEN_TRACING_CONFIG_FILE || program.openTracingConfigFile\n  )\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const { configModule } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  const config: IGatsbyConfig = preferDefault(configModule)\n\n  const { pathPrefix: configPathPrefix, trailingSlash } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n\n  // Proxy gatsby-script using off-main-thread strategy\n  const { partytownProxiedURLs = [] } = config || {}\n\n  app.use(thirdPartyProxyPath, partytownProxy(partytownProxiedURLs))\n\n  // eslint-disable-next-line new-cap\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n\n  router.use(\n    configureTrailingSlash(\n      () =>\n        ({\n          pages: {\n            get(pathName: string): IGatsbyPage | undefined {\n              return getDataStore().getNode(`SitePage ${pathName}`) as\n                | IGatsbyPage\n                | undefined\n            },\n            values(): Iterable<IGatsbyPage> {\n              return getDataStore().iterateNodesByType(\n                `SitePage`\n              ) as Iterable<IGatsbyPage>\n            },\n          },\n        } as unknown as IGatsbyState),\n      trailingSlash\n    )\n  )\n\n  router.use(express.static(`public`, { dotfiles: `allow` }))\n\n  const compiledFunctionsDir = path.join(\n    program.directory,\n    `.cache`,\n    `functions`\n  )\n\n  let functions: Array<IGatsbyFunction> = []\n  try {\n    functions = JSON.parse(\n      fs.readFileSync(path.join(compiledFunctionsDir, `manifest.json`), `utf-8`)\n    )\n  } catch (e) {\n    // ignore\n  }\n\n  if (functions) {\n    app.use(\n      `/api/*`,\n      ...functionMiddlewares({\n        getFunctions(): Array<IGatsbyFunction> {\n          return functions\n        },\n      })\n    )\n  }\n\n  // Handle SSR & DSG Pages\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    try {\n      const { GraphQLEngine } = require(path.join(\n        program.directory,\n        `.cache`,\n        `query-engine`\n      )) as typeof import(\"../schema/graphql-engine/entry\")\n      const { getData, renderPageData, renderHTML } = require(path.join(\n        program.directory,\n        `.cache`,\n        `page-ssr`\n      )) as typeof import(\"../utils/page-ssr-module/entry\")\n      const graphqlEngine = new GraphQLEngine({\n        dbPath: path.join(program.directory, `.cache`, `data`, `datastore`),\n      })\n\n      router.get(\n        `/page-data/:pagePath(*)/page-data.json`,\n        async (req, res, next) => {\n          const requestedPagePath = req.params.pagePath\n          if (!requestedPagePath) {\n            return void next()\n          }\n\n          const potentialPagePath = reverseFixedPagePath(requestedPagePath)\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n\n          if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n            const requestActivity = report.phantomActivity(\n              `request for \"${req.path}\"`\n            )\n            requestActivity.start()\n            try {\n              const spanContext = requestActivity.span.context()\n              const data = await getData({\n                pathName: req.path,\n                graphqlEngine,\n                req,\n                spanContext,\n              })\n              const results = await renderPageData({ data, spanContext })\n              if (page.mode === `SSR` && data.serverDataHeaders) {\n                for (const [name, value] of Object.entries(\n                  data.serverDataHeaders\n                )) {\n                  res.setHeader(name, value)\n                }\n              }\n\n              if (page.mode === `SSR` && data.serverDataStatus) {\n                return void res.status(data.serverDataStatus).send(results)\n              } else {\n                return void res.send(results)\n              }\n            } catch (e) {\n              report.error(\n                `Generating page-data for \"${requestedPagePath}\" / \"${potentialPagePath}\" failed.`,\n                e\n              )\n              return res\n                .status(500)\n                .contentType(`text/plain`)\n                .send(`Internal server error.`)\n            } finally {\n              requestActivity.end()\n            }\n          }\n\n          return void next()\n        }\n      )\n\n      router.use(async (req, res, next) => {\n        if (req.accepts(`html`)) {\n          const potentialPagePath = req.path\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n          if (page && (page.mode === `DSG` || page.mode === `SSR`)) {\n            const requestActivity = report.phantomActivity(\n              `request for \"${req.path}\"`\n            )\n            requestActivity.start()\n\n            try {\n              const spanContext = requestActivity.span.context()\n              const data = await getData({\n                pathName: potentialPagePath,\n                graphqlEngine,\n                req,\n                spanContext,\n              })\n              const results = await renderHTML({ data, spanContext })\n              if (page.mode === `SSR` && data.serverDataHeaders) {\n                for (const [name, value] of Object.entries(\n                  data.serverDataHeaders\n                )) {\n                  res.setHeader(name, value)\n                }\n              }\n\n              if (page.mode === `SSR` && data.serverDataStatus) {\n                return void res.status(data.serverDataStatus).send(results)\n              } else {\n                return void res.send(results)\n              }\n            } catch (e) {\n              report.error(\n                `Rendering html for \"${potentialPagePath}\" failed.`,\n                e\n              )\n              return res.status(500).sendFile(`500.html`, { root }, err => {\n                if (err) {\n                  res.contentType(`text/plain`).send(`Internal server error.`)\n                }\n              })\n            } finally {\n              requestActivity.end()\n            }\n          }\n        }\n        return next()\n      })\n    } catch (error) {\n      // TODO: Handle case of engine not being generated\n    }\n  }\n\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n\n  // TODO: Remove/merge with above same block\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function (\n    _: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  function printInstructions(appName: string, urls: IPreparedUrls): void {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n  }\n\n  const startListening = (): void => {\n    app.listen(port, host, () => {\n      const urls = prepareUrls(\n        program.ssl ? `https` : `http`,\n        program.host,\n        port\n      )\n      printInstructions(\n        program.sitePackageJson.name || `(Unnamed package)`,\n        urls\n      )\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(() =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  try {\n    port = await detectPortInUseAndPrompt(port)\n    startListening()\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      return\n    }\n\n    throw e\n  }\n}\n"],"mappings":"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"}