{"version":3,"file":"suggest-index.js","names":["suggestIndex","filter","sort","maxFields","filterQueries","createDbQueriesFromObject","prepareQueryArgs","filterQueriesThatCanUseIndex","getQueriesThatCanUseIndex","sortFields","getSortFieldsThatCanUseIndex","length","dedupeAndTrim","toIndexFields","sortDirection","eqFilterQueries","getEqQueries","eqFilterFields","overlap","findOverlappingFields","name","has","canUseIndex","Set","DbComparator","EQ","IN","GTE","LTE","GT","LT","NIN","NE","all","sortBySpecificity","q","getFilterStatement","comparator","querySortArg","fields","order","initialOrder","isDesc","i","field","push","fieldName","filterQuery","find","dbQueryToDottedField","add","queries","map","Map","slice"],"sources":["../../../../src/datastore/lmdb/query/suggest-index.ts"],"sourcesContent":["import { IRunQueryArgs } from \"../../types\"\nimport {\n  createDbQueriesFromObject,\n  DbComparator,\n  DbQuery,\n  dbQueryToDottedField,\n  getFilterStatement,\n  prepareQueryArgs,\n  sortBySpecificity,\n} from \"../../common/query\"\nimport { isDesc } from \"./common\"\n\ninterface ISelectIndexArgs {\n  filter: IRunQueryArgs[\"queryArgs\"][\"filter\"]\n  sort: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n  maxFields?: number\n}\n\ntype IndexField = [fieldName: string, orderDirection: number]\ntype IndexFields = Array<IndexField>\n\n/**\n * Suggest index fields for this combination of filter and sort.\n *\n * Prioritizes sort fields over filter fields when can't use index\n * for both because sorting is expensive both CPU and memory-wise.\n */\nexport function suggestIndex({\n  filter,\n  sort,\n  maxFields = 6,\n}: ISelectIndexArgs): Array<IndexField> {\n  const filterQueries = createDbQueriesFromObject(prepareQueryArgs(filter))\n  const filterQueriesThatCanUseIndex = getQueriesThatCanUseIndex(filterQueries)\n  const sortFields: Array<IndexField> = getSortFieldsThatCanUseIndex(sort)\n\n  if (!sortFields.length && !filterQueriesThatCanUseIndex.length) {\n    return []\n  }\n  if (!filterQueriesThatCanUseIndex.length) {\n    return dedupeAndTrim(sortFields, maxFields)\n  }\n  if (!sortFields.length) {\n    return dedupeAndTrim(toIndexFields(filterQueriesThatCanUseIndex), maxFields)\n  }\n\n  // Combined index for filter+sort only makes sense when all prefix fields have `eq` predicate\n  // Same as https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/#sort-and-non-prefix-subset-of-an-index\n  const sortDirection = sortFields[0][1]\n  const eqFilterQueries = getEqQueries(filterQueriesThatCanUseIndex)\n  const eqFilterFields = toIndexFields(eqFilterQueries, sortDirection)\n\n  // Index prefix should not contain eq filters overlapping with sort fields\n  const overlap = findOverlappingFields(eqFilterQueries, sortFields)\n\n  return dedupeAndTrim(\n    [\n      ...eqFilterFields.filter(([name]) => !overlap.has(name)),\n      ...sortFields,\n      // Still append other filter fields to the tail of the index to leverage additional filtering\n      //  of results using data stored in the index (without loading full node object)\n      //  Note: fields previously listed in eqFilterFields and sortFields will be removed in dedupeAndTrim\n      ...toIndexFields(filterQueriesThatCanUseIndex, sortDirection),\n    ],\n    maxFields\n  )\n}\n\nconst canUseIndex = new Set([\n  DbComparator.EQ,\n  DbComparator.IN,\n  DbComparator.GTE,\n  DbComparator.LTE,\n  DbComparator.GT,\n  DbComparator.LT,\n  DbComparator.NIN,\n  DbComparator.NE,\n])\n\n/**\n * Returns queries that can potentially use index.\n * Returned list is sorted by query specificity\n */\nfunction getQueriesThatCanUseIndex(all: Array<DbQuery>): Array<DbQuery> {\n  return sortBySpecificity(\n    all.filter(q => canUseIndex.has(getFilterStatement(q).comparator))\n  )\n}\n\nfunction getSortFieldsThatCanUseIndex(\n  querySortArg: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n): Array<IndexField> {\n  const sort = querySortArg || { fields: [], order: [] }\n  const initialOrder = isDesc(sort?.order[0]) ? -1 : 1\n\n  const sortFields: Array<IndexField> = []\n  for (let i = 0; i < sort.fields.length; i++) {\n    const field = sort.fields[i]\n    const order = isDesc(sort.order[i]) ? -1 : 1\n    if (order !== initialOrder) {\n      // Mixed sort order is not supported by our indexes yet :/\n      // See https://github.com/DoctorEvidence/lmdb-store/discussions/62#discussioncomment-898949\n      break\n    }\n    sortFields.push([field, order])\n  }\n  return sortFields\n}\n\nfunction findOverlappingFields(\n  filterQueries: Array<DbQuery>,\n  sortFields: Array<IndexField>\n): Set<string> {\n  const overlap = new Set<string>()\n\n  for (const [fieldName] of sortFields) {\n    const filterQuery = filterQueries.find(\n      q => dbQueryToDottedField(q) === fieldName\n    )\n    if (!filterQuery) {\n      break\n    }\n    overlap.add(fieldName)\n  }\n  return overlap\n}\n\nfunction getEqQueries(filterQueries: Array<DbQuery>): Array<DbQuery> {\n  return filterQueries.filter(\n    filterQuery =>\n      getFilterStatement(filterQuery).comparator === DbComparator.EQ\n  )\n}\n\nfunction toIndexFields(\n  queries: Array<DbQuery>,\n  sortDirection: number = 1\n): IndexFields {\n  return queries.map(\n    (q): IndexField => [dbQueryToDottedField(q), sortDirection]\n  )\n}\n\nfunction dedupeAndTrim(fields: IndexFields, maxFields: number): IndexFields {\n  return [...new Map(fields)].slice(0, maxFields)\n}\n"],"mappings":"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"}