{"version":3,"file":"run-query.js","names":["doRunQuery","args","context","createQueryContext","totalCount","runCountOnce","limit","undefined","skip","canUseIndex","Promise","all","nodeTypeNames","map","typeName","createIndex","suggestedIndexFields","entries","performIndexScan","performFullTableScan","sortFields","filterContext","length","result","GatsbyIterable","resultOffset","indexMetadata","getIndexMetadata","needsSorting","nodes","usedSkip","filterNodes","concat","canUseIndexForSorting","mergeSorted","createNodeSortComparator","unlimited","sortedNodes","sortNodesInMemory","actualSkip","slice","runCount","count","needsFiltering","datastore","countNodes","completeFiltering","iterateNodesByType","_","countUsingIndexOnly","e","usedQueries","filterUsingIndex","reverse","Array","from","values","value","getNode","filter","Boolean","intermediateResult","Set","dbQueries","isFullyFiltered","resolvedNodes","store","getState","resolvedNodesCache","filtersToApply","q","has","dbQueryToDottedField","getFilterStatement","node","resolvedFields","get","internal","type","id","dottedField","tmp","resolveFieldValue","isArray","some","v","matchesFilter","arr","sort","queryArgs","firstOnly","databases","createDbQueriesFromObject","prepareQueryArgs","Map","fields","field","i","isDesc","order","suggestIndex","size","index","indexKeyFields","keyFields","sortOrder","nodeComparator","a","b","resolvedAFields","resolvedBFields","direction","valueA","valueB","compareByKeySuffix","prefixLength","aSuffix","key","bSuffix","compareKey"],"sources":["../../../../src/datastore/lmdb/query/run-query.ts"],"sourcesContent":["import {\n  IDataStore,\n  ILmdbDatabases,\n  IQueryResult,\n  IRunQueryArgs,\n} from \"../../types\"\nimport { IGatsbyNode } from \"../../../redux/types\"\nimport { GatsbyIterable } from \"../../common/iterable\"\nimport {\n  createDbQueriesFromObject,\n  DbQuery,\n  dbQueryToDottedField,\n  getFilterStatement,\n  IDbFilterStatement,\n  prepareQueryArgs,\n} from \"../../common/query\"\nimport {\n  createIndex,\n  getIndexMetadata,\n  IIndexMetadata,\n  IndexFields,\n} from \"./create-index\"\nimport {\n  countUsingIndexOnly,\n  filterUsingIndex,\n  IIndexEntry,\n} from \"./filter-using-index\"\nimport { store } from \"../../../redux\"\nimport { isDesc, resolveFieldValue, matchesFilter, compareKey } from \"./common\"\nimport { suggestIndex } from \"./suggest-index\"\n\ninterface IDoRunQueryArgs extends IRunQueryArgs {\n  databases: ILmdbDatabases\n  datastore: IDataStore\n}\n\ntype SortFields = Map<string, number>\n\ninterface IQueryContext {\n  datastore: IDataStore\n  databases: ILmdbDatabases\n  dbQueries: Array<DbQuery>\n  sortFields: SortFields\n  nodeTypeNames: Array<string>\n  suggestedIndexFields: IndexFields\n  indexMetadata?: IIndexMetadata\n  limit?: number\n  skip: number\n  totalCount?: number\n}\n\nexport async function doRunQuery(args: IDoRunQueryArgs): Promise<IQueryResult> {\n  // Note: Keeping doRunQuery method the only async method in chain for perf\n  const context = createQueryContext(args)\n\n  const totalCount = async (): Promise<number> =>\n    runCountOnce({ ...context, limit: undefined, skip: 0 })\n\n  if (canUseIndex(context)) {\n    await Promise.all(\n      context.nodeTypeNames.map(typeName =>\n        createIndex(context, typeName, context.suggestedIndexFields)\n      )\n    )\n    return { entries: performIndexScan(context), totalCount }\n  }\n  return { entries: performFullTableScan(context), totalCount }\n}\n\nfunction performIndexScan(context: IQueryContext): GatsbyIterable<IGatsbyNode> {\n  const { suggestedIndexFields, sortFields } = context\n\n  const filterContext =\n    context.nodeTypeNames.length === 1\n      ? context\n      : {\n          ...context,\n          skip: 0,\n          limit:\n            typeof context.limit === `undefined`\n              ? undefined\n              : context.skip + context.limit,\n        }\n\n  let result = new GatsbyIterable<IGatsbyNode>([])\n  let resultOffset = filterContext.skip\n  for (const typeName of context.nodeTypeNames) {\n    const indexMetadata = getIndexMetadata(\n      context,\n      typeName,\n      suggestedIndexFields\n    )\n    if (!needsSorting(context)) {\n      const { nodes, usedSkip } = filterNodes(filterContext, indexMetadata)\n      result = result.concat(nodes)\n      resultOffset = usedSkip\n      continue\n    }\n    if (canUseIndexForSorting(indexMetadata, sortFields)) {\n      const { nodes, usedSkip } = filterNodes(filterContext, indexMetadata)\n      // Interleave nodes of different types (not expensive for already sorted chunks)\n      result = result.mergeSorted(nodes, createNodeSortComparator(sortFields))\n      resultOffset = usedSkip\n      continue\n    }\n    // The sad part - unlimited filter + in-memory sort\n    const unlimited = { ...context, skip: 0, limit: undefined }\n    const { nodes, usedSkip } = filterNodes(unlimited, indexMetadata)\n    const sortedNodes = sortNodesInMemory(context, nodes)\n    resultOffset = usedSkip\n\n    result = result.mergeSorted(\n      sortedNodes,\n      createNodeSortComparator(sortFields)\n    )\n  }\n  const { limit, skip = 0 } = context\n  const actualSkip = skip - resultOffset\n\n  if (limit || actualSkip) {\n    result = result.slice(actualSkip, limit ? actualSkip + limit : undefined)\n  }\n  return result\n}\n\nfunction runCountOnce(context: IQueryContext): number {\n  if (typeof context.totalCount === `undefined`) {\n    context.totalCount = runCount(context)\n  }\n  return context.totalCount\n}\n\nfunction runCount(context: IQueryContext): number {\n  let count = 0\n\n  if (!needsFiltering(context)) {\n    for (const typeName of context.nodeTypeNames) {\n      count += context.datastore.countNodes(typeName)\n    }\n    return count\n  }\n\n  if (!canUseIndex(context)) {\n    for (const typeName of context.nodeTypeNames) {\n      const nodes = completeFiltering(\n        context,\n        new GatsbyIterable(context.datastore.iterateNodesByType(typeName))\n      )\n      for (const _ of nodes) count++\n    }\n    return count\n  }\n\n  for (const typeName of context.nodeTypeNames) {\n    const indexMetadata = getIndexMetadata(\n      context,\n      typeName,\n      context.suggestedIndexFields\n    )\n    try {\n      count += countUsingIndexOnly({ ...context, indexMetadata })\n    } catch (e) {\n      // We cannot reliably count using index - fallback to full iteration :/\n      for (const _ of filterNodes(context, indexMetadata).nodes) count++\n    }\n  }\n  return count\n}\n\nfunction performFullTableScan(\n  context: IQueryContext\n): GatsbyIterable<IGatsbyNode> {\n  // console.warn(`Fallback to full table scan :/`)\n\n  const { datastore, nodeTypeNames } = context\n\n  let result = new GatsbyIterable<IGatsbyNode>([])\n  for (const typeName of nodeTypeNames) {\n    let nodes = new GatsbyIterable(datastore.iterateNodesByType(typeName))\n    nodes = completeFiltering(context, nodes)\n\n    if (needsSorting(context)) {\n      nodes = sortNodesInMemory(context, nodes)\n      result = result.mergeSorted(\n        nodes,\n        createNodeSortComparator(context.sortFields)\n      )\n    } else {\n      result = result.concat(nodes)\n    }\n  }\n  const { limit, skip = 0 } = context\n\n  if (limit || skip) {\n    result = result.slice(skip, limit ? skip + limit : undefined)\n  }\n  return result\n}\n\nfunction filterNodes(\n  context: IQueryContext,\n  indexMetadata: IIndexMetadata\n): { nodes: GatsbyIterable<IGatsbyNode>; usedSkip: number } {\n  const { entries, usedQueries, usedSkip } = filterUsingIndex({\n    ...context,\n    indexMetadata,\n    reverse: Array.from(context.sortFields.values())[0] === -1,\n  })\n  const nodes = entries\n    .map(({ value }) => context.datastore.getNode(value))\n    .filter(Boolean)\n\n  return {\n    nodes: completeFiltering(\n      context,\n      nodes as GatsbyIterable<IGatsbyNode>,\n      usedQueries\n    ),\n    usedSkip,\n  }\n}\n\n/**\n * Takes intermediate result and applies any remaining filterQueries.\n *\n * If result is already fully filtered - simply returns.\n */\nfunction completeFiltering(\n  context: IQueryContext,\n  intermediateResult: GatsbyIterable<IGatsbyNode>,\n  usedQueries: Set<DbQuery> = new Set()\n): GatsbyIterable<IGatsbyNode> {\n  const { dbQueries } = context\n  if (isFullyFiltered(dbQueries, usedQueries)) {\n    return intermediateResult\n  }\n  // Apply remaining filter operations directly (last resort: slow)\n  const resolvedNodes = store.getState().resolvedNodesCache\n\n  const filtersToApply: Array<[string, IDbFilterStatement]> = dbQueries\n    .filter(q => !usedQueries.has(q))\n    .map(q => [dbQueryToDottedField(q), getFilterStatement(q)])\n\n  return intermediateResult.filter(node => {\n    const resolvedFields = resolvedNodes?.get(node.internal.type)?.get(node.id)\n\n    for (const [dottedField, filter] of filtersToApply) {\n      const tmp = resolveFieldValue(dottedField, node, resolvedFields)\n      const value = Array.isArray(tmp) ? tmp : [tmp]\n      if (value.some(v => !matchesFilter(filter, v))) {\n        // Mimic AND semantics\n        return false\n      }\n    }\n    return true\n  })\n}\n\nfunction sortNodesInMemory(\n  context: IQueryContext,\n  nodes: GatsbyIterable<IGatsbyNode>\n): GatsbyIterable<IGatsbyNode> {\n  // TODO: Sort using index data whenever possible (maybe store data needed for sorting in index values)\n  // TODO: Nodes can be partially sorted by index prefix - we can (and should) exploit this\n  return new GatsbyIterable(() => {\n    const arr = Array.from(nodes)\n    arr.sort(createNodeSortComparator(context.sortFields))\n    return arr\n  })\n}\n\nfunction createQueryContext(args: IDoRunQueryArgs): IQueryContext {\n  const { queryArgs: { filter, sort, limit, skip = 0 } = {}, firstOnly } = args\n\n  return {\n    datastore: args.datastore,\n    databases: args.databases,\n    nodeTypeNames: args.nodeTypeNames,\n    dbQueries: createDbQueriesFromObject(prepareQueryArgs(filter)),\n    sortFields: new Map<string, number>(\n      sort?.fields.map((field, i) => [field, isDesc(sort?.order[i]) ? -1 : 1])\n    ),\n    suggestedIndexFields: new Map(suggestIndex({ filter, sort })),\n    limit: firstOnly ? 1 : limit,\n    skip,\n  }\n}\n\nfunction canUseIndex(context: IQueryContext): boolean {\n  return context.suggestedIndexFields.size > 0\n}\n\nfunction needsFiltering(context: IQueryContext): boolean {\n  return context.dbQueries.length > 0\n}\n\nfunction needsSorting(context: IQueryContext): boolean {\n  return context.sortFields.size > 0\n}\n\n/**\n * Based on assumption that if all sort fields exist in index\n * then any result received from this index is fully sorted\n */\nfunction canUseIndexForSorting(\n  index: IIndexMetadata,\n  sortFields: SortFields\n): boolean {\n  const indexKeyFields = new Map(index.keyFields)\n  for (const [field, sortOrder] of sortFields) {\n    if (indexKeyFields.get(field) !== sortOrder) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction isFullyFiltered(\n  dbQueries: Array<DbQuery>,\n  usedQueries: Set<DbQuery>\n): boolean {\n  return dbQueries.length === usedQueries.size\n}\n\nfunction createNodeSortComparator(sortFields: SortFields): (a, b) => number {\n  const resolvedNodesCache = store.getState().resolvedNodesCache\n\n  return function nodeComparator(a: IGatsbyNode, b: IGatsbyNode): number {\n    const resolvedAFields = resolvedNodesCache?.get(a.internal.type)?.get(a.id)\n    const resolvedBFields = resolvedNodesCache?.get(b.internal.type)?.get(b.id)\n\n    for (const [field, direction] of sortFields) {\n      const valueA: any = resolveFieldValue(field, a, resolvedAFields)\n      const valueB: any = resolveFieldValue(field, b, resolvedBFields)\n\n      if (valueA > valueB) {\n        return direction === 1 ? 1 : -1\n      } else if (valueA < valueB) {\n        return direction === 1 ? -1 : 1\n      }\n    }\n    return 0\n  }\n}\n\nexport function compareByKeySuffix(prefixLength: number) {\n  return function (a: IIndexEntry, b: IIndexEntry): number {\n    const aSuffix = a.key.slice(prefixLength)\n    const bSuffix = b.key.slice(prefixLength)\n    // @ts-ignore\n    return compareKey(aSuffix, bSuffix)\n  }\n}\n"],"mappings":";;;;;;AAOA;;AACA;;AAQA;;AAMA;;AAKA;;AACA;;AACA;;AAsBO,eAAeA,UAAf,CAA0BC,IAA1B,EAAwE;EAC7E;EACA,MAAMC,OAAO,GAAGC,kBAAkB,CAACF,IAAD,CAAlC;;EAEA,MAAMG,UAAU,GAAG,YACjBC,YAAY,CAAC,EAAE,GAAGH,OAAL;IAAcI,KAAK,EAAEC,SAArB;IAAgCC,IAAI,EAAE;EAAtC,CAAD,CADd;;EAGA,IAAIC,WAAW,CAACP,OAAD,CAAf,EAA0B;IACxB,MAAMQ,OAAO,CAACC,GAAR,CACJT,OAAO,CAACU,aAAR,CAAsBC,GAAtB,CAA0BC,QAAQ,IAChC,IAAAC,wBAAA,EAAYb,OAAZ,EAAqBY,QAArB,EAA+BZ,OAAO,CAACc,oBAAvC,CADF,CADI,CAAN;IAKA,OAAO;MAAEC,OAAO,EAAEC,gBAAgB,CAAChB,OAAD,CAA3B;MAAsCE;IAAtC,CAAP;EACD;;EACD,OAAO;IAAEa,OAAO,EAAEE,oBAAoB,CAACjB,OAAD,CAA/B;IAA0CE;EAA1C,CAAP;AACD;;AAED,SAASc,gBAAT,CAA0BhB,OAA1B,EAA+E;EAC7E,MAAM;IAAEc,oBAAF;IAAwBI;EAAxB,IAAuClB,OAA7C;EAEA,MAAMmB,aAAa,GACjBnB,OAAO,CAACU,aAAR,CAAsBU,MAAtB,KAAiC,CAAjC,GACIpB,OADJ,GAEI,EACE,GAAGA,OADL;IAEEM,IAAI,EAAE,CAFR;IAGEF,KAAK,EACH,OAAOJ,OAAO,CAACI,KAAf,KAA0B,WAA1B,GACIC,SADJ,GAEIL,OAAO,CAACM,IAAR,GAAeN,OAAO,CAACI;EAN/B,CAHN;EAYA,IAAIiB,MAAM,GAAG,IAAIC,wBAAJ,CAAgC,EAAhC,CAAb;EACA,IAAIC,YAAY,GAAGJ,aAAa,CAACb,IAAjC;;EACA,KAAK,MAAMM,QAAX,IAAuBZ,OAAO,CAACU,aAA/B,EAA8C;IAC5C,MAAMc,aAAa,GAAG,IAAAC,6BAAA,EACpBzB,OADoB,EAEpBY,QAFoB,EAGpBE,oBAHoB,CAAtB;;IAKA,IAAI,CAACY,YAAY,CAAC1B,OAAD,CAAjB,EAA4B;MAC1B,MAAM;QAAE2B,KAAF;QAASC;MAAT,IAAsBC,WAAW,CAACV,aAAD,EAAgBK,aAAhB,CAAvC;MACAH,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAcH,KAAd,CAAT;MACAJ,YAAY,GAAGK,QAAf;MACA;IACD;;IACD,IAAIG,qBAAqB,CAACP,aAAD,EAAgBN,UAAhB,CAAzB,EAAsD;MACpD,MAAM;QAAES,KAAF;QAASC;MAAT,IAAsBC,WAAW,CAACV,aAAD,EAAgBK,aAAhB,CAAvC,CADoD,CAEpD;;MACAH,MAAM,GAAGA,MAAM,CAACW,WAAP,CAAmBL,KAAnB,EAA0BM,wBAAwB,CAACf,UAAD,CAAlD,CAAT;MACAK,YAAY,GAAGK,QAAf;MACA;IACD,CAlB2C,CAmB5C;;;IACA,MAAMM,SAAS,GAAG,EAAE,GAAGlC,OAAL;MAAcM,IAAI,EAAE,CAApB;MAAuBF,KAAK,EAAEC;IAA9B,CAAlB;IACA,MAAM;MAAEsB,KAAF;MAASC;IAAT,IAAsBC,WAAW,CAACK,SAAD,EAAYV,aAAZ,CAAvC;IACA,MAAMW,WAAW,GAAGC,iBAAiB,CAACpC,OAAD,EAAU2B,KAAV,CAArC;IACAJ,YAAY,GAAGK,QAAf;IAEAP,MAAM,GAAGA,MAAM,CAACW,WAAP,CACPG,WADO,EAEPF,wBAAwB,CAACf,UAAD,CAFjB,CAAT;EAID;;EACD,MAAM;IAAEd,KAAF;IAASE,IAAI,GAAG;EAAhB,IAAsBN,OAA5B;EACA,MAAMqC,UAAU,GAAG/B,IAAI,GAAGiB,YAA1B;;EAEA,IAAInB,KAAK,IAAIiC,UAAb,EAAyB;IACvBhB,MAAM,GAAGA,MAAM,CAACiB,KAAP,CAAaD,UAAb,EAAyBjC,KAAK,GAAGiC,UAAU,GAAGjC,KAAhB,GAAwBC,SAAtD,CAAT;EACD;;EACD,OAAOgB,MAAP;AACD;;AAED,SAASlB,YAAT,CAAsBH,OAAtB,EAAsD;EACpD,IAAI,OAAOA,OAAO,CAACE,UAAf,KAA+B,WAAnC,EAA+C;IAC7CF,OAAO,CAACE,UAAR,GAAqBqC,QAAQ,CAACvC,OAAD,CAA7B;EACD;;EACD,OAAOA,OAAO,CAACE,UAAf;AACD;;AAED,SAASqC,QAAT,CAAkBvC,OAAlB,EAAkD;EAChD,IAAIwC,KAAK,GAAG,CAAZ;;EAEA,IAAI,CAACC,cAAc,CAACzC,OAAD,CAAnB,EAA8B;IAC5B,KAAK,MAAMY,QAAX,IAAuBZ,OAAO,CAACU,aAA/B,EAA8C;MAC5C8B,KAAK,IAAIxC,OAAO,CAAC0C,SAAR,CAAkBC,UAAlB,CAA6B/B,QAA7B,CAAT;IACD;;IACD,OAAO4B,KAAP;EACD;;EAED,IAAI,CAACjC,WAAW,CAACP,OAAD,CAAhB,EAA2B;IACzB,KAAK,MAAMY,QAAX,IAAuBZ,OAAO,CAACU,aAA/B,EAA8C;MAC5C,MAAMiB,KAAK,GAAGiB,iBAAiB,CAC7B5C,OAD6B,EAE7B,IAAIsB,wBAAJ,CAAmBtB,OAAO,CAAC0C,SAAR,CAAkBG,kBAAlB,CAAqCjC,QAArC,CAAnB,CAF6B,CAA/B;;MAIA,KAAK,MAAMkC,CAAX,IAAgBnB,KAAhB,EAAuBa,KAAK;IAC7B;;IACD,OAAOA,KAAP;EACD;;EAED,KAAK,MAAM5B,QAAX,IAAuBZ,OAAO,CAACU,aAA/B,EAA8C;IAC5C,MAAMc,aAAa,GAAG,IAAAC,6BAAA,EACpBzB,OADoB,EAEpBY,QAFoB,EAGpBZ,OAAO,CAACc,oBAHY,CAAtB;;IAKA,IAAI;MACF0B,KAAK,IAAI,IAAAO,qCAAA,EAAoB,EAAE,GAAG/C,OAAL;QAAcwB;MAAd,CAApB,CAAT;IACD,CAFD,CAEE,OAAOwB,CAAP,EAAU;MACV;MACA,KAAK,MAAMF,CAAX,IAAgBjB,WAAW,CAAC7B,OAAD,EAAUwB,aAAV,CAAX,CAAoCG,KAApD,EAA2Da,KAAK;IACjE;EACF;;EACD,OAAOA,KAAP;AACD;;AAED,SAASvB,oBAAT,CACEjB,OADF,EAE+B;EAC7B;EAEA,MAAM;IAAE0C,SAAF;IAAahC;EAAb,IAA+BV,OAArC;EAEA,IAAIqB,MAAM,GAAG,IAAIC,wBAAJ,CAAgC,EAAhC,CAAb;;EACA,KAAK,MAAMV,QAAX,IAAuBF,aAAvB,EAAsC;IACpC,IAAIiB,KAAK,GAAG,IAAIL,wBAAJ,CAAmBoB,SAAS,CAACG,kBAAV,CAA6BjC,QAA7B,CAAnB,CAAZ;IACAe,KAAK,GAAGiB,iBAAiB,CAAC5C,OAAD,EAAU2B,KAAV,CAAzB;;IAEA,IAAID,YAAY,CAAC1B,OAAD,CAAhB,EAA2B;MACzB2B,KAAK,GAAGS,iBAAiB,CAACpC,OAAD,EAAU2B,KAAV,CAAzB;MACAN,MAAM,GAAGA,MAAM,CAACW,WAAP,CACPL,KADO,EAEPM,wBAAwB,CAACjC,OAAO,CAACkB,UAAT,CAFjB,CAAT;IAID,CAND,MAMO;MACLG,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAcH,KAAd,CAAT;IACD;EACF;;EACD,MAAM;IAAEvB,KAAF;IAASE,IAAI,GAAG;EAAhB,IAAsBN,OAA5B;;EAEA,IAAII,KAAK,IAAIE,IAAb,EAAmB;IACjBe,MAAM,GAAGA,MAAM,CAACiB,KAAP,CAAahC,IAAb,EAAmBF,KAAK,GAAGE,IAAI,GAAGF,KAAV,GAAkBC,SAA1C,CAAT;EACD;;EACD,OAAOgB,MAAP;AACD;;AAED,SAASQ,WAAT,CACE7B,OADF,EAEEwB,aAFF,EAG4D;EAC1D,MAAM;IAAET,OAAF;IAAWkC,WAAX;IAAwBrB;EAAxB,IAAqC,IAAAsB,kCAAA,EAAiB,EAC1D,GAAGlD,OADuD;IAE1DwB,aAF0D;IAG1D2B,OAAO,EAAEC,KAAK,CAACC,IAAN,CAAWrD,OAAO,CAACkB,UAAR,CAAmBoC,MAAnB,EAAX,EAAwC,CAAxC,MAA+C,CAAC;EAHC,CAAjB,CAA3C;EAKA,MAAM3B,KAAK,GAAGZ,OAAO,CAClBJ,GADW,CACP,CAAC;IAAE4C;EAAF,CAAD,KAAevD,OAAO,CAAC0C,SAAR,CAAkBc,OAAlB,CAA0BD,KAA1B,CADR,EAEXE,MAFW,CAEJC,OAFI,CAAd;EAIA,OAAO;IACL/B,KAAK,EAAEiB,iBAAiB,CACtB5C,OADsB,EAEtB2B,KAFsB,EAGtBsB,WAHsB,CADnB;IAMLrB;EANK,CAAP;AAQD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASgB,iBAAT,CACE5C,OADF,EAEE2D,kBAFF,EAGEV,WAAyB,GAAG,IAAIW,GAAJ,EAH9B,EAI+B;EAC7B,MAAM;IAAEC;EAAF,IAAgB7D,OAAtB;;EACA,IAAI8D,eAAe,CAACD,SAAD,EAAYZ,WAAZ,CAAnB,EAA6C;IAC3C,OAAOU,kBAAP;EACD,CAJ4B,CAK7B;;;EACA,MAAMI,aAAa,GAAGC,YAAA,CAAMC,QAAN,GAAiBC,kBAAvC;;EAEA,MAAMC,cAAmD,GAAGN,SAAS,CAClEJ,MADyD,CAClDW,CAAC,IAAI,CAACnB,WAAW,CAACoB,GAAZ,CAAgBD,CAAhB,CAD4C,EAEzDzD,GAFyD,CAErDyD,CAAC,IAAI,CAAC,IAAAE,2BAAA,EAAqBF,CAArB,CAAD,EAA0B,IAAAG,yBAAA,EAAmBH,CAAnB,CAA1B,CAFgD,CAA5D;EAIA,OAAOT,kBAAkB,CAACF,MAAnB,CAA0Be,IAAI,IAAI;IAAA;;IACvC,MAAMC,cAAc,GAAGV,aAAH,aAAGA,aAAH,6CAAGA,aAAa,CAAEW,GAAf,CAAmBF,IAAI,CAACG,QAAL,CAAcC,IAAjC,CAAH,uDAAG,mBAAwCF,GAAxC,CAA4CF,IAAI,CAACK,EAAjD,CAAvB;;IAEA,KAAK,MAAM,CAACC,WAAD,EAAcrB,MAAd,CAAX,IAAoCU,cAApC,EAAoD;MAClD,MAAMY,GAAG,GAAG,IAAAC,yBAAA,EAAkBF,WAAlB,EAA+BN,IAA/B,EAAqCC,cAArC,CAAZ;MACA,MAAMlB,KAAK,GAAGH,KAAK,CAAC6B,OAAN,CAAcF,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAAzC;;MACA,IAAIxB,KAAK,CAAC2B,IAAN,CAAWC,CAAC,IAAI,CAAC,IAAAC,qBAAA,EAAc3B,MAAd,EAAsB0B,CAAtB,CAAjB,CAAJ,EAAgD;QAC9C;QACA,OAAO,KAAP;MACD;IACF;;IACD,OAAO,IAAP;EACD,CAZM,CAAP;AAaD;;AAED,SAAS/C,iBAAT,CACEpC,OADF,EAEE2B,KAFF,EAG+B;EAC7B;EACA;EACA,OAAO,IAAIL,wBAAJ,CAAmB,MAAM;IAC9B,MAAM+D,GAAG,GAAGjC,KAAK,CAACC,IAAN,CAAW1B,KAAX,CAAZ;IACA0D,GAAG,CAACC,IAAJ,CAASrD,wBAAwB,CAACjC,OAAO,CAACkB,UAAT,CAAjC;IACA,OAAOmE,GAAP;EACD,CAJM,CAAP;AAKD;;AAED,SAASpF,kBAAT,CAA4BF,IAA5B,EAAkE;EAChE,MAAM;IAAEwF,SAAS,EAAE;MAAE9B,MAAF;MAAU6B,IAAV;MAAgBlF,KAAhB;MAAuBE,IAAI,GAAG;IAA9B,IAAoC,EAAjD;IAAqDkF;EAArD,IAAmEzF,IAAzE;EAEA,OAAO;IACL2C,SAAS,EAAE3C,IAAI,CAAC2C,SADX;IAEL+C,SAAS,EAAE1F,IAAI,CAAC0F,SAFX;IAGL/E,aAAa,EAAEX,IAAI,CAACW,aAHf;IAILmD,SAAS,EAAE,IAAA6B,gCAAA,EAA0B,IAAAC,uBAAA,EAAiBlC,MAAjB,CAA1B,CAJN;IAKLvC,UAAU,EAAE,IAAI0E,GAAJ,CACVN,IADU,aACVA,IADU,uBACVA,IAAI,CAAEO,MAAN,CAAalF,GAAb,CAAiB,CAACmF,KAAD,EAAQC,CAAR,KAAc,CAACD,KAAD,EAAQ,IAAAE,cAAA,EAAOV,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEW,KAAN,CAAYF,CAAZ,CAAP,IAAyB,CAAC,CAA1B,GAA8B,CAAtC,CAA/B,CADU,CALP;IAQLjF,oBAAoB,EAAE,IAAI8E,GAAJ,CAAQ,IAAAM,0BAAA,EAAa;MAAEzC,MAAF;MAAU6B;IAAV,CAAb,CAAR,CARjB;IASLlF,KAAK,EAAEoF,SAAS,GAAG,CAAH,GAAOpF,KATlB;IAULE;EAVK,CAAP;AAYD;;AAED,SAASC,WAAT,CAAqBP,OAArB,EAAsD;EACpD,OAAOA,OAAO,CAACc,oBAAR,CAA6BqF,IAA7B,GAAoC,CAA3C;AACD;;AAED,SAAS1D,cAAT,CAAwBzC,OAAxB,EAAyD;EACvD,OAAOA,OAAO,CAAC6D,SAAR,CAAkBzC,MAAlB,GAA2B,CAAlC;AACD;;AAED,SAASM,YAAT,CAAsB1B,OAAtB,EAAuD;EACrD,OAAOA,OAAO,CAACkB,UAAR,CAAmBiF,IAAnB,GAA0B,CAAjC;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASpE,qBAAT,CACEqE,KADF,EAEElF,UAFF,EAGW;EACT,MAAMmF,cAAc,GAAG,IAAIT,GAAJ,CAAQQ,KAAK,CAACE,SAAd,CAAvB;;EACA,KAAK,MAAM,CAACR,KAAD,EAAQS,SAAR,CAAX,IAAiCrF,UAAjC,EAA6C;IAC3C,IAAImF,cAAc,CAAC3B,GAAf,CAAmBoB,KAAnB,MAA8BS,SAAlC,EAA6C;MAC3C,OAAO,KAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD;;AAED,SAASzC,eAAT,CACED,SADF,EAEEZ,WAFF,EAGW;EACT,OAAOY,SAAS,CAACzC,MAAV,KAAqB6B,WAAW,CAACkD,IAAxC;AACD;;AAED,SAASlE,wBAAT,CAAkCf,UAAlC,EAA4E;EAC1E,MAAMgD,kBAAkB,GAAGF,YAAA,CAAMC,QAAN,GAAiBC,kBAA5C;;EAEA,OAAO,SAASsC,cAAT,CAAwBC,CAAxB,EAAwCC,CAAxC,EAAgE;IAAA;;IACrE,MAAMC,eAAe,GAAGzC,kBAAH,aAAGA,kBAAH,gDAAGA,kBAAkB,CAAEQ,GAApB,CAAwB+B,CAAC,CAAC9B,QAAF,CAAWC,IAAnC,CAAH,0DAAG,sBAA0CF,GAA1C,CAA8C+B,CAAC,CAAC5B,EAAhD,CAAxB;IACA,MAAM+B,eAAe,GAAG1C,kBAAH,aAAGA,kBAAH,iDAAGA,kBAAkB,CAAEQ,GAApB,CAAwBgC,CAAC,CAAC/B,QAAF,CAAWC,IAAnC,CAAH,2DAAG,uBAA0CF,GAA1C,CAA8CgC,CAAC,CAAC7B,EAAhD,CAAxB;;IAEA,KAAK,MAAM,CAACiB,KAAD,EAAQe,SAAR,CAAX,IAAiC3F,UAAjC,EAA6C;MAC3C,MAAM4F,MAAW,GAAG,IAAA9B,yBAAA,EAAkBc,KAAlB,EAAyBW,CAAzB,EAA4BE,eAA5B,CAApB;MACA,MAAMI,MAAW,GAAG,IAAA/B,yBAAA,EAAkBc,KAAlB,EAAyBY,CAAzB,EAA4BE,eAA5B,CAApB;;MAEA,IAAIE,MAAM,GAAGC,MAAb,EAAqB;QACnB,OAAOF,SAAS,KAAK,CAAd,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;MACD,CAFD,MAEO,IAAIC,MAAM,GAAGC,MAAb,EAAqB;QAC1B,OAAOF,SAAS,KAAK,CAAd,GAAkB,CAAC,CAAnB,GAAuB,CAA9B;MACD;IACF;;IACD,OAAO,CAAP;EACD,CAfD;AAgBD;;AAEM,SAASG,kBAAT,CAA4BC,YAA5B,EAAkD;EACvD,OAAO,UAAUR,CAAV,EAA0BC,CAA1B,EAAkD;IACvD,MAAMQ,OAAO,GAAGT,CAAC,CAACU,GAAF,CAAM7E,KAAN,CAAY2E,YAAZ,CAAhB;IACA,MAAMG,OAAO,GAAGV,CAAC,CAACS,GAAF,CAAM7E,KAAN,CAAY2E,YAAZ,CAAhB,CAFuD,CAGvD;;IACA,OAAO,IAAAI,kBAAA,EAAWH,OAAX,EAAoBE,OAApB,CAAP;EACD,CALD;AAMD"}