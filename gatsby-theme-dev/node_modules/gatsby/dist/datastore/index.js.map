{"version":3,"file":"index.js","names":["getNodes","getDataStore","getNode","id","getNodesByType","type","getTypes"],"sources":["../../src/datastore/index.ts"],"sourcesContent":["import { IGatsbyNode } from \"../redux/types\"\nimport { getDataStore } from \"./datastore\"\n\nexport { getDataStore, isLmdbStore, detectLmdbStore } from \"./datastore\"\n\n// Convenience accessor methods\n\n/**\n * Get all nodes from datastore.\n * @deprecated\n */\nexport const getNodes = (): Array<IGatsbyNode> => getDataStore().getNodes()\n\n/**\n * Get node by id from datastore.\n */\nexport const getNode = (id: string): IGatsbyNode | undefined =>\n  getDataStore().getNode(id)\n\n/**\n * Get all nodes of type from datastore.\n * @deprecated\n */\nexport const getNodesByType = (type: string): Array<IGatsbyNode> =>\n  getDataStore().getNodesByType(type)\n\n/**\n * Get all type names from datastore.\n */\nexport const getTypes = (): Array<string> => getDataStore().getTypes()\n"],"mappings":";;;;;AACA;;;;;;AAIA;;AAEA;AACA;AACA;AACA;AACO,MAAMA,QAAQ,GAAG,MAA0B,IAAAC,uBAAA,IAAeD,QAAf,EAA3C;AAEP;AACA;AACA;;;;;AACO,MAAME,OAAO,GAAIC,EAAD,IACrB,IAAAF,uBAAA,IAAeC,OAAf,CAAuBC,EAAvB,CADK;AAGP;AACA;AACA;AACA;;;;;AACO,MAAMC,cAAc,GAAIC,IAAD,IAC5B,IAAAJ,uBAAA,IAAeG,cAAf,CAA8BC,IAA9B,CADK;AAGP;AACA;AACA;;;;;AACO,MAAMC,QAAQ,GAAG,MAAqB,IAAAL,uBAAA,IAAeK,QAAf,EAAtC"}