{"version":3,"file":"index.js","names":["RECOMPILE_PANIC_LIMIT","getGraphqlTypegenConfig","ctx","store","getState","config","graphqlTypegen","developConfig","id","initial","on","ADD_NODE_MUTATION","actions","SOURCE_FILE_CHANGED","WEBHOOK_RECEIVED","target","QUERY_RUN_REQUESTED","SET_SCHEMA","cond","shouldRunInitialTypegen","SET_GRAPHQL_DEFINITIONS","states","initializing","undefined","invoke","src","onDone","onError","initializingData","data","parentSpan","webhookBody","program","reporter","shouldRunCreatePagesStatefully","deferNodeMutation","runningPostBootstrap","runningQueries","forwardTo","gatsbyNodeGraphQLFunction","graphqlRunner","websocketManager","pendingQueryRuns","nodesMutatedDuringQueryRun","nodesMutatedDuringQueryRunRecompileCount","compiler","sourceFilesDirty","exit","assign","recompiling","entry","startingDevServers","initialGraphQLTypegen","waiting","always","size","EXTRACT_QUERIES_NOW","nodeMutationBatch","runningBatch","reloadingData","webhookSourcePluginName","refresh","recreatingPages","developMachine","createMachine","services","developServices","buildActions"],"sources":["../../../src/state-machines/develop/index.ts"],"sourcesContent":["import {\n  MachineConfig,\n  AnyEventObject,\n  forwardTo,\n  createMachine,\n  assign,\n} from \"xstate\"\nimport { IDataLayerContext } from \"../data-layer/types\"\nimport { IQueryRunningContext } from \"../query-running/types\"\nimport { IWaitingContext } from \"../waiting/types\"\nimport { buildActions } from \"./actions\"\nimport { developServices } from \"./services\"\nimport { IBuildContext } from \"../../services\"\n\nconst RECOMPILE_PANIC_LIMIT = 6\n\nconst getGraphqlTypegenConfig = (ctx: IBuildContext): boolean =>\n  !!ctx.store!.getState().config.graphqlTypegen\n\n/**\n * This is the top-level state machine for the `gatsby develop` command\n */\nconst developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n  id: `build`,\n  initial: `initializing`,\n  // These are mutation events, sent to this machine by the mutation listener\n  // in `services/listen-for-mutations.ts`\n  on: {\n    // These are deferred node mutations, mainly `createNode`\n    ADD_NODE_MUTATION: {\n      actions: `addNodeMutation`,\n    },\n    // Sent when webpack or chokidar sees a changed file\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    // These are calls to the refresh endpoint. Also used by Gatsby Preview.\n    // Saves the webhook body from the event into context, then reloads data\n    WEBHOOK_RECEIVED: {\n      target: `reloadingData`,\n      actions: `assignWebhookBody`,\n    },\n    QUERY_RUN_REQUESTED: {\n      actions: `trackRequestedQueryRun`,\n    },\n    SET_SCHEMA: {\n      actions: `schemaTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        getGraphqlTypegenConfig(ctx) && !ctx.shouldRunInitialTypegen,\n    },\n    SET_GRAPHQL_DEFINITIONS: {\n      actions: `definitionsTypegen`,\n      cond: (ctx: IBuildContext): boolean =>\n        getGraphqlTypegenConfig(ctx) && !ctx.shouldRunInitialTypegen,\n    },\n  },\n  states: {\n    // Here we handle the initial bootstrap\n    initializing: {\n      on: {\n        // Ignore mutation events because we'll be running everything anyway\n        ADD_NODE_MUTATION: undefined,\n        SOURCE_FILE_CHANGED: undefined,\n        WEBHOOK_RECEIVED: undefined,\n      },\n      invoke: {\n        id: `initialize`,\n        src: `initialize`,\n        onDone: {\n          target: `initializingData`,\n          actions: [`assignStoreAndWorkerPool`, `spawnMutationListener`],\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Sourcing nodes, customising and inferring schema, then running createPages\n    initializingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `initialize-data`,\n        src: `initializeData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            shouldRunCreatePagesStatefully: true,\n            deferNodeMutation: true,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningPostBootstrap`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    runningPostBootstrap: {\n      invoke: {\n        id: `post-bootstrap`,\n        src: `postBootstrap`,\n        onDone: `runningQueries`,\n      },\n    },\n    // Running page and static queries and generating the SSRed HTML and page data\n    runningQueries: {\n      on: {\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`run-queries`), `markSourceFilesDirty`],\n        },\n        ADD_NODE_MUTATION: {\n          actions: [`markNodesDirty`, `callApi`],\n        },\n        QUERY_RUN_REQUESTED: {\n          actions: forwardTo(`run-queries`),\n        },\n      },\n      invoke: {\n        id: `run-queries`,\n        src: `runQueries`,\n        // This is all the data that we're sending to the child machine\n        data: ({\n          program,\n          store,\n          parentSpan,\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          websocketManager,\n          pendingQueryRuns,\n          reporter,\n        }: IBuildContext): IQueryRunningContext => {\n          return {\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            websocketManager,\n            pendingQueryRuns,\n            reporter,\n          }\n        },\n        onDone: [\n          {\n            // If we're at the recompile limit and nodes were mutated again then panic\n            target: `waiting`,\n            actions: `panicBecauseOfInfiniteLoop`,\n            cond: ({\n              nodesMutatedDuringQueryRun = false,\n              nodesMutatedDuringQueryRunRecompileCount = 0,\n            }: IBuildContext): boolean =>\n              nodesMutatedDuringQueryRun &&\n              nodesMutatedDuringQueryRunRecompileCount >= RECOMPILE_PANIC_LIMIT,\n          },\n          {\n            // Nodes were mutated while querying, so we need to re-run everything\n            target: `recreatingPages`,\n            cond: ({ nodesMutatedDuringQueryRun }: IBuildContext): boolean =>\n              !!nodesMutatedDuringQueryRun,\n            actions: [\n              `markNodesClean`,\n              `incrementRecompileCount`,\n              `clearPendingQueryRuns`,\n            ],\n          },\n          {\n            // If we have no compiler (i.e. it's first run), then spin up the\n            // webpack and socket.io servers\n            target: `startingDevServers`,\n            actions: [`setQueryRunningFinished`, `clearPendingQueryRuns`],\n            cond: ({ compiler }: IBuildContext): boolean => !compiler,\n          },\n          {\n            // If source files have changed, then recompile the JS bundle\n            target: `recompiling`,\n            cond: ({ sourceFilesDirty }: IBuildContext): boolean =>\n              !!sourceFilesDirty,\n            actions: [`clearPendingQueryRuns`],\n          },\n          {\n            // ...otherwise just wait.\n            target: `waiting`,\n            actions: [`clearPendingQueryRuns`],\n          },\n        ],\n        onError: {\n          actions: [`logError`, `clearPendingQueryRuns`],\n          target: `waiting`,\n        },\n      },\n      exit: assign<IBuildContext>({ shouldRunInitialTypegen: false }),\n    },\n    // Recompile the JS bundle\n    recompiling: {\n      // Important: mark source files as clean when recompiling starts\n      // Doing this `onDone` will wipe all file change events that occur **during** recompilation\n      // See https://github.com/gatsbyjs/gatsby/issues/27609\n      entry: [`setRecompiledFiles`, `markSourceFilesClean`],\n      invoke: {\n        src: `recompile`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Spin up webpack and socket.io\n    startingDevServers: {\n      invoke: {\n        src: `startWebpackServer`,\n        onDone: [\n          {\n            target: `initialGraphQLTypegen`,\n            cond: (ctx: IBuildContext): boolean => getGraphqlTypegenConfig(ctx),\n          },\n          {\n            target: `waiting`,\n          },\n        ],\n        onError: {\n          actions: `panic`,\n          target: `waiting`,\n        },\n      },\n      exit: [`assignServers`, `spawnWebpackListener`, `markSourceFilesClean`],\n    },\n    initialGraphQLTypegen: {\n      invoke: {\n        src: `graphQLTypegen`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Idle, waiting for events that make us rebuild\n    waiting: {\n      always: [\n        {\n          target: `runningQueries`,\n          cond: ({ pendingQueryRuns }: IBuildContext): boolean =>\n            !!pendingQueryRuns && pendingQueryRuns.size > 0,\n        },\n      ],\n      entry: [`saveDbState`, `resetRecompileCount`],\n      on: {\n        // Forward these events to the child machine, so it can handle batching\n        ADD_NODE_MUTATION: {\n          actions: forwardTo(`waiting`),\n        },\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`waiting`), `markSourceFilesDirty`],\n        },\n        // This event is sent from the child\n        EXTRACT_QUERIES_NOW: {\n          target: `runningQueries`,\n        },\n      },\n      invoke: {\n        id: `waiting`,\n        src: `waitForMutations`,\n        // Send existing queued mutations to the child machine, which will execute them\n        data: ({\n          store,\n          nodeMutationBatch = [],\n          sourceFilesDirty,\n        }: IBuildContext): IWaitingContext => {\n          return {\n            store,\n            nodeMutationBatch,\n            sourceFilesDirty,\n            runningBatch: [],\n          }\n        },\n        // \"done\" means we need to rebuild\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `recreatingPages`,\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Almost the same as initializing data, but skips various first-run stuff\n    reloadingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        src: `reloadData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          webhookSourcePluginName,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            webhookSourcePluginName,\n            refresh: true,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            program,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Rebuild pages if a node has been mutated outside of sourceNodes\n    recreatingPages: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `recreate-pages`,\n        src: `recreatePages`,\n        data: ({\n          parentSpan,\n          store,\n          program,\n          reporter,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            program,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n            reporter,\n          }\n        },\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n  },\n}\n\nexport const developMachine = createMachine(developConfig, {\n  services: developServices,\n  actions: buildActions,\n})\n"],"mappings":";;;;;AAAA;;AAUA;;AACA;;AAGA,MAAMA,qBAAqB,GAAG,CAA9B;;AAEA,MAAMC,uBAAuB,GAAIC,GAAD,IAC9B,CAAC,CAACA,GAAG,CAACC,KAAJ,CAAWC,QAAX,GAAsBC,MAAtB,CAA6BC,cADjC;AAGA;AACA;AACA;;;AACA,MAAMC,aAAgE,GAAG;EACvEC,EAAE,EAAG,OADkE;EAEvEC,OAAO,EAAG,cAF6D;EAGvE;EACA;EACAC,EAAE,EAAE;IACF;IACAC,iBAAiB,EAAE;MACjBC,OAAO,EAAG;IADO,CAFjB;IAKF;IACAC,mBAAmB,EAAE;MACnBD,OAAO,EAAG;IADS,CANnB;IASF;IACA;IACAE,gBAAgB,EAAE;MAChBC,MAAM,EAAG,eADO;MAEhBH,OAAO,EAAG;IAFM,CAXhB;IAeFI,mBAAmB,EAAE;MACnBJ,OAAO,EAAG;IADS,CAfnB;IAkBFK,UAAU,EAAE;MACVL,OAAO,EAAG,eADA;MAEVM,IAAI,EAAGhB,GAAD,IACJD,uBAAuB,CAACC,GAAD,CAAvB,IAAgC,CAACA,GAAG,CAACiB;IAH7B,CAlBV;IAuBFC,uBAAuB,EAAE;MACvBR,OAAO,EAAG,oBADa;MAEvBM,IAAI,EAAGhB,GAAD,IACJD,uBAAuB,CAACC,GAAD,CAAvB,IAAgC,CAACA,GAAG,CAACiB;IAHhB;EAvBvB,CALmE;EAkCvEE,MAAM,EAAE;IACN;IACAC,YAAY,EAAE;MACZZ,EAAE,EAAE;QACF;QACAC,iBAAiB,EAAEY,SAFjB;QAGFV,mBAAmB,EAAEU,SAHnB;QAIFT,gBAAgB,EAAES;MAJhB,CADQ;MAOZC,MAAM,EAAE;QACNhB,EAAE,EAAG,YADC;QAENiB,GAAG,EAAG,YAFA;QAGNC,MAAM,EAAE;UACNX,MAAM,EAAG,kBADH;UAENH,OAAO,EAAE,CAAE,0BAAF,EAA8B,uBAA9B;QAFH,CAHF;QAONe,OAAO,EAAE;UACPf,OAAO,EAAG;QADH;MAPH;IAPI,CAFR;IAqBN;IACAgB,gBAAgB,EAAE;MAChBlB,EAAE,EAAE;QACF;QACAC,iBAAiB,EAAE;UACjBC,OAAO,EAAG;QADO;MAFjB,CADY;MAOhBY,MAAM,EAAE;QACNhB,EAAE,EAAG,iBADC;QAENiB,GAAG,EAAG,gBAFA;QAGNI,IAAI,EAAE,CAAC;UACLC,UADK;UAEL3B,KAFK;UAGL4B,WAHK;UAILC,OAJK;UAKLC;QALK,CAAD,KAMkC;UACtC,OAAO;YACLH,UADK;YAEL3B,KAFK;YAGL4B,WAHK;YAILG,8BAA8B,EAAE,IAJ3B;YAKLC,iBAAiB,EAAE,IALd;YAMLH,OANK;YAOLC;UAPK,CAAP;QASD,CAnBK;QAoBNP,MAAM,EAAE;UACNd,OAAO,EAAE,CACN,qBADM,EAEN,kBAFM,EAGN,kBAHM,CADH;UAMNG,MAAM,EAAG;QANH,CApBF;QA4BNY,OAAO,EAAE;UACPf,OAAO,EAAG,UADH;UAEPG,MAAM,EAAG;QAFF;MA5BH;IAPQ,CAtBZ;IA+DNqB,oBAAoB,EAAE;MACpBZ,MAAM,EAAE;QACNhB,EAAE,EAAG,gBADC;QAENiB,GAAG,EAAG,eAFA;QAGNC,MAAM,EAAG;MAHH;IADY,CA/DhB;IAsEN;IACAW,cAAc,EAAE;MACd3B,EAAE,EAAE;QACFG,mBAAmB,EAAE;UACnBD,OAAO,EAAE,CAAC,IAAA0B,iBAAA,EAAW,aAAX,CAAD,EAA4B,sBAA5B;QADU,CADnB;QAIF3B,iBAAiB,EAAE;UACjBC,OAAO,EAAE,CAAE,gBAAF,EAAoB,SAApB;QADQ,CAJjB;QAOFI,mBAAmB,EAAE;UACnBJ,OAAO,EAAE,IAAA0B,iBAAA,EAAW,aAAX;QADU;MAPnB,CADU;MAYdd,MAAM,EAAE;QACNhB,EAAE,EAAG,aADC;QAENiB,GAAG,EAAG,YAFA;QAGN;QACAI,IAAI,EAAE,CAAC;UACLG,OADK;UAEL7B,KAFK;UAGL2B,UAHK;UAILS,yBAJK;UAKLC,aALK;UAMLC,gBANK;UAOLC,gBAPK;UAQLT;QARK,CAAD,KASqC;UACzC,OAAO;YACLD,OADK;YAEL7B,KAFK;YAGL2B,UAHK;YAILS,yBAJK;YAKLC,aALK;YAMLC,gBANK;YAOLC,gBAPK;YAQLT;UARK,CAAP;QAUD,CAxBK;QAyBNP,MAAM,EAAE,CACN;UACE;UACAX,MAAM,EAAG,SAFX;UAGEH,OAAO,EAAG,4BAHZ;UAIEM,IAAI,EAAE,CAAC;YACLyB,0BAA0B,GAAG,KADxB;YAELC,wCAAwC,GAAG;UAFtC,CAAD,KAIJD,0BAA0B,IAC1BC,wCAAwC,IAAI5C;QAThD,CADM,EAYN;UACE;UACAe,MAAM,EAAG,iBAFX;UAGEG,IAAI,EAAE,CAAC;YAAEyB;UAAF,CAAD,KACJ,CAAC,CAACA,0BAJN;UAKE/B,OAAO,EAAE,CACN,gBADM,EAEN,yBAFM,EAGN,uBAHM;QALX,CAZM,EAuBN;UACE;UACA;UACAG,MAAM,EAAG,oBAHX;UAIEH,OAAO,EAAE,CAAE,yBAAF,EAA6B,uBAA7B,CAJX;UAKEM,IAAI,EAAE,CAAC;YAAE2B;UAAF,CAAD,KAA0C,CAACA;QALnD,CAvBM,EA8BN;UACE;UACA9B,MAAM,EAAG,aAFX;UAGEG,IAAI,EAAE,CAAC;YAAE4B;UAAF,CAAD,KACJ,CAAC,CAACA,gBAJN;UAKElC,OAAO,EAAE,CAAE,uBAAF;QALX,CA9BM,EAqCN;UACE;UACAG,MAAM,EAAG,SAFX;UAGEH,OAAO,EAAE,CAAE,uBAAF;QAHX,CArCM,CAzBF;QAoENe,OAAO,EAAE;UACPf,OAAO,EAAE,CAAE,UAAF,EAAc,uBAAd,CADF;UAEPG,MAAM,EAAG;QAFF;MApEH,CAZM;MAqFdgC,IAAI,EAAE,IAAAC,cAAA,EAAsB;QAAE7B,uBAAuB,EAAE;MAA3B,CAAtB;IArFQ,CAvEV;IA8JN;IACA8B,WAAW,EAAE;MACX;MACA;MACA;MACAC,KAAK,EAAE,CAAE,oBAAF,EAAwB,sBAAxB,CAJI;MAKX1B,MAAM,EAAE;QACNC,GAAG,EAAG,WADA;QAENC,MAAM,EAAE;UACNX,MAAM,EAAG;QADH,CAFF;QAKNY,OAAO,EAAE;UACPf,OAAO,EAAG,UADH;UAEPG,MAAM,EAAG;QAFF;MALH;IALG,CA/JP;IA+KN;IACAoC,kBAAkB,EAAE;MAClB3B,MAAM,EAAE;QACNC,GAAG,EAAG,oBADA;QAENC,MAAM,EAAE,CACN;UACEX,MAAM,EAAG,uBADX;UAEEG,IAAI,EAAGhB,GAAD,IAAiCD,uBAAuB,CAACC,GAAD;QAFhE,CADM,EAKN;UACEa,MAAM,EAAG;QADX,CALM,CAFF;QAWNY,OAAO,EAAE;UACPf,OAAO,EAAG,OADH;UAEPG,MAAM,EAAG;QAFF;MAXH,CADU;MAiBlBgC,IAAI,EAAE,CAAE,eAAF,EAAmB,sBAAnB,EAA2C,sBAA3C;IAjBY,CAhLd;IAmMNK,qBAAqB,EAAE;MACrB5B,MAAM,EAAE;QACNC,GAAG,EAAG,gBADA;QAENC,MAAM,EAAE;UACNX,MAAM,EAAG;QADH,CAFF;QAKNY,OAAO,EAAE;UACPf,OAAO,EAAG,UADH;UAEPG,MAAM,EAAG;QAFF;MALH;IADa,CAnMjB;IA+MN;IACAsC,OAAO,EAAE;MACPC,MAAM,EAAE,CACN;QACEvC,MAAM,EAAG,gBADX;QAEEG,IAAI,EAAE,CAAC;UAAEwB;QAAF,CAAD,KACJ,CAAC,CAACA,gBAAF,IAAsBA,gBAAgB,CAACa,IAAjB,GAAwB;MAHlD,CADM,CADD;MAQPL,KAAK,EAAE,CAAE,aAAF,EAAiB,qBAAjB,CARA;MASPxC,EAAE,EAAE;QACF;QACAC,iBAAiB,EAAE;UACjBC,OAAO,EAAE,IAAA0B,iBAAA,EAAW,SAAX;QADQ,CAFjB;QAKFzB,mBAAmB,EAAE;UACnBD,OAAO,EAAE,CAAC,IAAA0B,iBAAA,EAAW,SAAX,CAAD,EAAwB,sBAAxB;QADU,CALnB;QAQF;QACAkB,mBAAmB,EAAE;UACnBzC,MAAM,EAAG;QADU;MATnB,CATG;MAsBPS,MAAM,EAAE;QACNhB,EAAE,EAAG,SADC;QAENiB,GAAG,EAAG,kBAFA;QAGN;QACAI,IAAI,EAAE,CAAC;UACL1B,KADK;UAELsD,iBAAiB,GAAG,EAFf;UAGLX;QAHK,CAAD,KAIgC;UACpC,OAAO;YACL3C,KADK;YAELsD,iBAFK;YAGLX,gBAHK;YAILY,YAAY,EAAE;UAJT,CAAP;QAMD,CAfK;QAgBN;QACAhC,MAAM,EAAE;UACNd,OAAO,EAAG,qBADJ;UAENG,MAAM,EAAG;QAFH,CAjBF;QAqBNY,OAAO,EAAE;UACPf,OAAO,EAAG;QADH;MArBH;IAtBD,CAhNH;IAgQN;IACA+C,aAAa,EAAE;MACbjD,EAAE,EAAE;QACF;QACAC,iBAAiB,EAAE;UACjBC,OAAO,EAAG;QADO;MAFjB,CADS;MAObY,MAAM,EAAE;QACNC,GAAG,EAAG,YADA;QAENI,IAAI,EAAE,CAAC;UACLC,UADK;UAEL3B,KAFK;UAGL4B,WAHK;UAIL6B,uBAJK;UAKL5B,OALK;UAMLC;QANK,CAAD,KAOkC;UACtC,OAAO;YACLH,UADK;YAEL3B,KAFK;YAGL4B,WAHK;YAIL6B,uBAJK;YAKLC,OAAO,EAAE,IALJ;YAML1B,iBAAiB,EAAE,IANd;YAOLD,8BAA8B,EAAE,KAP3B;YAQLF,OARK;YASLC;UATK,CAAP;QAWD,CArBK;QAsBNP,MAAM,EAAE;UACNd,OAAO,EAAE,CACN,qBADM,EAEN,kBAFM,EAGN,kBAHM,CADH;UAMNG,MAAM,EAAG;QANH,CAtBF;QA8BNY,OAAO,EAAE;UACPf,OAAO,EAAG,UADH;UAEPG,MAAM,EAAG;QAFF;MA9BH;IAPK,CAjQT;IA4SN;IACA+C,eAAe,EAAE;MACfpD,EAAE,EAAE;QACF;QACAC,iBAAiB,EAAE;UACjBC,OAAO,EAAG;QADO;MAFjB,CADW;MAOfY,MAAM,EAAE;QACNhB,EAAE,EAAG,gBADC;QAENiB,GAAG,EAAG,eAFA;QAGNI,IAAI,EAAE,CAAC;UACLC,UADK;UAEL3B,KAFK;UAGL6B,OAHK;UAILC;QAJK,CAAD,KAKkC;UACtC,OAAO;YACLH,UADK;YAEL3B,KAFK;YAGL6B,OAHK;YAILG,iBAAiB,EAAE,IAJd;YAKLD,8BAA8B,EAAE,KAL3B;YAMLD;UANK,CAAP;QAQD,CAjBK;QAkBNP,MAAM,EAAE;UACNd,OAAO,EAAG,qBADJ;UAENG,MAAM,EAAG;QAFH,CAlBF;QAsBNY,OAAO,EAAE;UACPf,OAAO,EAAG,UADH;UAEPG,MAAM,EAAG;QAFF;MAtBH;IAPO;EA7SX;AAlC+D,CAAzE;AAqXO,MAAMgD,cAAc,GAAG,IAAAC,qBAAA,EAAczD,aAAd,EAA6B;EACzD0D,QAAQ,EAAEC,yBAD+C;EAEzDtD,OAAO,EAAEuD;AAFgD,CAA7B,CAAvB"}