{"version":3,"file":"index.js","names":["loadDataStates","customizingSchema","invoke","src","id","onDone","target","sourcingNodes","actions","initialCreatePagesStates","buildingSchema","creatingPages","writingOutRedirects","recreatePagesStates","doneState","done","type","data","gatsbyNodeGraphQLFunction","graphqlRunner","pagesToBuild","pagesToDelete","options","dataLayerActions","services","dataLayerServices","initializeDataMachine","createMachine","context","initial","states","reloadDataMachine","recreatePagesMachine"],"sources":["../../../src/state-machines/data-layer/index.ts"],"sourcesContent":["import { createMachine, StatesConfig, MachineOptions } from \"xstate\"\nimport { dataLayerActions } from \"./actions\"\nimport { IDataLayerContext } from \"./types\"\nimport { dataLayerServices } from \"./services\"\n\nexport type DataLayerResult = Pick<\n  IDataLayerContext,\n  | \"gatsbyNodeGraphQLFunction\"\n  | \"graphqlRunner\"\n  | \"pagesToBuild\"\n  | \"pagesToDelete\"\n>\n\nconst loadDataStates: StatesConfig<IDataLayerContext, any, any> = {\n  customizingSchema: {\n    invoke: {\n      src: `customizeSchema`,\n      id: `customizing-schema`,\n      onDone: {\n        target: `sourcingNodes`,\n      },\n    },\n  },\n  sourcingNodes: {\n    invoke: {\n      src: `sourceNodes`,\n      id: `sourcing-nodes`,\n      onDone: {\n        target: `buildingSchema`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n}\n\nconst initialCreatePagesStates: StatesConfig<IDataLayerContext, any, any> = {\n  buildingSchema: {\n    invoke: {\n      id: `building-schema`,\n      src: `buildSchema`,\n      onDone: {\n        target: `creatingPages`,\n        actions: `assignGraphQLRunners`,\n      },\n    },\n  },\n  creatingPages: {\n    invoke: {\n      id: `creating-pages`,\n      src: `createPages`,\n      onDone: {\n        target: `writingOutRedirects`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n  writingOutRedirects: {\n    invoke: {\n      src: `writeOutRedirectsAndWatch`,\n      onDone: {\n        target: `done`,\n      },\n    },\n  },\n}\n\nconst recreatePagesStates: StatesConfig<IDataLayerContext, any, any> = {\n  buildingSchema: {\n    invoke: {\n      id: `building-schema`,\n      src: `buildSchema`,\n      onDone: {\n        target: `creatingPages`,\n        actions: `assignGraphQLRunners`,\n      },\n    },\n  },\n  creatingPages: {\n    invoke: {\n      id: `creating-pages`,\n      src: `createPages`,\n      onDone: {\n        target: `done`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n}\n\nconst doneState: StatesConfig<IDataLayerContext, any, any> = {\n  done: {\n    type: `final`,\n    data: ({\n      gatsbyNodeGraphQLFunction,\n      graphqlRunner,\n      pagesToBuild,\n      pagesToDelete,\n    }): DataLayerResult => {\n      return {\n        gatsbyNodeGraphQLFunction,\n        graphqlRunner,\n        pagesToBuild,\n        pagesToDelete,\n      }\n    },\n  },\n}\n\nconst options: Partial<MachineOptions<IDataLayerContext, any>> = {\n  actions: dataLayerActions,\n  services: dataLayerServices,\n}\n\n/**\n * Machine used during first run\n */\n\nexport const initializeDataMachine = createMachine(\n  {\n    id: `initializeDataMachine`,\n    context: {},\n    initial: `customizingSchema`,\n    states: {\n      ...loadDataStates,\n      ...initialCreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n\n/**\n * Machine used when we need to source nodes again\n */\n\nexport const reloadDataMachine = createMachine(\n  {\n    id: `reloadDataMachine`,\n    context: {},\n    initial: `customizingSchema`,\n    states: {\n      ...loadDataStates,\n      ...recreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n\n/**\n * Machine used when we need to re-create pages after a\n * node mutation outside of sourceNodes\n */\nexport const recreatePagesMachine = createMachine(\n  {\n    id: `recreatePagesMachine`,\n    context: {},\n    initial: `buildingSchema`,\n    states: {\n      ...recreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n"],"mappings":"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"}