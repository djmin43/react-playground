{"version":3,"file":"static-query-utils.js","names":["join","path","posix","outputDir","process","cwd","getStaticQueryPath","hash","getStaticQueryResult","staticQueryPath","absoluteStaticQueryPath","staticQueryRaw","fs","readFile","JSON","parse","toString","staticQueryResultCache","Map","inFlightStaticQueryPromise","clearStaticQueryCaches","clear","getStaticQueryContext","staticQueryHashes","staticQueryResultPromises","staticQueryContext","staticQueryHash","memoizedStaticQueryResult","get","getStaticQueryPromise","set","then","delete","push","results","Promise","all","writeStaticQueryContext","templatePath","outputFilePath","stringifiedContext","stringify","outputFile"],"sources":["../../src/utils/static-query-utils.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport * as path from \"path\"\n// we want to force posix-style joins, so Windows doesn't produce backslashes for urls\nconst { join } = path.posix\nimport type { IScriptsAndStyles } from \"./client-assets-for-template\"\nimport { IPageDataWithQueryResult } from \"./page-data\"\n\nconst outputDir = path.join(process.cwd(), `.cache`, `page-ssr`)\n\nexport const getStaticQueryPath = (hash: string): string =>\n  join(`page-data`, `sq`, `d`, `${hash}.json`)\n\nexport const getStaticQueryResult = async (hash: string): Promise<any> => {\n  const staticQueryPath = getStaticQueryPath(hash)\n  const absoluteStaticQueryPath = join(process.cwd(), `public`, staticQueryPath)\n  const staticQueryRaw = await fs.readFile(absoluteStaticQueryPath)\n\n  return JSON.parse(staticQueryRaw.toString())\n}\n\nexport interface IResourcesForTemplate extends IScriptsAndStyles {\n  staticQueryContext: Record<string, { data: unknown }>\n}\n\nconst staticQueryResultCache = new Map<string, any>()\nconst inFlightStaticQueryPromise = new Map<string, Promise<any>>()\n\nexport function clearStaticQueryCaches(): void {\n  staticQueryResultCache.clear()\n  inFlightStaticQueryPromise.clear()\n}\n\nexport const getStaticQueryContext = async (\n  staticQueryHashes: IPageDataWithQueryResult[\"staticQueryHashes\"]\n): Promise<{\n  staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"]\n}> => {\n  const staticQueryResultPromises: Array<Promise<void>> = []\n  const staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"] = {}\n\n  for (const staticQueryHash of staticQueryHashes) {\n    const memoizedStaticQueryResult =\n      staticQueryResultCache.get(staticQueryHash)\n    if (memoizedStaticQueryResult) {\n      staticQueryContext[staticQueryHash] = memoizedStaticQueryResult\n      continue\n    }\n\n    let getStaticQueryPromise = inFlightStaticQueryPromise.get(staticQueryHash)\n    if (!getStaticQueryPromise) {\n      getStaticQueryPromise = getStaticQueryResult(staticQueryHash)\n      inFlightStaticQueryPromise.set(staticQueryHash, getStaticQueryPromise)\n      getStaticQueryPromise.then(() => {\n        inFlightStaticQueryPromise.delete(staticQueryHash)\n      })\n    }\n\n    staticQueryResultPromises.push(\n      getStaticQueryPromise.then(results => {\n        staticQueryContext[staticQueryHash] = results\n      })\n    )\n  }\n\n  await Promise.all(staticQueryResultPromises)\n\n  return { staticQueryContext }\n}\n\nexport const writeStaticQueryContext = async (\n  staticQueryHashes: IPageDataWithQueryResult[\"staticQueryHashes\"],\n  templatePath: string\n): Promise<{\n  staticQueryContext: IResourcesForTemplate[\"staticQueryContext\"]\n}> => {\n  const outputFilePath = path.join(\n    outputDir,\n    `sq-context`,\n    templatePath,\n    `sq-context.json`\n  )\n\n  const { staticQueryContext } = await getStaticQueryContext(staticQueryHashes)\n\n  const stringifiedContext = JSON.stringify(staticQueryContext)\n  await fs.outputFile(outputFilePath, stringifiedContext)\n\n  return { staticQueryContext }\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;AACA;AACA,MAAM;EAAEA;AAAF,IAAWC,IAAI,CAACC,KAAtB;AAIA,MAAMC,SAAS,GAAGF,IAAI,CAACD,IAAL,CAAUI,OAAO,CAACC,GAAR,EAAV,EAA0B,QAA1B,EAAoC,UAApC,CAAlB;;AAEO,MAAMC,kBAAkB,GAAIC,IAAD,IAChCP,IAAI,CAAE,WAAF,EAAe,IAAf,EAAqB,GAArB,EAA0B,GAAEO,IAAK,OAAjC,CADC;;;;AAGA,MAAMC,oBAAoB,GAAG,MAAOD,IAAP,IAAsC;EACxE,MAAME,eAAe,GAAGH,kBAAkB,CAACC,IAAD,CAA1C;EACA,MAAMG,uBAAuB,GAAGV,IAAI,CAACI,OAAO,CAACC,GAAR,EAAD,EAAiB,QAAjB,EAA0BI,eAA1B,CAApC;EACA,MAAME,cAAc,GAAG,MAAMC,gBAAA,CAAGC,QAAH,CAAYH,uBAAZ,CAA7B;EAEA,OAAOI,IAAI,CAACC,KAAL,CAAWJ,cAAc,CAACK,QAAf,EAAX,CAAP;AACD,CANM;;;AAYP,MAAMC,sBAAsB,GAAG,IAAIC,GAAJ,EAA/B;AACA,MAAMC,0BAA0B,GAAG,IAAID,GAAJ,EAAnC;;AAEO,SAASE,sBAAT,GAAwC;EAC7CH,sBAAsB,CAACI,KAAvB;EACAF,0BAA0B,CAACE,KAA3B;AACD;;AAEM,MAAMC,qBAAqB,GAAG,MACnCC,iBADmC,IAI/B;EACJ,MAAMC,yBAA+C,GAAG,EAAxD;EACA,MAAMC,kBAA+D,GAAG,EAAxE;;EAEA,KAAK,MAAMC,eAAX,IAA8BH,iBAA9B,EAAiD;IAC/C,MAAMI,yBAAyB,GAC7BV,sBAAsB,CAACW,GAAvB,CAA2BF,eAA3B,CADF;;IAEA,IAAIC,yBAAJ,EAA+B;MAC7BF,kBAAkB,CAACC,eAAD,CAAlB,GAAsCC,yBAAtC;MACA;IACD;;IAED,IAAIE,qBAAqB,GAAGV,0BAA0B,CAACS,GAA3B,CAA+BF,eAA/B,CAA5B;;IACA,IAAI,CAACG,qBAAL,EAA4B;MAC1BA,qBAAqB,GAAGrB,oBAAoB,CAACkB,eAAD,CAA5C;MACAP,0BAA0B,CAACW,GAA3B,CAA+BJ,eAA/B,EAAgDG,qBAAhD;MACAA,qBAAqB,CAACE,IAAtB,CAA2B,MAAM;QAC/BZ,0BAA0B,CAACa,MAA3B,CAAkCN,eAAlC;MACD,CAFD;IAGD;;IAEDF,yBAAyB,CAACS,IAA1B,CACEJ,qBAAqB,CAACE,IAAtB,CAA2BG,OAAO,IAAI;MACpCT,kBAAkB,CAACC,eAAD,CAAlB,GAAsCQ,OAAtC;IACD,CAFD,CADF;EAKD;;EAED,MAAMC,OAAO,CAACC,GAAR,CAAYZ,yBAAZ,CAAN;EAEA,OAAO;IAAEC;EAAF,CAAP;AACD,CAnCM;;;;AAqCA,MAAMY,uBAAuB,GAAG,OACrCd,iBADqC,EAErCe,YAFqC,KAKjC;EACJ,MAAMC,cAAc,GAAGtC,IAAI,CAACD,IAAL,CACrBG,SADqB,EAEpB,YAFoB,EAGrBmC,YAHqB,EAIpB,iBAJoB,CAAvB;EAOA,MAAM;IAAEb;EAAF,IAAyB,MAAMH,qBAAqB,CAACC,iBAAD,CAA1D;EAEA,MAAMiB,kBAAkB,GAAG1B,IAAI,CAAC2B,SAAL,CAAehB,kBAAf,CAA3B;EACA,MAAMb,gBAAA,CAAG8B,UAAH,CAAcH,cAAd,EAA8BC,kBAA9B,CAAN;EAEA,OAAO;IAAEf;EAAF,CAAP;AACD,CAnBM"}