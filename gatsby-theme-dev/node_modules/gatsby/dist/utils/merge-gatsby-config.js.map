{"version":3,"file":"merge-gatsby-config.js","names":["normalizePluginEntry","entry","resolve","options","howToMerge","byDefault","a","b","siteMetadata","objA","objB","plugins","concat","mapping","mergeGatsbyConfig","allGatsbyConfigKeysWithAValue","Object","keys","mergedConfig","reduce","config","gatsbyConfigKey","mergeFn"],"sources":["../../src/utils/merge-gatsby-config.ts"],"sourcesContent":["import _ from \"lodash\"\nimport { Express } from \"express\"\nimport type { TrailingSlash } from \"gatsby-page-utils\"\n// TODO export it in index.d.ts\ntype PluginEntry =\n  | string\n  | {\n      resolve: string\n      options?: Record<string, unknown>\n    }\n\ninterface INormalizedPluginEntry {\n  resolve: string\n  options: Record<string, unknown>\n}\n\ninterface IGatsbyConfigInput {\n  siteMetadata?: Record<string, unknown>\n  plugins?: Array<PluginEntry>\n  pathPrefix?: string\n  assetPrefix?: string\n  polyfill?: boolean\n  mapping?: Record<string, string>\n  proxy?: {\n    prefix: string\n    url: string\n  }\n  developMiddleware?(app: Express): void\n  jsxRuntime?: \"classic\" | \"automatic\"\n  jsxImportSource?: string\n  trailingSlash?: TrailingSlash\n}\n\ntype ConfigKey = keyof IGatsbyConfigInput\ntype Metadata = IGatsbyConfigInput[\"siteMetadata\"]\ntype Mapping = IGatsbyConfigInput[\"mapping\"]\n\n/**\n * Normalize plugin spec before comparing so\n *  - `gatsby-plugin-name`\n *  - { resolve: `gatsby-plugin-name` }\n *  - { resolve: `gatsby-plugin-name`, options: {} }\n * are all considered equal\n */\nconst normalizePluginEntry = (entry: PluginEntry): INormalizedPluginEntry =>\n  _.isString(entry)\n    ? {\n        resolve: entry,\n        options: {},\n      }\n    : _.isObject(entry)\n    ? { options: {}, ...entry }\n    : entry\n\nconst howToMerge = {\n  /**\n   * pick a truthy value by default.\n   * This makes sure that if a single value is defined, that one it used.\n   * We prefer the \"right\" value, because the user's config will be \"on the right\"\n   */\n  byDefault: (a: ConfigKey, b: ConfigKey): ConfigKey => b || a,\n  siteMetadata: (objA: Metadata, objB: Metadata): Metadata =>\n    _.merge({}, objA, objB),\n  // plugins are concatenated and uniq'd, so we don't get two of the same plugin value\n  plugins: (\n    a: Array<PluginEntry> = [],\n    b: Array<PluginEntry> = []\n  ): Array<PluginEntry> =>\n    _.uniqWith(a.concat(b), (a, b) =>\n      _.isEqual(\n        _.pick(normalizePluginEntry(a), [`resolve`, `options`]),\n        _.pick(normalizePluginEntry(b), [`resolve`, `options`])\n      )\n    ),\n  mapping: (objA: Mapping, objB: Mapping): Mapping => _.merge({}, objA, objB),\n} as const\n\n/**\n * Defines how a theme object is merged with the user's config\n */\nexport const mergeGatsbyConfig = (\n  a: IGatsbyConfigInput,\n  b: IGatsbyConfigInput\n): IGatsbyConfigInput => {\n  // a and b are gatsby configs, If they have keys, that means there are values to merge\n  const allGatsbyConfigKeysWithAValue = _.uniq(\n    Object.keys(a).concat(Object.keys(b))\n  ) as Array<ConfigKey>\n\n  // reduce the array of mergable keys into a single gatsby config object\n  const mergedConfig = allGatsbyConfigKeysWithAValue.reduce(\n    (config, gatsbyConfigKey) => {\n      // choose a merge function for the config key if there's one defined,\n      // otherwise use the default value merge function\n      const mergeFn = howToMerge[gatsbyConfigKey] || howToMerge.byDefault\n      return {\n        ...config,\n        [gatsbyConfigKey]: mergeFn(a[gatsbyConfigKey], b[gatsbyConfigKey]),\n      }\n    },\n    {} as IGatsbyConfigInput\n  )\n\n  // return the fully merged config\n  return mergedConfig\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,oBAAoB,GAAIC,KAAD,IAC3B,wBAAWA,KAAX,IACI;EACEC,OAAO,EAAED,KADX;EAEEE,OAAO,EAAE;AAFX,CADJ,GAKI,wBAAWF,KAAX,IACA;EAAEE,OAAO,EAAE,EAAX;EAAe,GAAGF;AAAlB,CADA,GAEAA,KARN;;AAUA,MAAMG,UAAU,GAAG;EACjB;AACF;AACA;AACA;AACA;EACEC,SAAS,EAAE,CAACC,CAAD,EAAeC,CAAf,KAA2CA,CAAC,IAAID,CAN1C;EAOjBE,YAAY,EAAE,CAACC,IAAD,EAAiBC,IAAjB,KACZ,qBAAQ,EAAR,EAAYD,IAAZ,EAAkBC,IAAlB,CARe;EASjB;EACAC,OAAO,EAAE,CACPL,CAAqB,GAAG,EADjB,EAEPC,CAAqB,GAAG,EAFjB,KAIP,wBAAWD,CAAC,CAACM,MAAF,CAASL,CAAT,CAAX,EAAwB,CAACD,CAAD,EAAIC,CAAJ,KACtB,uBACE,oBAAOP,oBAAoB,CAACM,CAAD,CAA3B,EAAgC,CAAE,SAAF,EAAa,SAAb,CAAhC,CADF,EAEE,oBAAON,oBAAoB,CAACO,CAAD,CAA3B,EAAgC,CAAE,SAAF,EAAa,SAAb,CAAhC,CAFF,CADF,CAde;EAoBjBM,OAAO,EAAE,CAACJ,IAAD,EAAgBC,IAAhB,KAA2C,qBAAQ,EAAR,EAAYD,IAAZ,EAAkBC,IAAlB;AApBnC,CAAnB;AAuBA;AACA;AACA;;AACO,MAAMI,iBAAiB,GAAG,CAC/BR,CAD+B,EAE/BC,CAF+B,KAGR;EACvB;EACA,MAAMQ,6BAA6B,GAAG,oBACpCC,MAAM,CAACC,IAAP,CAAYX,CAAZ,EAAeM,MAAf,CAAsBI,MAAM,CAACC,IAAP,CAAYV,CAAZ,CAAtB,CADoC,CAAtC,CAFuB,CAMvB;;EACA,MAAMW,YAAY,GAAGH,6BAA6B,CAACI,MAA9B,CACnB,CAACC,MAAD,EAASC,eAAT,KAA6B;IAC3B;IACA;IACA,MAAMC,OAAO,GAAGlB,UAAU,CAACiB,eAAD,CAAV,IAA+BjB,UAAU,CAACC,SAA1D;IACA,OAAO,EACL,GAAGe,MADE;MAEL,CAACC,eAAD,GAAmBC,OAAO,CAAChB,CAAC,CAACe,eAAD,CAAF,EAAqBd,CAAC,CAACc,eAAD,CAAtB;IAFrB,CAAP;EAID,CATkB,EAUnB,EAVmB,CAArB,CAPuB,CAoBvB;;EACA,OAAOH,YAAP;AACD,CAzBM"}