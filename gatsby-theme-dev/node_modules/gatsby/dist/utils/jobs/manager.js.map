{"version":3,"file":"manager.js","names":["activityForJobs","activeJobs","isListeningForMessages","hasShownIPCDisabledWarning","jobsInProcess","Map","externalJobsMap","convertPathsToAbsolute","filePath","path","isAbsolute","Error","slash","createFileHash","hasha","fromFileSync","algorithm","hasActiveJobs","hasExternalJobsEnabled","process","env","ENABLE_GATSBY_EXTERNAL_JOBS","runLocalWorker","workerFn","job","fs","ensureDir","outputDir","Promise","resolve","reject","setImmediate","inputPaths","args","err","WorkerError","isJobsIPCMessage","msg","type","payload","id","has","listenForJobMessages","on","deferred","get","MESSAGE_TYPES","JOB_COMPLETED","result","JOB_FAILED","error","JOB_NOT_WHITELISTED","runJob","delete","runExternalWorker","pDefer","set","jobCreatedMessage","JOB_CREATED","send","promise","forceLocal","plugin","worker","requireGatsbyPlugin","name","isLocal","reporter","warn","version","isInternalJob","undefined","contentDigest","createInternalJob","inputPathsWithContentDigest","map","pth","internalJob","uuid","v4","includes","createContentDigest","inputPath","activitiesForJobTypes","enqueueJob","phantomActivity","start","jobType","activityForJobsProgress","createProgress","total","end","tick","getInProcessJobPromise","removeInProgressJob","waitUntilAllJobsComplete","progressActivity","values","clear","waitJobs","jobDigests","promises","digest","push","all","isJobStale","areInputPathsStale","some","existsSync","fileHash"],"sources":["../../../src/utils/jobs/manager.ts"],"sourcesContent":["import path from \"path\"\nimport hasha from \"hasha\"\nimport fs from \"fs-extra\"\nimport pDefer from \"p-defer\"\nimport _ from \"lodash\"\nimport { createContentDigest, slash, uuid } from \"gatsby-core-utils\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IPhantomReporter } from \"gatsby-cli\"\nimport {\n  JobInput,\n  InternalJob,\n  MESSAGE_TYPES,\n  IJobCreatedMessage,\n  IJobCompletedMessage,\n  IJobFailed,\n  IJobNotWhitelisted,\n  WorkerError,\n} from \"./types\"\nimport { requireGatsbyPlugin } from \"../require-gatsby-plugin\"\n\ntype IncomingMessages = IJobCompletedMessage | IJobFailed | IJobNotWhitelisted\n\ntype OutgoingMessages = IJobCreatedMessage\n\nexport { InternalJob }\nexport type JobResultInterface = Record<string, unknown>\n\nlet activityForJobs: IPhantomReporter | null = null\nlet activeJobs = 0\nlet isListeningForMessages = false\nlet hasShownIPCDisabledWarning = false\n\nconst jobsInProcess: Map<\n  string,\n  { id: string; deferred: pDefer.DeferredPromise<Record<string, unknown>> }\n> = new Map()\nconst externalJobsMap: Map<\n  string,\n  { job: InternalJob; deferred: pDefer.DeferredPromise<any> }\n> = new Map()\n\n/**\n * We want to use absolute paths to make sure they are on the filesystem\n */\nfunction convertPathsToAbsolute(filePath: string): string {\n  if (!path.isAbsolute(filePath)) {\n    throw new Error(`${filePath} should be an absolute path.`)\n  }\n\n  return slash(filePath)\n}\n/**\n * Get contenthash of a file\n */\nfunction createFileHash(path: string): string {\n  return hasha.fromFileSync(path, { algorithm: `sha1` })\n}\n\nlet hasActiveJobs: pDefer.DeferredPromise<void> | null = null\n\nfunction hasExternalJobsEnabled(): boolean {\n  return (\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `true` ||\n    process.env.ENABLE_GATSBY_EXTERNAL_JOBS === `1`\n  )\n}\n\n/**\n * Get the local worker function and execute it on the user's machine\n */\nasync function runLocalWorker<T>(\n  workerFn: { ({ inputPaths, outputDir, args }: InternalJob): T },\n  job: InternalJob\n): Promise<T> {\n  await fs.ensureDir(job.outputDir)\n\n  return new Promise((resolve, reject) => {\n    // execute worker nextTick\n    // TODO should we think about threading/queueing here?\n    setImmediate(() => {\n      try {\n        resolve(\n          workerFn({\n            inputPaths: job.inputPaths,\n            outputDir: job.outputDir,\n            args: job.args,\n          } as InternalJob)\n        )\n      } catch (err) {\n        reject(new WorkerError(err))\n      }\n    })\n  })\n}\n\nfunction isJobsIPCMessage(msg: any): msg is IncomingMessages {\n  return (\n    msg &&\n    msg.type &&\n    msg.payload &&\n    msg.payload.id &&\n    externalJobsMap.has(msg.payload.id)\n  )\n}\n\nfunction listenForJobMessages(): void {\n  process.on(`message`, msg => {\n    if (isJobsIPCMessage(msg)) {\n      const { job, deferred } = externalJobsMap.get(msg.payload.id)!\n\n      switch (msg.type) {\n        case MESSAGE_TYPES.JOB_COMPLETED: {\n          deferred.resolve(msg.payload.result)\n          break\n        }\n        case MESSAGE_TYPES.JOB_FAILED: {\n          deferred.reject(new WorkerError(msg.payload.error))\n          break\n        }\n        case MESSAGE_TYPES.JOB_NOT_WHITELISTED: {\n          deferred.resolve(runJob(job, true))\n          break\n        }\n      }\n\n      externalJobsMap.delete(msg.payload.id)\n    }\n  })\n}\n\nfunction runExternalWorker(job: InternalJob): Promise<any> {\n  const deferred = pDefer<any>()\n\n  externalJobsMap.set(job.id, {\n    job,\n    deferred,\n  })\n\n  const jobCreatedMessage: OutgoingMessages = {\n    type: MESSAGE_TYPES.JOB_CREATED,\n    payload: job,\n  }\n\n  process.send!(jobCreatedMessage)\n\n  return deferred.promise\n}\n\n/**\n * Make sure we have everything we need to run a job\n * If we do, run it locally.\n * TODO add external job execution through ipc\n */\nfunction runJob(\n  job: InternalJob,\n  forceLocal = false\n): Promise<Record<string, unknown>> {\n  const { plugin } = job\n  try {\n    const worker = requireGatsbyPlugin(plugin, `gatsby-worker`)\n    if (!worker[job.name]) {\n      throw new Error(`No worker function found for ${job.name}`)\n    }\n\n    if (!forceLocal && !job.plugin.isLocal && hasExternalJobsEnabled()) {\n      if (process.send) {\n        if (!isListeningForMessages) {\n          isListeningForMessages = true\n          listenForJobMessages()\n        }\n\n        return runExternalWorker(job)\n      } else {\n        // only show the offloading warning once\n        if (!hasShownIPCDisabledWarning) {\n          hasShownIPCDisabledWarning = true\n          reporter.warn(\n            `Offloading of a job failed as IPC could not be detected. Running job locally.`\n          )\n        }\n      }\n    }\n    return runLocalWorker(worker[job.name], job)\n  } catch (err) {\n    throw new Error(\n      `We couldn't find a gatsby-worker.js(${plugin.resolve}/gatsby-worker.js) file for ${plugin.name}@${plugin.version}`\n    )\n  }\n}\n\nfunction isInternalJob(job: JobInput | InternalJob): job is InternalJob {\n  return (\n    (job as InternalJob).id !== undefined &&\n    (job as InternalJob).contentDigest !== undefined\n  )\n}\n\n/**\n * Create an internal job object\n */\nexport function createInternalJob(\n  job: JobInput | InternalJob,\n  plugin: { name: string; version: string; resolve: string }\n): InternalJob {\n  // It looks like we already have an augmented job so we shouldn't redo this work\n  if (isInternalJob(job)) {\n    return job\n  }\n\n  const { name, inputPaths, outputDir, args } = job\n\n  // TODO see if we can make this async, filehashing might be expensive to wait for\n  // currently this needs to be sync as we could miss jobs to have been scheduled and\n  // are still processing their hashes\n  const inputPathsWithContentDigest = inputPaths.map((pth: string) => {\n    return {\n      path: convertPathsToAbsolute(pth),\n      contentDigest: createFileHash(pth),\n    }\n  })\n\n  const internalJob: InternalJob = {\n    id: uuid.v4(),\n    name,\n    contentDigest: ``,\n    inputPaths: inputPathsWithContentDigest,\n    outputDir: convertPathsToAbsolute(outputDir),\n    args,\n    plugin: {\n      name: plugin.name,\n      version: plugin.version,\n      resolve: plugin.resolve,\n      isLocal: !plugin.resolve.includes(`/node_modules/`),\n    },\n  }\n\n  // generate a contentDigest based on all parameters including file content\n  internalJob.contentDigest = createContentDigest({\n    name: job.name,\n    inputPaths: internalJob.inputPaths.map(\n      inputPath => inputPath.contentDigest\n    ),\n    outputDir: internalJob.outputDir,\n    args: internalJob.args,\n    plugin: internalJob.plugin,\n  })\n\n  return internalJob\n}\n\nconst activitiesForJobTypes = new Map<\n  string,\n  ReturnType<typeof reporter.createProgress>\n>()\n\n/**\n * Creates a job\n */\nexport async function enqueueJob(\n  job: InternalJob\n): Promise<Record<string, unknown>> {\n  // When we already have a job that's executing, return the same promise.\n  // we have another check in our createJobV2 action to return jobs that have been done in a previous gatsby run\n  if (jobsInProcess.has(job.contentDigest)) {\n    return jobsInProcess.get(job.contentDigest)!.deferred.promise\n  }\n\n  if (activeJobs === 0) {\n    hasActiveJobs = pDefer<void>()\n  }\n\n  // Bump active jobs\n  activeJobs++\n  if (!activityForJobs) {\n    activityForJobs = reporter.phantomActivity(`Running jobs v2`)\n    activityForJobs!.start()\n  }\n\n  const jobType = `${job.plugin.name}.${job.name}`\n\n  let activityForJobsProgress = activitiesForJobTypes.get(jobType)\n\n  if (!activityForJobsProgress) {\n    activityForJobsProgress = reporter.createProgress(\n      `Running ${jobType} jobs`,\n      1,\n      0\n    )\n    activityForJobsProgress.start()\n    activitiesForJobTypes.set(jobType, activityForJobsProgress)\n  } else {\n    activityForJobsProgress.total++\n  }\n\n  const deferred = pDefer<Record<string, unknown>>()\n  jobsInProcess.set(job.contentDigest, {\n    id: job.id,\n    deferred,\n  })\n\n  try {\n    const result = await runJob(job)\n    // this check is to keep our worker results consistent for cloud\n    if (result != null && !_.isPlainObject(result)) {\n      throw new Error(\n        `Result of a worker should be an object, type of \"${typeof result}\" was given`\n      )\n    }\n    deferred.resolve(result)\n  } catch (err) {\n    deferred.reject(new WorkerError(err))\n  } finally {\n    // when all jobs are done we end the activity\n    if (--activeJobs === 0) {\n      hasActiveJobs!.resolve()\n      activityForJobs!.end()\n      // eslint-disable-next-line require-atomic-updates\n      activityForJobs = null\n    }\n\n    activityForJobsProgress.tick()\n  }\n\n  return deferred.promise\n}\n\n/**\n * Get in progress job promise\n */\nexport function getInProcessJobPromise(\n  contentDigest: string\n): Promise<Record<string, unknown>> | undefined {\n  return jobsInProcess.get(contentDigest)?.deferred.promise\n}\n\n/**\n * Remove a job from our inProgressQueue to reduce memory usage\n */\nexport function removeInProgressJob(contentDigest: string): void {\n  jobsInProcess.delete(contentDigest)\n}\n\n/**\n * Wait for all processing jobs to have finished\n */\nexport async function waitUntilAllJobsComplete(): Promise<void> {\n  await (hasActiveJobs ? hasActiveJobs.promise : Promise.resolve())\n  for (const progressActivity of activitiesForJobTypes.values()) {\n    progressActivity.end()\n  }\n  activitiesForJobTypes.clear()\n}\n\n/**\n * Wait for specific jobs for engines\n */\nexport async function waitJobs(jobDigests: Set<string>): Promise<void> {\n  const promises: Array<Promise<any>> = []\n  for (const [digest, job] of jobsInProcess) {\n    if (jobDigests.has(digest)) {\n      promises.push(job.deferred.promise)\n    }\n  }\n  await Promise.all(promises)\n}\n\nexport function isJobStale(\n  job: Partial<InternalJob> & { inputPaths: InternalJob[\"inputPaths\"] }\n): boolean {\n  const areInputPathsStale = job.inputPaths.some(inputPath => {\n    // does the inputPath still exists?\n    if (!fs.existsSync(inputPath.path)) {\n      return true\n    }\n\n    // check if we're talking about the same file\n    const fileHash = createFileHash(inputPath.path)\n    return fileHash !== inputPath.contentDigest\n  })\n\n  return areInputPathsStale\n}\n"],"mappings":"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"}