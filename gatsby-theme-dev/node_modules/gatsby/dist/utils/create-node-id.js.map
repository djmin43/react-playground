{"version":3,"file":"create-node-id.js","names":["seedConstant","unprefixedCache","Map","namespacedCache","createNodeId","id","namespace","toString","report","panic","nsHash","get","uuidv5","set","nsCache","hash"],"sources":["../../src/utils/create-node-id.ts"],"sourcesContent":["import { v5 as uuidv5 } from \"uuid\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nconst seedConstant = `638f7a53-c567-4eca-8fc1-b23efb1cfb2b`\n\n// This cache prevents duplicate calls to uuid which is relevant for certain cases\nconst unprefixedCache: Map<string, string> = new Map()\n// ns -> name -> uuid\nconst namespacedCache: Map<string, Map<string, string>> = new Map([\n  [``, unprefixedCache],\n])\n\n/**\n * Generate a unique id that is consistent, deterministic, and fast while resulting in predictably short hashes.\n *\n * Some characteristics for this id:\n *\n * - The value of the `id` should not mean anything (it is \"ours\")\n * - The value does not need to be encrypted\n * - The value must be unique within our system (as little collision risk as possible on small ascii inputs)\n * - The value needs to be deterministic (same input always results in same output)\n * - The conversion needs to be fast\n * - The result should be predictably short as it may be used in urls\n *\n * High level this step is meant to prevent people from using our `id` to have meaning in their site and it's meant\n * to make sure the id ends up being short, whatever the input size was.\n *\n * Note: UUID is relatively slow because it calls into the native crypto library to generate SHA-1 hashes.\n *       We do need the low collision rate of SHA-1 so we use a local (global) cache to speed up repetitive calls\n *\n * @param {String | Number} id - A string of arbitrary length\n * @param {String} namespace - Namespace to use for UUID\n *\n * @return {String} - UUID\n */\nexport function createNodeId(id: string | number, namespace: string): string {\n  if (typeof id === `number`) {\n    id = id.toString()\n  } else if (typeof id !== `string`) {\n    report.panic(\n      `The \\`id\\` parameter passed to createNodeId must be a String or Number (got ${typeof id})`\n    )\n  } else if (typeof namespace !== `string`) {\n    report.panic(\n      `The \\`namespace\\` parameter passed to createNodeId must be a String (got ${typeof namespace})`\n    )\n  }\n\n  let nsHash = unprefixedCache.get(namespace)\n  if (!nsHash) {\n    nsHash = uuidv5(namespace, seedConstant) as string\n    unprefixedCache.set(namespace, nsHash)\n  }\n\n  // Calling uuid is relatively expensive because it calls into crypto for sha1.\n  // We use a local map to cache calls with the same ns+id pair, which helps a lot.\n  let nsCache = namespacedCache.get(namespace)\n  if (!nsCache) {\n    nsCache = new Map()\n    namespacedCache.set(namespace, nsCache)\n  }\n\n  let hash = nsCache.get(id)\n  if (hash) {\n    return hash\n  }\n\n  hash = uuidv5(id, nsHash) as string\n  nsCache.set(id, hash)\n  return hash\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,YAAY,GAAI,sCAAtB,C,CAEA;;AACA,MAAMC,eAAoC,GAAG,IAAIC,GAAJ,EAA7C,C,CACA;;AACA,MAAMC,eAAiD,GAAG,IAAID,GAAJ,CAAQ,CAChE,CAAE,EAAF,EAAKD,eAAL,CADgE,CAAR,CAA1D;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASG,YAAT,CAAsBC,EAAtB,EAA2CC,SAA3C,EAAsE;EAC3E,IAAI,OAAOD,EAAP,KAAe,QAAnB,EAA4B;IAC1BA,EAAE,GAAGA,EAAE,CAACE,QAAH,EAAL;EACD,CAFD,MAEO,IAAI,OAAOF,EAAP,KAAe,QAAnB,EAA4B;IACjCG,iBAAA,CAAOC,KAAP,CACG,+EAA8E,OAAOJ,EAAG,GAD3F;EAGD,CAJM,MAIA,IAAI,OAAOC,SAAP,KAAsB,QAA1B,EAAmC;IACxCE,iBAAA,CAAOC,KAAP,CACG,4EAA2E,OAAOH,SAAU,GAD/F;EAGD;;EAED,IAAII,MAAM,GAAGT,eAAe,CAACU,GAAhB,CAAoBL,SAApB,CAAb;;EACA,IAAI,CAACI,MAAL,EAAa;IACXA,MAAM,GAAG,IAAAE,QAAA,EAAON,SAAP,EAAkBN,YAAlB,CAAT;IACAC,eAAe,CAACY,GAAhB,CAAoBP,SAApB,EAA+BI,MAA/B;EACD,CAjB0E,CAmB3E;EACA;;;EACA,IAAII,OAAO,GAAGX,eAAe,CAACQ,GAAhB,CAAoBL,SAApB,CAAd;;EACA,IAAI,CAACQ,OAAL,EAAc;IACZA,OAAO,GAAG,IAAIZ,GAAJ,EAAV;IACAC,eAAe,CAACU,GAAhB,CAAoBP,SAApB,EAA+BQ,OAA/B;EACD;;EAED,IAAIC,IAAI,GAAGD,OAAO,CAACH,GAAR,CAAYN,EAAZ,CAAX;;EACA,IAAIU,IAAJ,EAAU;IACR,OAAOA,IAAP;EACD;;EAEDA,IAAI,GAAG,IAAAH,QAAA,EAAOP,EAAP,EAAWK,MAAX,CAAP;EACAI,OAAO,CAACD,GAAR,CAAYR,EAAZ,EAAgBU,IAAhB;EACA,OAAOA,IAAP;AACD"}