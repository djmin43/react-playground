{"version":3,"file":"limited-exports-page-templates.js","names":["DEFAULT_GRAPHQL_TAG_NAME","isApiExport","node","name","declaration","type","id","declarations","source","specifiers","some","specifier","exported","hasOneValidNamedDeclaration","varName","nonQueryExports","e","isTemplateQuery","graphqlTagName","namespaceSpecifierName","every","el","init","tag","object","property","limitedExports","meta","messages","limitedExportsPageTemplates","create","context","isPageTemplate","store","queryVariableName","VariableDeclaration","requiredFromGatsby","find","arguments","quasis","value","raw","graphqlTagSpecifier","properties","key","undefined","ImportDeclaration","imported","local","TaggedTemplateExpression","parent","ExportNamedDeclaration","report","messageId","module","exports"],"sources":["../../../src/utils/eslint-rules/limited-exports-page-templates.ts"],"sourcesContent":["import { Rule } from \"eslint\"\nimport {\n  Node,\n  Identifier,\n  ImportDeclaration,\n  TaggedTemplateExpression,\n  VariableDeclaration,\n  CallExpression,\n  Literal,\n  TemplateLiteral,\n  VariableDeclarator,\n  ObjectPattern,\n  AssignmentProperty,\n  ExportNamedDeclaration,\n} from \"estree\"\nimport { store } from \"../../redux\"\nimport { isPageTemplate } from \"../eslint-rules-helpers\"\n\nconst DEFAULT_GRAPHQL_TAG_NAME = `graphql`\n\nfunction isApiExport(node: ExportNamedDeclaration, name: string): boolean {\n  // check for\n  // export function name() {}\n  // export async function name() {}\n  if (\n    node.declaration?.type === `FunctionDeclaration` &&\n    node.declaration.id?.name === name\n  ) {\n    return true\n  }\n\n  // check for\n  // export const name = () => {}\n  if (node.declaration?.type === `VariableDeclaration`) {\n    for (const declaration of node.declaration.declarations) {\n      if (\n        declaration.type === `VariableDeclarator` &&\n        declaration.id.type === `Identifier` &&\n        declaration.id.name === name\n      ) {\n        return true\n      }\n    }\n  }\n\n  if (name === `Head`) {\n    // Head can be re-exported, Head can be class components - so the checks above are not sufficient,\n    // we need to be more permisive here\n\n    // class component\n    if (\n      node.declaration?.type === `ClassDeclaration` &&\n      node.declaration?.id?.type === `Identifier` &&\n      node.declaration?.id?.name === name\n    ) {\n      return true\n    }\n\n    // re-exports\n    if (\n      node.source &&\n      node.specifiers.some(specifier => specifier.exported.name === name)\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction hasOneValidNamedDeclaration(\n  node: Node,\n  varName: string | undefined\n): boolean {\n  // Checks for:\n  // const query = graphql``\n  // export { query }\n  if (node.type === `ExportNamedDeclaration` && node.declaration === null) {\n    // For export { foobar, query } the declaration will be null and specifiers exists\n    // For { foobar, query } it'll return true, for { query } it'll return false\n    // It will ignore any { default } declarations since these are allowed\n    const nonQueryExports = node.specifiers.some(e =>\n      varName\n        ? e.exported.name !== varName && e.exported.name !== `default`\n        : e.exported.name !== `default`\n    )\n    return !nonQueryExports\n  }\n\n  return false\n}\n\nfunction isTemplateQuery(\n  node: Node,\n  graphqlTagName: string,\n  namespaceSpecifierName: string\n): boolean {\n  // For export const query = 'foobar' the declaration exists with type 'VariableDeclaration'\n\n  // Checks for:\n  // export const query = graphql``\n  // This case only has one item in the declarations array\n  // For export const hello = 10, world = 'foo'\n  // The array will have two items. So use every() to check if only one item exists\n  // With TaggedTemplateExpression and \"graphql\" name\n\n  // In addition the declaration can also be a MemberExpression like\n  // Gatsby.graphql`` when the import happened with import * as Gatsby from \"gatsby\"\n\n  return (\n    node.type === `ExportNamedDeclaration` &&\n    node.declaration?.type === `VariableDeclaration` &&\n    node.declaration?.declarations.every(el => {\n      if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `Identifier`\n      ) {\n        return el.init.tag.name === graphqlTagName\n      } else if (\n        el?.init?.type === `TaggedTemplateExpression` &&\n        el.init.tag.type === `MemberExpression`\n      ) {\n        return (\n          (el.init.tag.object as Identifier).name === namespaceSpecifierName &&\n          (el.init.tag.property as Identifier).name === DEFAULT_GRAPHQL_TAG_NAME\n        )\n      }\n      return false\n    })\n  )\n}\n\nconst limitedExports: Rule.RuleModule = {\n  meta: {\n    type: `problem`,\n    messages: {\n      limitedExportsPageTemplates: `In page templates only a default export of a valid React component and the named exports of a page query, getServerData, Head or config are allowed.\n        All other named exports will cause Fast Refresh to not preserve local component state and do a full refresh.\n\n        Please move your other named exports to another file. Also make sure that you only export page queries that use the \"graphql\" tag from \"gatsby\".\n`,\n    },\n  },\n  create: context => {\n    if (!isPageTemplate(store, context)) {\n      return {}\n    }\n\n    let queryVariableName: string | undefined = ``\n    let graphqlTagName = ``\n    let namespaceSpecifierName = ``\n\n    return {\n      // const { graphql } = require('gatsby')\n      VariableDeclaration: (node): void => {\n        // Check if require('gatsby')\n        const requiredFromGatsby = (\n          node as VariableDeclaration\n        ).declarations.find(el => {\n          // Handle require(`gatsby`)\n          if (\n            (el.init as CallExpression)?.arguments?.[0]?.type ===\n            `TemplateLiteral`\n          ) {\n            return (\n              ((el.init as CallExpression).arguments[0] as TemplateLiteral)\n                ?.quasis[0].value.raw === `gatsby`\n            )\n          }\n\n          return (\n            ((el.init as CallExpression)?.arguments?.[0] as Literal)?.value ===\n            `gatsby`\n          )\n        })\n\n        if (requiredFromGatsby) {\n          // Search for \"graphql\" in a const { graphql, Link } = require('gatsby')\n          const graphqlTagSpecifier = (\n            (requiredFromGatsby as VariableDeclarator).id as ObjectPattern\n          )?.properties.find(\n            el =>\n              ((el as AssignmentProperty).key as Identifier).name ===\n              DEFAULT_GRAPHQL_TAG_NAME\n          )\n\n          if (graphqlTagSpecifier) {\n            graphqlTagName = (\n              (graphqlTagSpecifier as AssignmentProperty).value as Identifier\n            ).name\n          }\n        }\n\n        return undefined\n      },\n      // import { graphql } from \"gatsby\"\n      ImportDeclaration: (node): void => {\n        // Make sure that the specifier is imported from \"gatsby\"\n        if ((node as ImportDeclaration).source.value === `gatsby`) {\n          const graphqlTagSpecifier = (\n            node as ImportDeclaration\n          ).specifiers.find(el => {\n            // We only want import { graphql } from \"gatsby\"\n            // Not import graphql from \"gatsby\"\n            if (el.type === `ImportSpecifier`) {\n              // Only get the specifier with the original name of \"graphql\"\n              return el.imported.name === DEFAULT_GRAPHQL_TAG_NAME\n            }\n            // import * as Gatsby from \"gatsby\"\n            if (el.type === `ImportNamespaceSpecifier`) {\n              namespaceSpecifierName = el.local.name\n              return false\n            }\n            return false\n          })\n          if (graphqlTagSpecifier) {\n            // The local.name handles the case for import { graphql as otherName }\n            // For normal import { graphql } the imported & local name are the same\n            graphqlTagName = graphqlTagSpecifier.local.name\n          }\n        }\n        return undefined\n      },\n      TaggedTemplateExpression: (node): void => {\n        if (\n          (node as TaggedTemplateExpression).type ===\n            `TaggedTemplateExpression` &&\n          ((node as TaggedTemplateExpression).tag as Identifier)?.name ===\n            graphqlTagName\n        ) {\n          if (queryVariableName) {\n            return undefined\n          }\n          // @ts-ignore\n          queryVariableName = node.parent?.id?.name\n        }\n\n        return undefined\n      },\n      ExportNamedDeclaration: (node): void => {\n        if (hasOneValidNamedDeclaration(node, queryVariableName)) {\n          return undefined\n        }\n\n        if (isTemplateQuery(node, graphqlTagName, namespaceSpecifierName)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `getServerData`)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `config`)) {\n          return undefined\n        }\n\n        if (isApiExport(node, `Head`)) {\n          return undefined\n        }\n\n        context.report({\n          node,\n          messageId: `limitedExportsPageTemplates`,\n        })\n\n        return undefined\n      },\n    }\n  },\n}\n\nmodule.exports = limitedExports\n"],"mappings":"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"}