{"version":3,"file":"pool.js","names":["create","numWorkers","Math","max","cpuCoreCount","reporter","verbose","worker","WorkerPool","require","resolve","env","GATSBY_NODE_GLOBALS","JSON","stringify","global","__GATSBY","GATSBY_WORKER_POOL_WORKER","GATSBY_SKIP_WRITING_SCHEMA_TO_FILE","initJobsMessagingInMainProcess","initReporterMessagingInMainProcess","queriesChunkSize","Number","process","GATSBY_PARALLEL_QUERY_CHUNK_SIZE","handleRunQueriesInWorkersQueueError","e","panic","id","context","error","runQueriesInWorkersQueue","pool","queryIds","opts","activity","createProgress","staticQueryIds","length","pageQueryIds","parentSpan","start","staticQuerySegments","chunkSize","pageQuerySegments","all","setComponents","segment","single","runQueries","then","replayWorkerActions","tick","catch","Promise","saveQueriesDependencies","end","mergeWorkerState","activityTimer","workerId","getWorkerInfo","state","loadPartialStateFromDisk","String","queryStateChunk","queries","queryStateTelemetryChunk","telemetry","payload","Object","keys","store","dispatch","type","nextTick","actions","i","action"],"sources":["../../../src/utils/worker/pool.ts"],"sourcesContent":["import { WorkerPool } from \"gatsby-worker\"\nimport { chunk } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { cpuCoreCount } from \"gatsby-core-utils\"\nimport { Span } from \"opentracing\"\n\nimport { IGroupedQueryIds } from \"../../services\"\nimport { initJobsMessagingInMainProcess } from \"../jobs/worker-messaging\"\nimport { initReporterMessagingInMainProcess } from \"./reporter\"\n\nimport { GatsbyWorkerPool } from \"./types\"\nimport { loadPartialStateFromDisk, store } from \"../../redux\"\nimport { ActionsUnion, IGatsbyState } from \"../../redux/types\"\n\nexport type { GatsbyWorkerPool }\n\nexport const create = (): GatsbyWorkerPool => {\n  const numWorkers = Math.max(1, cpuCoreCount() - 1)\n  reporter.verbose(`Creating ${numWorkers} worker`)\n\n  const worker: GatsbyWorkerPool = new WorkerPool(require.resolve(`./child`), {\n    numWorkers,\n    env: {\n      GATSBY_NODE_GLOBALS: JSON.stringify(global.__GATSBY ?? {}),\n      GATSBY_WORKER_POOL_WORKER: `true`,\n      GATSBY_SKIP_WRITING_SCHEMA_TO_FILE: `true`,\n    },\n  })\n\n  initJobsMessagingInMainProcess(worker)\n  initReporterMessagingInMainProcess(worker)\n\n  return worker\n}\n\nconst queriesChunkSize =\n  Number(process.env.GATSBY_PARALLEL_QUERY_CHUNK_SIZE) || 50\n\nfunction handleRunQueriesInWorkersQueueError(e: Error): never {\n  reporter.panic({\n    id: `85928`,\n    context: {},\n    error: e,\n  })\n}\n\nexport async function runQueriesInWorkersQueue(\n  pool: GatsbyWorkerPool,\n  queryIds: IGroupedQueryIds,\n  opts?: {\n    chunkSize?: number\n    parentSpan?: Span\n  }\n): Promise<void> {\n  const activity = reporter.createProgress(\n    `run queries in workers`,\n    queryIds.staticQueryIds.length + queryIds.pageQueryIds.length,\n    0,\n    { parentSpan: opts?.parentSpan }\n  )\n  activity.start()\n  try {\n    const staticQuerySegments = chunk(\n      queryIds.staticQueryIds,\n      opts?.chunkSize ?? queriesChunkSize\n    )\n    const pageQuerySegments = chunk(\n      queryIds.pageQueryIds,\n      opts?.chunkSize ?? queriesChunkSize\n    )\n\n    pool.all.setComponents()\n\n    for (const segment of staticQuerySegments) {\n      pool.single\n        .runQueries({ pageQueryIds: [], staticQueryIds: segment })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n        .catch(handleRunQueriesInWorkersQueueError)\n    }\n\n    for (const segment of pageQuerySegments) {\n      pool.single\n        .runQueries({ pageQueryIds: segment, staticQueryIds: [] })\n        .then(replayWorkerActions)\n        .then(() => {\n          activity.tick(segment.length)\n        })\n        .catch(handleRunQueriesInWorkersQueueError)\n    }\n\n    // note that we only await on this and not on anything before (`.setComponents()` or `.runQueries()`)\n    // because gatsby-worker will queue tasks internally and worker will never execute multiple tasks at the same time\n    // so awaiting `.saveQueriesDependencies()` is enough to make sure `.setComponents()` and `.runQueries()` finished\n    await Promise.all(pool.all.saveQueriesDependencies())\n  } catch (e) {\n    handleRunQueriesInWorkersQueueError(e)\n  } finally {\n    activity.end()\n  }\n}\n\nexport async function mergeWorkerState(\n  pool: GatsbyWorkerPool,\n  parentSpan?: Span\n): Promise<void> {\n  const activity = reporter.activityTimer(`Merge worker state`, { parentSpan })\n  activity.start()\n\n  for (const { workerId } of pool.getWorkerInfo()) {\n    const state = loadPartialStateFromDisk(\n      [`queries`, `telemetry`],\n      String(workerId)\n    )\n    const queryStateChunk = state.queries as IGatsbyState[\"queries\"]\n    const queryStateTelemetryChunk =\n      state.telemetry as IGatsbyState[\"telemetry\"]\n\n    const payload: {\n      queryStateChunk?: IGatsbyState[\"queries\"]\n      queryStateTelemetryChunk?: IGatsbyState[\"telemetry\"]\n    } = {}\n\n    if (queryStateChunk) {\n      payload.queryStateChunk = queryStateChunk\n    }\n\n    if (queryStateTelemetryChunk) {\n      payload.queryStateTelemetryChunk = queryStateTelemetryChunk\n    }\n\n    if (Object.keys(payload).length) {\n      // When there are too little queries, some worker can be inactive and its state is empty\n      store.dispatch({\n        type: `MERGE_WORKER_QUERY_STATE`,\n        payload: {\n          workerId,\n          ...payload,\n        },\n      })\n      await new Promise(resolve => process.nextTick(resolve))\n    }\n  }\n  activity.end()\n}\n\nasync function replayWorkerActions(\n  actions: Array<ActionsUnion>\n): Promise<void> {\n  let i = 1\n  for (const action of actions) {\n    store.dispatch(action)\n\n    // Give event loop some breath\n    if (i++ % 100 === 0) {\n      await new Promise(resolve => process.nextTick(resolve))\n    }\n  }\n}\n"],"mappings":"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"}