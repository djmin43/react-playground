"use strict";

exports.__esModule = true;
exports.wrapRootElement = void 0;

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@builder.io/partytown/react");

var _gatsbyScript = require("gatsby-script");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function PartytownProvider({
  children
}) {
  const [{
    collectedForwards,
    collectedAnyScript
  }, setState] = (0, _react.useState)({
    collectedForwards: new Set(),
    collectedAnyScript: false
  });
  return /*#__PURE__*/_react.default.createElement(_gatsbyScript.PartytownContext.Provider, {
    value: {
      collectScript: newScript => {
        let stateShouldChange = false;
        const potentialNewState = {
          collectedAnyScript,
          collectedForwards
        };

        if (!collectedAnyScript) {
          potentialNewState.collectedAnyScript = true;
          stateShouldChange = true;
        }

        if (newScript !== null && newScript !== void 0 && newScript.forward) {
          if (Array.isArray(newScript.forward)) {
            for (const singleForward of newScript.forward) {
              if (!potentialNewState.collectedForwards.has(singleForward)) {
                potentialNewState.collectedForwards.add(singleForward);
                stateShouldChange = true;
              }
            }
          } else {
            if (process.env.NODE_ENV === `development`) {
              console.log(`unexpected shape of forward`, newScript);
            }
          }
        }

        if (stateShouldChange) {
          setState(potentialNewState);
        }
      }
    }
  }, children, collectedAnyScript && /*#__PURE__*/_react.default.createElement(_react2.Partytown, {
    key: "partytown",
    forward: Array.from(collectedForwards)
  }));
}

const wrapRootElement = ({
  element
}) => /*#__PURE__*/_react.default.createElement(PartytownProvider, null, element);

exports.wrapRootElement = wrapRootElement;
//# sourceMappingURL=gatsby-browser.js.map