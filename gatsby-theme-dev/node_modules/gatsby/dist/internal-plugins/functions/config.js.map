{"version":3,"file":"config.js","names":["DEFAULT_LIMIT","defaultBodyParserOptions","limit","defaultUrlEncoded","extended","defaultConfig","bodyParser","text","raw","json","urlencoded","warnings","bodyParserConfigFailover","property","expectedType","actualFailover","_","original","push","replacedWith","functionConfigSchema","Joi","object","keys","type","string","alternatives","number","default","failover","unknown","boolean","required","createConfig","userConfig","functionObj","value","validate","length","warning","reporter","warn","originalRelativeFilePath","JSON","stringify"],"sources":["../../../src/internal-plugins/functions/config.ts"],"sourcesContent":["import Joi from \"joi\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport type { IGatsbyFunction } from \"../../internal\"\nimport type {\n  GatsbyFunctionBodyParserCommonMiddlewareConfig,\n  GatsbyFunctionBodyParserUrlencodedConfig,\n} from \"gatsby\"\n\nconst DEFAULT_LIMIT = `100kb`\n\n// similar to `GatsbyFunctionBodyParserConfig` and `IGatsbyFunctionConfigProcessed`\n// from index.d.ts, just with fields required (not optional).\n// `createConfig()` will fill in defaults\nexport interface IGatsbyBodyParserConfigProcessed {\n  json: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  raw: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  text: GatsbyFunctionBodyParserCommonMiddlewareConfig\n  urlencoded: GatsbyFunctionBodyParserUrlencodedConfig\n}\nexport interface IGatsbyFunctionConfigProcessed {\n  bodyParser: IGatsbyBodyParserConfigProcessed\n}\n\nconst defaultBodyParserOptions: GatsbyFunctionBodyParserCommonMiddlewareConfig =\n  {\n    limit: DEFAULT_LIMIT,\n  }\nconst defaultUrlEncoded = { extended: true }\nconst defaultConfig = {\n  bodyParser: {\n    text: defaultBodyParserOptions,\n    raw: defaultBodyParserOptions,\n    json: defaultBodyParserOptions,\n    urlencoded: { ...defaultBodyParserOptions, ...defaultUrlEncoded },\n  },\n}\n\nlet warnings: Array<{\n  property: string | null\n  original: any\n  expectedType: string\n  replacedWith: any\n}> = []\n\nfunction bodyParserConfigFailover(\n  property: keyof IGatsbyBodyParserConfigProcessed,\n  expectedType: string\n): any {\n  return function actualFailover(_, { original }): any {\n    warnings.push({\n      property: `bodyParser.${property}`,\n      original,\n      expectedType,\n      replacedWith: defaultConfig.bodyParser[property],\n    })\n\n    return defaultConfig.bodyParser[property]\n  }\n}\n\nconst functionConfigSchema: Joi.ObjectSchema<IGatsbyFunctionConfigProcessed> =\n  Joi.object()\n    .keys({\n      bodyParser: Joi.object()\n        .keys({\n          json: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .default(defaultConfig.bodyParser.json)\n            .failover(\n              bodyParserConfigFailover(\n                `json`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            )\n            .unknown(false),\n          text: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.text)\n            .failover(\n              bodyParserConfigFailover(\n                `text`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            ),\n          raw: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.raw)\n            .failover(\n              bodyParserConfigFailover(\n                `raw`,\n                `{\\n  type?: string\\n  limit?: string | number\\n}`\n              )\n            ),\n          urlencoded: Joi.object()\n            .keys({\n              type: Joi.string(),\n              limit: Joi.alternatives(Joi.string(), Joi.number()),\n              extended: Joi.boolean().required(),\n            })\n            .unknown(false)\n            .default(defaultConfig.bodyParser.urlencoded)\n            .failover(\n              bodyParserConfigFailover(\n                `urlencoded`,\n                `{\\n  type?: string\\n  limit: string | number\\n  extended: boolean\\n}`\n              )\n            ),\n        })\n        .unknown(false)\n        .default(defaultConfig.bodyParser)\n        .failover((_, { original }) => {\n          warnings.push({\n            property: `bodyParser`,\n            original,\n            expectedType: `{\\n  text?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  json?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  raw?: GatsbyFunctionBodyParserCommonMiddlewareConfig\\n  urlencoded?: GatsbyFunctionBodyParserUrlencodedConfig\\n}`,\n            replacedWith: defaultConfig.bodyParser,\n          })\n          return defaultConfig.bodyParser\n        }),\n    })\n    .unknown(false)\n    .default(defaultConfig)\n    .failover((_, { original }) => {\n      warnings.push({\n        property: null,\n        original,\n        expectedType: `{\\n  bodyParser?: GatsbyFunctionBodyParserConfig\\n}`,\n        replacedWith: defaultConfig,\n      })\n      return defaultConfig\n    })\n\nexport function createConfig(\n  userConfig: unknown,\n  functionObj: IGatsbyFunction\n): IGatsbyFunctionConfigProcessed {\n  warnings = []\n  const { value } = functionConfigSchema.validate(userConfig)\n\n  if (warnings.length) {\n    for (const warning of warnings) {\n      reporter.warn(\n        `${\n          warning.property\n            ? `\\`${warning.property}\\` property of exported config`\n            : `Exported config`\n        } in \\`${\n          functionObj.originalRelativeFilePath\n        }\\` is misconfigured.\\nExpected object:\\n\\n${\n          warning.expectedType\n        }\\n\\nGot:\\n\\n${JSON.stringify(\n          warning.original\n        )}\\n\\nUsing default:\\n\\n${JSON.stringify(\n          warning.replacedWith,\n          null,\n          2\n        )}`\n      )\n    }\n  }\n\n  return value\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AAOA,MAAMA,aAAa,GAAI,OAAvB,C,CAEA;AACA;AACA;;AAWA,MAAMC,wBAAwE,GAC5E;EACEC,KAAK,EAAEF;AADT,CADF;AAIA,MAAMG,iBAAiB,GAAG;EAAEC,QAAQ,EAAE;AAAZ,CAA1B;AACA,MAAMC,aAAa,GAAG;EACpBC,UAAU,EAAE;IACVC,IAAI,EAAEN,wBADI;IAEVO,GAAG,EAAEP,wBAFK;IAGVQ,IAAI,EAAER,wBAHI;IAIVS,UAAU,EAAE,EAAE,GAAGT,wBAAL;MAA+B,GAAGE;IAAlC;EAJF;AADQ,CAAtB;AASA,IAAIQ,QAKF,GAAG,EALL;;AAOA,SAASC,wBAAT,CACEC,QADF,EAEEC,YAFF,EAGO;EACL,OAAO,SAASC,cAAT,CAAwBC,CAAxB,EAA2B;IAAEC;EAAF,CAA3B,EAA8C;IACnDN,QAAQ,CAACO,IAAT,CAAc;MACZL,QAAQ,EAAG,cAAaA,QAAS,EADrB;MAEZI,QAFY;MAGZH,YAHY;MAIZK,YAAY,EAAEd,aAAa,CAACC,UAAd,CAAyBO,QAAzB;IAJF,CAAd;IAOA,OAAOR,aAAa,CAACC,UAAd,CAAyBO,QAAzB,CAAP;EACD,CATD;AAUD;;AAED,MAAMO,oBAAsE,GAC1EC,YAAA,CAAIC,MAAJ,GACGC,IADH,CACQ;EACJjB,UAAU,EAAEe,YAAA,CAAIC,MAAJ,GACTC,IADS,CACJ;IACJd,IAAI,EAAEY,YAAA,CAAIC,MAAJ,GACHC,IADG,CACE;MACJC,IAAI,EAAEH,YAAA,CAAII,MAAJ,EADF;MAEJvB,KAAK,EAAEmB,YAAA,CAAIK,YAAJ,CAAiBL,YAAA,CAAII,MAAJ,EAAjB,EAA+BJ,YAAA,CAAIM,MAAJ,EAA/B;IAFH,CADF,EAKHC,OALG,CAKKvB,aAAa,CAACC,UAAd,CAAyBG,IAL9B,EAMHoB,QANG,CAOFjB,wBAAwB,CACrB,MADqB,EAErB,kDAFqB,CAPtB,EAYHkB,OAZG,CAYK,KAZL,CADF;IAcJvB,IAAI,EAAEc,YAAA,CAAIC,MAAJ,GACHC,IADG,CACE;MACJC,IAAI,EAAEH,YAAA,CAAII,MAAJ,EADF;MAEJvB,KAAK,EAAEmB,YAAA,CAAIK,YAAJ,CAAiBL,YAAA,CAAII,MAAJ,EAAjB,EAA+BJ,YAAA,CAAIM,MAAJ,EAA/B;IAFH,CADF,EAKHG,OALG,CAKK,KALL,EAMHF,OANG,CAMKvB,aAAa,CAACC,UAAd,CAAyBC,IAN9B,EAOHsB,QAPG,CAQFjB,wBAAwB,CACrB,MADqB,EAErB,kDAFqB,CARtB,CAdF;IA2BJJ,GAAG,EAAEa,YAAA,CAAIC,MAAJ,GACFC,IADE,CACG;MACJC,IAAI,EAAEH,YAAA,CAAII,MAAJ,EADF;MAEJvB,KAAK,EAAEmB,YAAA,CAAIK,YAAJ,CAAiBL,YAAA,CAAII,MAAJ,EAAjB,EAA+BJ,YAAA,CAAIM,MAAJ,EAA/B;IAFH,CADH,EAKFG,OALE,CAKM,KALN,EAMFF,OANE,CAMMvB,aAAa,CAACC,UAAd,CAAyBE,GAN/B,EAOFqB,QAPE,CAQDjB,wBAAwB,CACrB,KADqB,EAErB,kDAFqB,CARvB,CA3BD;IAwCJF,UAAU,EAAEW,YAAA,CAAIC,MAAJ,GACTC,IADS,CACJ;MACJC,IAAI,EAAEH,YAAA,CAAII,MAAJ,EADF;MAEJvB,KAAK,EAAEmB,YAAA,CAAIK,YAAJ,CAAiBL,YAAA,CAAII,MAAJ,EAAjB,EAA+BJ,YAAA,CAAIM,MAAJ,EAA/B,CAFH;MAGJvB,QAAQ,EAAEiB,YAAA,CAAIU,OAAJ,GAAcC,QAAd;IAHN,CADI,EAMTF,OANS,CAMD,KANC,EAOTF,OAPS,CAODvB,aAAa,CAACC,UAAd,CAAyBI,UAPxB,EAQTmB,QARS,CASRjB,wBAAwB,CACrB,YADqB,EAErB,sEAFqB,CAThB;EAxCR,CADI,EAwDTkB,OAxDS,CAwDD,KAxDC,EAyDTF,OAzDS,CAyDDvB,aAAa,CAACC,UAzDb,EA0DTuB,QA1DS,CA0DA,CAACb,CAAD,EAAI;IAAEC;EAAF,CAAJ,KAAqB;IAC7BN,QAAQ,CAACO,IAAT,CAAc;MACZL,QAAQ,EAAG,YADC;MAEZI,QAFY;MAGZH,YAAY,EAAG,yOAHH;MAIZK,YAAY,EAAEd,aAAa,CAACC;IAJhB,CAAd;IAMA,OAAOD,aAAa,CAACC,UAArB;EACD,CAlES;AADR,CADR,EAsEGwB,OAtEH,CAsEW,KAtEX,EAuEGF,OAvEH,CAuEWvB,aAvEX,EAwEGwB,QAxEH,CAwEY,CAACb,CAAD,EAAI;EAAEC;AAAF,CAAJ,KAAqB;EAC7BN,QAAQ,CAACO,IAAT,CAAc;IACZL,QAAQ,EAAE,IADE;IAEZI,QAFY;IAGZH,YAAY,EAAG,qDAHH;IAIZK,YAAY,EAAEd;EAJF,CAAd;EAMA,OAAOA,aAAP;AACD,CAhFH,CADF;;AAmFO,SAAS4B,YAAT,CACLC,UADK,EAELC,WAFK,EAG2B;EAChCxB,QAAQ,GAAG,EAAX;EACA,MAAM;IAAEyB;EAAF,IAAYhB,oBAAoB,CAACiB,QAArB,CAA8BH,UAA9B,CAAlB;;EAEA,IAAIvB,QAAQ,CAAC2B,MAAb,EAAqB;IACnB,KAAK,MAAMC,OAAX,IAAsB5B,QAAtB,EAAgC;MAC9B6B,iBAAA,CAASC,IAAT,CACG,GACCF,OAAO,CAAC1B,QAAR,GACK,KAAI0B,OAAO,CAAC1B,QAAS,gCAD1B,GAEK,iBACN,SACCsB,WAAW,CAACO,wBACb,6CACCH,OAAO,CAACzB,YACT,eAAc6B,IAAI,CAACC,SAAL,CACbL,OAAO,CAACtB,QADK,CAEb,yBAAwB0B,IAAI,CAACC,SAAL,CACxBL,OAAO,CAACpB,YADgB,EAExB,IAFwB,EAGxB,CAHwB,CAIxB,EAfJ;IAiBD;EACF;;EAED,OAAOiB,KAAP;AACD"}