{"version":3,"file":"resolvers.js","names":["getMaybeResolvedValue","node","field","nodeInterfaceName","fieldPathNeedToResolve","selector","type","getValueAt","getResolvedFields","findOne","typeName","findOneResolver","_source","args","context","info","stats","totalRunQuery","nodeModel","query","filter","schema","getType","tracer","path","findManyPaginated","findManyPaginatedResolver","group","getProjectedField","distinct","max","min","sum","skip","Math","limit","undefined","extendedArgs","totalPluralRunQuery","result","findAll","connectionType","paginate","resultOffset","createDistinctResolver","distinctResolver","source","edges","values","Set","forEach","value","Array","isArray","subValue","add","Date","toISOString","from","sort","createMinResolver","minResolver","Number","MAX_SAFE_INTEGER","isNaN","createMaxResolver","maxResolver","MIN_SAFE_INTEGER","createSumResolver","sumResolver","reduce","prev","createGroupResolver","groupResolver","groupedResults","acc","key","concat","Object","create","keys","fieldValue","entries","push","GatsbyIterable","totalCount","length","results","params","Error","allItems","start","items","slice","pageCount","count","ceil","currentPage","hasPreviousPage","hasNextPage","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","then","linkResolverValue","returnType","getNullableType","getNamedType","getNodesByIds","ids","getNodeById","id","runQueryArgs","split","reduceRight","obj","in","eq","firstOnly","GraphQLList","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","normalize","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","isObjectType","isInterfaceType","getFields","fieldArg","arg","name","fieldEnum","isEnumType","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","pathToArray","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","time","createResolverActivity","parentType","telemetryResolverTimings","process","hrtime","bigint","endActivity","duration","end","isTracingResolver","defaultResolver"],"sources":["../../src/schema/resolvers.ts"],"sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { IQueryResult } from \"../datastore/types\"\nimport { GatsbyIterable } from \"../datastore/common/iterable\"\nimport { getResolvedFields, fieldPathNeedToResolve } from \"./utils\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\nfunction getMaybeResolvedValue(\n  node: IGatsbyNode,\n  field: string,\n  nodeInterfaceName: string\n): any {\n  if (\n    fieldPathNeedToResolve({\n      selector: field,\n      type: nodeInterfaceName,\n    })\n  ) {\n    return getValueAt(getResolvedFields(node) as Record<string, unknown>, field)\n  } else {\n    return getValueAt(node, field)\n  }\n}\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.findOne(\n      {\n        query: { filter: args },\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number }\n\nexport function findManyPaginated<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    _source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<IGatsbyNode>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const max = getProjectedField(info, `max`)\n    const min = getProjectedField(info, `min`)\n    const sum = getProjectedField(info, `sum`)\n\n    // Apply paddings for pagination\n    // (for previous/next node and also to detect if there is a previous/next page)\n    const skip = typeof args.skip === `number` ? Math.max(0, args.skip - 1) : 0\n    const limit = typeof args.limit === `number` ? args.limit + 2 : undefined\n\n    const extendedArgs = {\n      ...args,\n      group: group || [],\n      distinct: distinct || [],\n      max: max || [],\n      min: min || [],\n      sum: sum || [],\n      skip,\n      limit,\n    }\n    // Note: stats are passed to telemetry in src/commands/build.ts\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n    const result = await context.nodeModel.findAll(\n      {\n        query: extendedArgs,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n    return paginate(result, {\n      resultOffset: skip,\n      skip: args.skip,\n      limit: args.limit,\n    })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string\n}\n\nexport function createDistinctResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function distinctResolver(source, args): Array<string> {\n    const { field } = args\n    const { edges } = source\n\n    const values = new Set<string>()\n    edges.forEach(({ node }) => {\n      const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (value === null || value === undefined) {\n        return\n      }\n      if (Array.isArray(value)) {\n        value.forEach(subValue =>\n          values.add(\n            subValue instanceof Date ? subValue.toISOString() : subValue\n          )\n        )\n      } else if (value instanceof Date) {\n        values.add(value.toISOString())\n      } else {\n        values.add(value)\n      }\n    })\n    return Array.from(values).sort()\n  }\n}\n\nexport function createMinResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function minResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let min = Number.MAX_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value < min) {\n        min = value\n      }\n    })\n    if (min === Number.MAX_SAFE_INTEGER) {\n      return null\n    }\n    return min\n  }\n}\n\nexport function createMaxResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function maxResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let max = Number.MIN_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value > max) {\n        max = value\n      }\n    })\n    if (max === Number.MIN_SAFE_INTEGER) {\n      return null\n    }\n    return max\n  }\n}\n\nexport function createSumResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function sumResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    return edges.reduce<number | null>((prev, { node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value)) {\n        return (prev || 0) + value\n      }\n      return prev\n    }, null)\n  }\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport function createGroupResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  PaginatedArgs<IFieldConnectionArgs>\n> {\n  return function groupResolver(\n    source,\n    args\n  ): IGatsbyGroupReturnValue<IGatsbyNode> {\n    const { field } = args\n    const { edges } = source\n    const groupedResults: Record<string, Array<IGatsbyNode>> = edges.reduce(\n      (acc, { node }) => {\n        const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n        const values = Array.isArray(value) ? value : [value]\n        values\n          .filter(value => value != null)\n          .forEach(value => {\n            const key = value instanceof Date ? value.toISOString() : value\n            acc[key] = (acc[key] || []).concat(node)\n          })\n        return acc\n        // Note: using Object.create on purpose:\n        //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n        //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n      },\n      Object.create(null)\n    )\n\n    return Object.keys(groupedResults)\n      .sort()\n      .reduce(\n        (acc: IGatsbyGroupReturnValue<IGatsbyNode>, fieldValue: string) => {\n          const entries = groupedResults[fieldValue] || []\n          acc.push({\n            ...paginate(\n              {\n                entries: new GatsbyIterable(entries),\n                totalCount: async () => entries.length,\n              },\n              args\n            ),\n            field,\n            fieldValue,\n          })\n          return acc\n        },\n        []\n      )\n  }\n}\n\nexport function paginate(\n  results: IQueryResult,\n  params: { skip?: number; limit?: number; resultOffset?: number }\n): IGatsbyConnection<IGatsbyNode> {\n  const { resultOffset = 0, skip = 0, limit } = params\n  if (resultOffset > skip) {\n    throw new Error(\"Result offset cannot be greater than `skip` argument\")\n  }\n  const allItems = Array.from(results.entries)\n\n  const start = skip - resultOffset\n  const items = allItems.slice(start, limit && start + limit)\n\n  const totalCount = results.totalCount\n  const pageCount = async (): Promise<number> => {\n    const count = await totalCount()\n    return limit\n      ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n      : skip\n      ? 2\n      : 1\n  }\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = limit ? allItems.length - start > limit : false\n\n  return {\n    totalCount,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: boolean\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, type: type },\n          { path: context.path }\n        )\n      } else {\n        return context.nodeModel.getNodeById(\n          { id: fieldValue, type: type },\n          { path: context.path }\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    if (firstOnly) {\n      return context.nodeModel\n        .findOne(\n          {\n            query: runQueryArgs,\n            type,\n            stats: context.stats,\n            tracer: context.tracer,\n          },\n          { path: context.path }\n        )\n        .then(result => linkResolverQueryResult(fieldValue, result, returnType))\n    }\n\n    return context.nodeModel\n      .findAll(\n        {\n          query: runQueryArgs,\n          type,\n          stats: context.stats,\n          tracer: context.tracer,\n        },\n        { path: context.path }\n      )\n      .then(({ entries }) =>\n        linkResolverQueryResult(fieldValue, Array.from(entries), returnType)\n      )\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(obj => getValueAt(obj, options.by) === value)\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: boolean\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.findOne({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldEnum = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldEnum)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (fieldArg?.value.kind === Kind.ENUM) {\n                const enumKey = fieldArg.value.value\n                const enumValue = fieldEnum.getValue(enumKey)\n                if (enumValue) {\n                  return [...acc, enumValue.value]\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<any, any> =\n  function defaultFieldResolver(source, args, context, info) {\n    if (\n      (typeof source == `object` && source !== null) ||\n      typeof source === `function`\n    ) {\n      if (info.from) {\n        if (info.fromNode) {\n          const node = context.nodeModel.findRootNodeAncestor(source)\n          if (!node) return null\n          return getValueAt(node, info.from)\n        }\n        return getValueAt(source, info.from)\n      }\n      const property = source[info.fieldName]\n      if (typeof property === `function`) {\n        return source[info.fieldName](args, context, info)\n      }\n      return property\n    }\n\n    return null\n  }\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  if (resolver[`isTracingResolver`]) {\n    return resolver\n  }\n\n  const wrappedTracingResolver = function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    let time\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    if (context?.telemetryResolverTimings) {\n      time = process.hrtime.bigint()\n    }\n\n    const result = resolver(parent, args, context, info)\n\n    if (!activity && !time) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (context?.telemetryResolverTimings) {\n        context.telemetryResolverTimings.push({\n          name: `${info.parentType}.${info.fieldName}`,\n          duration: Number(process.hrtime.bigint() - time) / 1000 / 1000,\n        })\n      }\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n\n  wrappedTracingResolver.isTracingResolver = true\n\n  return wrappedTracingResolver\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"mappings":"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"}