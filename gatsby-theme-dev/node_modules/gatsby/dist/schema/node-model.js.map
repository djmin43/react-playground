{"version":3,"file":"node-model.js","names":["_","require","isAbstractType","GraphQLOutputType","GraphQLUnionType","GraphQLList","getNamedType","getNullableType","isCompositeType","invariant","reporter","LocalNodeModel","constructor","schema","schemaComposer","createPageDependency","_rootNodeMap","_trackedRootNodes","createPageDependencyActionCreator","WeakMap","WeakSet","_prepareNodesQueues","_prepareNodesPromises","_preparedNodesCache","Map","replaceFiltersCache","createPageDependencyArgs","connection","nodeTypeNames","toNodeTypeNames","forEach","typeName","map","_filtersCache","withContext","context","ContextualNodeModel","getNodeById","args","pageDependencies","id","type","node","result","includes","internal","trackInlineObjectsInRootNode","wrapNode","trackPageDependencies","getNodesByIds","ids","nodes","Array","isArray","filter","Boolean","length","wrapNodes","getAllNodes","reportOnce","getNodes","nodesByType","getNodesByType","concat","connectionType","name","runQuery","firstOnly","findOne","skip","limit","query","findAll","from","entries","_query","stats","tracer","gqlType","getType","runQueryActivity","eq","Object","keys","phantomActivity","parentSpan","getParentActivity","span","start","nodeFoundById","end","GatsbyIterable","totalCount","materializationActivity","fields","getQueryFields","sort","group","distinct","max","min","sum","fieldsToResolve","determineResolvableFields","nodeTypeName","gqlNodeType","prepareNodes","getDataStore","queryArgs","gqlSchema","gqlComposer","resolvedFields","filtersCache","Error","undefined","first","queryFields","push","Promise","resolve","process","nextTick","_doResolvePrepareNodesQueue","queue","reduce","nextQueryFields","nextFieldsToResolve","merge","actualFieldsToResolve","deepObjectDifference","get","isEmpty","resolvedNodes","iterateNodesByType","resolveRecursive","set","size","saveResolvedNodes","getTypes","has","addRootNodeToInlineObject","Set","add","findRootNodeAncestor","obj","predicate","iterations","parent","trackedParent","isMatchingRoot","error","path","track","isIterable","nodeId","rootNodeModel","nodeModel","_getFullDependencies","getNode","filterFields","dropQueryOperators","sortFields","pathToObject","split","reduceRight","acc","key","value","k","v","isPlainObject","getFields","concreteType","resolveType","gqlFields","fieldName","fieldToResolve","queryField","gqlField","gqlNonNullType","gqlFieldType","innerValue","resolveField","isObject","all","item","pickBy","withResolverContext","arg","defaultValue","returnType","isNestedAndParentNeedsResolve","field","typeComposer","getAnyTC","needsResolve","fieldNeedToResolve","innerResolved","rootNodeMap","data","isNode","each","o","store","dispatch","payload","to","toValue","deepResult","module","exports"],"sources":["../../src/schema/node-model.js"],"sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst {\n  isAbstractType,\n  GraphQLOutputType,\n  GraphQLUnionType,\n  GraphQLList,\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n} = require(`graphql`)\nconst invariant = require(`invariant`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\nimport { store } from \"../redux\"\nimport {\n  getDataStore,\n  getNode,\n  getNodes,\n  getNodesByType,\n  getTypes,\n} from \"../datastore\"\nimport { GatsbyIterable, isIterable } from \"../datastore/common/iterable\"\nimport { reportOnce } from \"../utils/report-once\"\nimport { wrapNode, wrapNodes } from \"../utils/detect-node-mutations\"\nimport { toNodeTypeNames, fieldNeedToResolve } from \"./utils\"\n\ntype TypeOrTypeName = string | GraphQLOutputType\n\n/**\n * Optional page dependency information.\n *\n * @typedef {Object} PageDependencies\n * @property {string} path The path of the page that depends on the retrieved nodes' data\n * @property {string} [connectionType] Mark this dependency as a connection\n */\ninterface PageDependencies {\n  path: string;\n  connectionType?: string;\n}\n\ninterface QueryArguments {\n  type: TypeOrTypeName;\n  query: { filter: Object, sort?: Object };\n  firstOnly?: boolean;\n}\n\nexport interface NodeModel {\n  getNodeById(\n    { id: string, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): any | null;\n  getNodesByIds(\n    { ids: Array<string>, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  getAllNodes(\n    { type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  runQuery(\n    args: QueryArguments,\n    pageDependencies?: PageDependencies\n  ): Promise<any>;\n  getTypes(): Array<string>;\n  trackPageDependencies<nodeOrNodes: Node | Node[]>(\n    result: nodeOrNodes,\n    pageDependencies?: PageDependencies\n  ): nodesOrNodes;\n  findRootNodeAncestor(obj: any, predicate: () => boolean): Node | null;\n  trackInlineObjectsInRootNode(node: Node, sanitize: boolean): Node;\n}\n\nclass LocalNodeModel {\n  constructor({\n    schema,\n    schemaComposer,\n    createPageDependency,\n    _rootNodeMap,\n    _trackedRootNodes,\n  }) {\n    this.schema = schema\n    this.schemaComposer = schemaComposer\n    this.createPageDependencyActionCreator = createPageDependency\n    this._rootNodeMap = _rootNodeMap || new WeakMap()\n    this._trackedRootNodes = _trackedRootNodes || new WeakSet()\n    this._prepareNodesQueues = {}\n    this._prepareNodesPromises = {}\n    this._preparedNodesCache = new Map()\n    this.replaceFiltersCache()\n  }\n\n  createPageDependency(createPageDependencyArgs) {\n    if (createPageDependencyArgs.connection) {\n      const nodeTypeNames = toNodeTypeNames(\n        this.schema,\n        createPageDependencyArgs.connection\n      )\n      if (nodeTypeNames) {\n        nodeTypeNames.forEach(typeName => {\n          this.createPageDependencyActionCreator({\n            ...createPageDependencyArgs,\n            connection: typeName,\n          })\n        })\n        return\n      }\n    }\n\n    this.createPageDependencyActionCreator(createPageDependencyArgs)\n  }\n\n  /**\n   * Replace the cache either with the value passed on (mainly for tests) or\n   * an empty new Map.\n   *\n   * @param {undefined | null | FiltersCache} map\n   *   (This cached is used in redux/nodes.js and caches a set of buckets (Sets)\n   *   of Nodes based on filter and tracks this for each set of types which are\n   *   actually queried. If the filter targets `id` directly, only one Node is\n   *   cached instead of a Set of Nodes. If null, don't create or use a cache.\n   */\n  replaceFiltersCache(map = new Map()) {\n    this._filtersCache = map // See redux/nodes.js for usage\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this, context)\n  }\n\n  /**\n   * Get a node from the store by ID and optional type.\n   *\n   * @param {Object} args\n   * @param {string} args.id ID of the requested node\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {(Node|null)}\n   */\n  getNodeById(args, pageDependencies) {\n    const { id, type } = args || {}\n\n    const node = getNodeById(id)\n\n    let result\n    if (!node) {\n      result = null\n    } else if (!type) {\n      result = node\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodeTypeNames.includes(node.internal.type) ? node : null\n    }\n\n    if (result) {\n      this.trackInlineObjectsInRootNode(node)\n    }\n\n    return wrapNode(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get nodes from the store by IDs and optional type.\n   *\n   * @param {Object} args\n   * @param {string[]} args.ids IDs of the requested nodes\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getNodesByIds(args, pageDependencies) {\n    const { ids, type } = args || {}\n\n    const nodes = Array.isArray(ids)\n      ? ids.map(id => getNodeById(id)).filter(Boolean)\n      : []\n\n    let result\n    if (!nodes.length || !type) {\n      result = nodes\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    return wrapNodes(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type. Note that\n   * this adds connectionType tracking by default if type is passed.\n   *\n   * @deprecated Since version 4.0 - Use nodeModel.findAll() instead\n   * @param {Object} args\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getAllNodes(args, pageDependencies = {}) {\n    // TODO(v5): Remove API\n    reportOnce(\n      `nodeModel.getAllNodes() is deprecated. Use nodeModel.findAll() with an empty query instead.`\n    )\n    const { type = `Node` } = args || {}\n\n    let result\n    if (type === `Node`) {\n      result = getNodes()\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      const nodesByType = nodeTypeNames.map(typeName =>\n        getNodesByType(typeName)\n      )\n      const nodes = [].concat(...nodesByType)\n      result = nodes.filter(Boolean)\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (typeof pageDependencies.connectionType === `undefined`) {\n      pageDependencies.connectionType =\n        typeof type === `string` ? type : type.name\n    }\n\n    return wrapNodes(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get nodes of a type matching the specified query.\n   *\n   * @deprecated Since version 4.0 - Use nodeModel.findAll() or nodeModel.findOne() instead\n   * @param {Object} args\n   * @param {Object} args.query Query arguments (`filter` and `sort`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {boolean} [args.firstOnly] If true, return only first match\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node[]>}\n   */\n  async runQuery(args, pageDependencies = {}) {\n    // TODO(v5): Remove API\n    reportOnce(\n      `nodeModel.runQuery() is deprecated. Use nodeModel.findAll() or nodeModel.findOne() instead.`\n    )\n    if (args.firstOnly) {\n      return this.findOne(args, pageDependencies)\n    }\n    const { skip, limit, ...query } = args.query\n    const result = await this.findAll({ ...args, query }, pageDependencies)\n    return Array.from(result.entries)\n  }\n\n  async _query(args) {\n    const { query = {}, type, stats, tracer } = args || {}\n\n    // We don't support querying union types (yet?), because the combined types\n    // need not have any fields in common.\n    const gqlType = typeof type === `string` ? this.schema.getType(type) : type\n    invariant(\n      !(gqlType instanceof GraphQLUnionType),\n      `Querying GraphQLUnion types is not supported.`\n    )\n\n    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)\n\n    let runQueryActivity\n\n    // check if we can get node by id and skip\n    // more expensive query pipeline\n    if (\n      typeof query?.filter?.id?.eq !== `undefined` &&\n      Object.keys(query.filter).length === 1 &&\n      Object.keys(query.filter.id).length === 1\n    ) {\n      if (tracer) {\n        runQueryActivity = reporter.phantomActivity(`runQuerySimpleIdEq`, {\n          parentSpan: tracer.getParentActivity().span,\n        })\n        runQueryActivity.start()\n      }\n      const nodeFoundById = this.getNodeById({\n        id: query.filter.id.eq,\n        type: gqlType,\n      })\n\n      if (runQueryActivity) {\n        runQueryActivity.end()\n      }\n\n      return {\n        gqlType,\n        entries: new GatsbyIterable(nodeFoundById ? [nodeFoundById] : []),\n        totalCount: async () => (nodeFoundById ? 1 : 0),\n      }\n    }\n\n    let materializationActivity\n    if (tracer) {\n      materializationActivity = reporter.phantomActivity(`Materialization`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      materializationActivity.start()\n    }\n    const fields = getQueryFields({\n      filter: query.filter,\n      sort: query.sort,\n      group: query.group,\n      distinct: query.distinct,\n      max: query.max,\n      min: query.min,\n      sum: query.sum,\n    })\n\n    const fieldsToResolve = determineResolvableFields(\n      this.schemaComposer,\n      this.schema,\n      gqlType,\n      fields\n    )\n\n    for (const nodeTypeName of nodeTypeNames) {\n      const gqlNodeType = this.schema.getType(nodeTypeName)\n      await this.prepareNodes(gqlNodeType, fields, fieldsToResolve)\n    }\n\n    if (materializationActivity) {\n      materializationActivity.end()\n    }\n\n    if (tracer) {\n      runQueryActivity = reporter.phantomActivity(`runQuery`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      runQueryActivity.start()\n    }\n\n    const { entries, totalCount } = await getDataStore().runQuery({\n      queryArgs: query,\n      gqlSchema: this.schema,\n      gqlComposer: this.schemaComposer,\n      gqlType,\n      resolvedFields: fieldsToResolve,\n      nodeTypeNames,\n      filtersCache: this._filtersCache,\n      stats,\n    })\n\n    if (runQueryActivity) {\n      runQueryActivity.end()\n    }\n\n    return {\n      gqlType,\n      entries: entries.map(node => {\n        // With GatsbyIterable it happens lazily as we iterate\n        this.trackInlineObjectsInRootNode(node)\n        return node\n      }),\n      totalCount,\n    }\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type (optionally with limit/skip).\n   * Returns slice of result as iterable and total count of nodes.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `limit` and `skip`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @return {Promise<Object>} Object containing `{ entries: GatsbyIterable, totalCount: () => Promise<number> }`\n   */\n  async findAll(args, pageDependencies = {}) {\n    const { gqlType, ...result } = await this._query(args, pageDependencies)\n\n    // Tracking connections by default:\n    if (typeof pageDependencies.connectionType === `undefined`) {\n      pageDependencies.connectionType = gqlType.name\n    }\n    this.trackPageDependencies(result.entries, pageDependencies)\n    return {\n      entries: wrapNodes(result.entries),\n      totalCount: result.totalCount,\n    }\n  }\n\n  /**\n   * Get one node in the store. Only returns the first result.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `filter`). Doesn't support `sort`, `limit`, `skip`.\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node>}\n   */\n  async findOne(args, pageDependencies = {}) {\n    const { query = {} } = args\n    if (query.sort?.fields?.length > 0) {\n      // If we support sorting and return the first node based on sorting\n      // we'll have to always track connection not an individual node\n      throw new Error(\n        `nodeModel.findOne() does not support sorting. Use nodeModel.findAll({ query: { limit: 1 } }) instead.`\n      )\n    }\n    const { gqlType, entries } = await this._query({\n      ...args,\n      query: { ...query, skip: 0, limit: 1, sort: undefined },\n    })\n    const result = Array.from(entries)\n    const first = result[0] ?? null\n\n    if (!first) {\n      // Couldn't find matching node.\n      //  This leads to a state where data tracking for this query gets empty.\n      //  It means we will NEVER re-run this query on any data updates\n      //  (even if a new node matching this query is added at some point).\n      //  To workaround this, we have to add a connection tracking to re-run\n      //  the query whenever any node of this type changes.\n      pageDependencies.connectionType = gqlType.name\n    }\n    return wrapNode(this.trackPageDependencies(first, pageDependencies))\n  }\n\n  prepareNodes(type, queryFields, fieldsToResolve) {\n    const typeName = type.name\n    if (!this._prepareNodesQueues[typeName]) {\n      this._prepareNodesQueues[typeName] = []\n    }\n\n    this._prepareNodesQueues[typeName].push({\n      queryFields,\n      fieldsToResolve,\n    })\n\n    if (!this._prepareNodesPromises[typeName]) {\n      this._prepareNodesPromises[typeName] = new Promise(resolve => {\n        process.nextTick(async () => {\n          await this._doResolvePrepareNodesQueue(type)\n          resolve()\n        })\n      })\n    }\n\n    return this._prepareNodesPromises[typeName]\n  }\n\n  async _doResolvePrepareNodesQueue(type) {\n    const typeName = type.name\n    const queue = this._prepareNodesQueues[typeName]\n    this._prepareNodesQueues[typeName] = []\n    this._prepareNodesPromises[typeName] = null\n\n    const { queryFields, fieldsToResolve } = queue.reduce(\n      (\n        { queryFields, fieldsToResolve },\n        { queryFields: nextQueryFields, fieldsToResolve: nextFieldsToResolve }\n      ) => {\n        return {\n          queryFields: _.merge(queryFields, nextQueryFields),\n          fieldsToResolve: _.merge(fieldsToResolve, nextFieldsToResolve),\n        }\n      },\n      {\n        queryFields: {},\n        fieldsToResolve: {},\n      }\n    )\n\n    const actualFieldsToResolve = deepObjectDifference(\n      fieldsToResolve,\n      this._preparedNodesCache.get(typeName) || {}\n    )\n\n    if (!_.isEmpty(actualFieldsToResolve)) {\n      const resolvedNodes = new Map()\n      for (const node of getDataStore().iterateNodesByType(typeName)) {\n        this.trackInlineObjectsInRootNode(node)\n        const resolvedFields = await resolveRecursive(\n          this,\n          this.schemaComposer,\n          this.schema,\n          node,\n          type,\n          queryFields,\n          actualFieldsToResolve\n        )\n\n        resolvedNodes.set(node.id, resolvedFields)\n      }\n      if (resolvedNodes.size) {\n        await saveResolvedNodes(typeName, resolvedNodes)\n      }\n      this._preparedNodesCache.set(\n        typeName,\n        _.merge(\n          {},\n          this._preparedNodesCache.get(typeName) || {},\n          actualFieldsToResolve\n        )\n      )\n    }\n  }\n\n  /**\n   * Get the names of all node types in the store.\n   *\n   * @returns {string[]}\n   */\n  getTypes() {\n    return getTypes()\n  }\n\n  /**\n   * Adds link between inline objects/arrays contained in Node object\n   * and that Node object.\n   * @param {Node} node Root Node\n   */\n  trackInlineObjectsInRootNode(node) {\n    if (!this._trackedRootNodes.has(node)) {\n      addRootNodeToInlineObject(\n        this._rootNodeMap,\n        node,\n        node.id,\n        true,\n        new Set()\n      )\n      this._trackedRootNodes.add(node)\n    }\n  }\n\n  /**\n   * Finds top most ancestor of node that contains passed Object or Array\n   * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n   * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n   * @returns {Node} Top most ancestor if predicate is not specified\n   * or first node that meet predicate conditions if predicate is specified\n   */\n  findRootNodeAncestor(obj, predicate = null) {\n    let iterations = 0\n    let node = obj\n\n    while (iterations++ < 100) {\n      if (predicate && predicate(node)) return node\n\n      const parent = getNodeById(node.parent)\n      const id = this._rootNodeMap.get(node)\n      const trackedParent = getNodeById(id)\n\n      if (!parent && !trackedParent) {\n        const isMatchingRoot = !predicate || predicate(node)\n        return isMatchingRoot ? node : null\n      }\n\n      node = parent || trackedParent\n    }\n\n    reporter.error(\n      `It looks like you have a node that's set its parent as itself:\\n\\n` +\n        node\n    )\n    return null\n  }\n\n  /**\n   * Given a result, that's either a single node or an array of them, track them\n   * using pageDependencies. Defaults to tracking according to current resolver\n   * path. Returns the result back.\n   *\n   * @param {Node | Node[]} result\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node | Node[]}\n   */\n  trackPageDependencies(result, pageDependencies = {}) {\n    const { path, connectionType, track = true } = pageDependencies\n    if (path && track) {\n      if (connectionType) {\n        this.createPageDependency({ path, connection: connectionType })\n      } else {\n        const nodes = isIterable(result) ? result : [result]\n        for (const node of nodes) {\n          if (node) {\n            this.createPageDependency({ path, nodeId: node.id })\n          }\n        }\n      }\n    }\n\n    return result\n  }\n}\n\nclass ContextualNodeModel {\n  constructor(rootNodeModel, context) {\n    this.nodeModel = rootNodeModel\n    this.context = context\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this.nodeModel, {\n      ...this.context,\n      ...context,\n    })\n  }\n\n  _getFullDependencies(pageDependencies) {\n    return {\n      path: this.context.path,\n      ...(pageDependencies || {}),\n    }\n  }\n\n  getNodeById(args, pageDependencies) {\n    return this.nodeModel.getNodeById(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getNodesByIds(args, pageDependencies) {\n    return this.nodeModel.getNodesByIds(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getAllNodes(args, pageDependencies) {\n    return this.nodeModel.getAllNodes(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  runQuery(args, pageDependencies) {\n    return this.nodeModel.runQuery(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findOne(args, pageDependencies) {\n    return this.nodeModel.findOne(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findAll(args, pageDependencies) {\n    return this.nodeModel.findAll(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  prepareNodes(...args) {\n    return this.nodeModel.prepareNodes(...args)\n  }\n\n  getTypes(...args) {\n    return this.nodeModel.getTypes(...args)\n  }\n\n  trackInlineObjectsInRootNode(...args) {\n    return this.nodeModel.trackInlineObjectsInRootNode(...args)\n  }\n\n  findRootNodeAncestor(...args) {\n    return this.nodeModel.findRootNodeAncestor(...args)\n  }\n\n  createPageDependency(...args) {\n    return this.nodeModel.createPageDependency(...args)\n  }\n\n  trackPageDependencies(result, pageDependencies) {\n    return this.nodeModel.trackPageDependencies(\n      result,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n}\n\nconst getNodeById = id => (id != null ? getNode(id) : null)\n\nconst getQueryFields = ({ filter, sort, group, distinct, max, min, sum }) => {\n  const filterFields = filter ? dropQueryOperators(filter) : {}\n  const sortFields = (sort && sort.fields) || []\n\n  if (group && !Array.isArray(group)) {\n    group = [group]\n  } else if (group == null) {\n    group = []\n  }\n\n  if (distinct && !Array.isArray(distinct)) {\n    distinct = [distinct]\n  } else if (distinct == null) {\n    distinct = []\n  }\n\n  if (max && !Array.isArray(max)) {\n    max = [max]\n  } else if (max == null) {\n    max = []\n  }\n\n  if (min && !Array.isArray(min)) {\n    min = [min]\n  } else if (min == null) {\n    min = []\n  }\n\n  if (sum && !Array.isArray(sum)) {\n    sum = [sum]\n  } else if (sum == null) {\n    sum = []\n  }\n\n  return _.merge(\n    filterFields,\n    ...sortFields.map(pathToObject),\n    ...group.map(pathToObject),\n    ...distinct.map(pathToObject),\n    ...max.map(pathToObject),\n    ...min.map(pathToObject),\n    ...sum.map(pathToObject)\n  )\n}\n\nconst pathToObject = path => {\n  if (path && typeof path === `string`) {\n    return path.split(`.`).reduceRight((acc, key) => {\n      return { [key]: acc }\n    }, true)\n  }\n  return {}\n}\n\nconst dropQueryOperators = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    const k = Object.keys(value)[0]\n    const v = value[k]\n    if (_.isPlainObject(value) && _.isPlainObject(v)) {\n      acc[key] =\n        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)\n    } else {\n      acc[key] = true\n    }\n    return acc\n  }, {})\n\nconst getFields = (schema, type, node) => {\n  if (!isAbstractType(type)) {\n    return type.getFields()\n  }\n\n  const concreteType = type.resolveType(node)\n  return schema.getType(concreteType).getFields()\n}\n\nasync function resolveRecursive(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  type,\n  queryFields,\n  fieldsToResolve\n) {\n  const gqlFields = getFields(schema, type, node)\n  const resolvedFields = {}\n  for (const fieldName of Object.keys(fieldsToResolve)) {\n    const fieldToResolve = fieldsToResolve[fieldName]\n    const queryField = queryFields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlNonNullType = getNullableType(gqlField.type)\n    const gqlFieldType = getNamedType(gqlField.type)\n    let innerValue = await resolveField(\n      nodeModel,\n      schemaComposer,\n      schema,\n      node,\n      gqlField,\n      fieldName\n    )\n    if (gqlField && innerValue != null) {\n      if (\n        isCompositeType(gqlFieldType) &&\n        !(gqlNonNullType instanceof GraphQLList)\n      ) {\n        innerValue = await resolveRecursive(\n          nodeModel,\n          schemaComposer,\n          schema,\n          innerValue,\n          gqlFieldType,\n          queryField,\n          _.isObject(fieldToResolve) ? fieldToResolve : queryField\n        )\n      } else if (\n        isCompositeType(gqlFieldType) &&\n        (_.isArray(innerValue) || innerValue instanceof GatsbyIterable) &&\n        gqlNonNullType instanceof GraphQLList\n      ) {\n        innerValue = await Promise.all(\n          innerValue.map(item =>\n            item == null\n              ? item\n              : resolveRecursive(\n                  nodeModel,\n                  schemaComposer,\n                  schema,\n                  item,\n                  gqlFieldType,\n                  queryField,\n                  _.isObject(fieldToResolve) ? fieldToResolve : queryField\n                )\n          )\n        )\n      }\n    }\n    if (innerValue != null) {\n      resolvedFields[fieldName] = innerValue\n    }\n  }\n\n  for (const fieldName of Object.keys(queryFields)) {\n    if (!fieldsToResolve[fieldName] && node[fieldName]) {\n      // It is possible that this field still has a custom resolver\n      // See https://github.com/gatsbyjs/gatsby/issues/27368\n      resolvedFields[fieldName] = await resolveField(\n        nodeModel,\n        schemaComposer,\n        schema,\n        node,\n        gqlFields[fieldName],\n        fieldName\n      )\n    }\n  }\n\n  return _.pickBy(resolvedFields, (value, key) => queryFields[key])\n}\nlet withResolverContext\nfunction resolveField(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  gqlField,\n  fieldName\n) {\n  if (!gqlField?.resolve) {\n    return node[fieldName]\n  }\n\n  // We require this inline as there's a circular dependency from context back to this file.\n  // https://github.com/gatsbyjs/gatsby/blob/9d33b107d167e3e9e2aa282924a0c409f6afd5a0/packages/gatsby/src/schema/context.ts#L5\n  if (!withResolverContext) {\n    withResolverContext = require(`./context`)\n  }\n\n  return gqlField.resolve(\n    node,\n    gqlField.args.reduce((acc, arg) => {\n      acc[arg.name] = arg.defaultValue\n      return acc\n    }, {}),\n    withResolverContext({\n      schema,\n      schemaComposer,\n      nodeModel,\n    }),\n    {\n      fieldName,\n      schema,\n      returnType: gqlField.type,\n    }\n  )\n}\n\nconst determineResolvableFields = (\n  schemaComposer,\n  schema,\n  type,\n  fields,\n  isNestedAndParentNeedsResolve = false\n) => {\n  const fieldsToResolve = {}\n  const gqlFields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlFieldType = getNamedType(gqlField.type)\n    const typeComposer = schemaComposer.getAnyTC(type.name)\n\n    const needsResolve = fieldNeedToResolve({\n      schema,\n      gqlType: type,\n      typeComposer,\n      schemaComposer,\n      fieldName,\n    })\n\n    if (_.isObject(field) && gqlField) {\n      const innerResolved = determineResolvableFields(\n        schemaComposer,\n        schema,\n        gqlFieldType,\n        field,\n        isNestedAndParentNeedsResolve || needsResolve\n      )\n      if (!_.isEmpty(innerResolved)) {\n        fieldsToResolve[fieldName] = innerResolved\n      }\n    }\n\n    if (!fieldsToResolve[fieldName] && needsResolve) {\n      fieldsToResolve[fieldName] = true\n    }\n    if (!fieldsToResolve[fieldName] && isNestedAndParentNeedsResolve) {\n      // If parent field needs to be resolved - all nested fields should be added as well\n      // See https://github.com/gatsbyjs/gatsby/issues/26056\n      fieldsToResolve[fieldName] = true\n    }\n  })\n  return fieldsToResolve\n}\n\nconst addRootNodeToInlineObject = (\n  rootNodeMap,\n  data,\n  nodeId,\n  isNode /* : boolean */,\n  path /* : Set<mixed> */\n) /* : void */ => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return\n    path.add(data)\n\n    _.each(data, (o, key) => {\n      if (!isNode || key !== `internal`) {\n        addRootNodeToInlineObject(rootNodeMap, o, nodeId, false, path)\n      }\n    })\n\n    // don't need to track node itself\n    if (!isNode) {\n      rootNodeMap.set(data, nodeId)\n    }\n  }\n}\n\nconst saveResolvedNodes = (typeName, resolvedNodes) => {\n  store.dispatch({\n    type: `SET_RESOLVED_NODES`,\n    payload: {\n      key: typeName,\n      nodes: resolvedNodes,\n    },\n  })\n}\n\nconst deepObjectDifference = (from, to) => {\n  const result = {}\n  Object.keys(from).forEach(key => {\n    const toValue = to[key]\n    if (toValue) {\n      if (_.isPlainObject(toValue)) {\n        const deepResult = deepObjectDifference(from[key], toValue)\n        if (!_.isEmpty(deepResult)) {\n          result[key] = deepResult\n        }\n      }\n    } else {\n      result[key] = from[key]\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  LocalNodeModel,\n}\n"],"mappings":"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"}