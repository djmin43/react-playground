{"version":3,"file":"print-plugins.js","names":["schemaCustomizationAPIs","Set","excludePlugins","includePlugins","schemaCustomizationPluginsPath","process","cwd","printQueryEnginePlugins","fs","remove","e","writeFile","renderQueryEnginePlugins","flattenedPlugins","store","getState","usedPlugins","filter","p","has","name","nodeAPIs","some","api","usedSubPlugins","findSubPlugins","render","relativePluginPath","resolve","slash","path","relative","dirname","uniqGatsbyNode","uniq","uniqSubPlugins","sanitizedUsedPlugins","map","plugin","pluginFilepath","subPluginPaths","undefined","pluginsWithWorkers","filterPluginsWithWorkers","subPluginModuleToImportNameMapping","Map","imports","i","importName","set","modulePath","gatsbyNodeExports","gatsbyWorkerExports","output","join","JSON","stringify","pluginOptions","value","module","subPlugin","get","replace","plugins","Boolean","requireGatsbyPlugin","err","getSubpluginsByPluginPath","parentPlugin","segments","split","roots","segment","flat","root","allFlattenedPlugins","usedSubPluginResolves","flatMap","subPlugins","subPluginPath","push","Array","from","values"],"sources":["../../../src/schema/graphql-engine/print-plugins.ts"],"sourcesContent":["/* eslint @typescript-eslint/no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }] */\nimport * as fs from \"fs-extra\"\nimport * as path from \"path\"\nimport * as _ from \"lodash\"\nimport { slash } from \"gatsby-core-utils\"\nimport { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport { requireGatsbyPlugin } from \"../../utils/require-gatsby-plugin\"\n\nexport const schemaCustomizationAPIs = new Set([\n  `setFieldsOnGraphQLNodeType`,\n  `createSchemaCustomization`,\n  `createResolvers`,\n])\n\nconst excludePlugins = new Set([`internal-data-bridge`])\nconst includePlugins = new Set([`gatsby-plugin-sharp`])\n\n// Emit file that imports required node APIs\nconst schemaCustomizationPluginsPath =\n  process.cwd() + `/.cache/query-engine-plugins.js`\n\nexport async function printQueryEnginePlugins(): Promise<void> {\n  try {\n    await fs.remove(schemaCustomizationPluginsPath)\n  } catch (e) {\n    // no-op\n  }\n  return await fs.writeFile(\n    schemaCustomizationPluginsPath,\n    renderQueryEnginePlugins()\n  )\n}\n\nfunction renderQueryEnginePlugins(): string {\n  const { flattenedPlugins } = store.getState()\n  const usedPlugins = flattenedPlugins.filter(\n    p =>\n      includePlugins.has(p.name) ||\n      (!excludePlugins.has(p.name) &&\n        p.nodeAPIs.some(api => schemaCustomizationAPIs.has(api)))\n  )\n  const usedSubPlugins = findSubPlugins(usedPlugins, flattenedPlugins)\n  return render(usedPlugins, usedSubPlugins)\n}\n\nfunction relativePluginPath(resolve: string): string {\n  return slash(\n    path.relative(path.dirname(schemaCustomizationPluginsPath), resolve)\n  )\n}\n\nfunction render(\n  usedPlugins: IGatsbyState[\"flattenedPlugins\"],\n  usedSubPlugins: IGatsbyState[\"flattenedPlugins\"]\n): string {\n  const uniqGatsbyNode = uniq(usedPlugins)\n  const uniqSubPlugins = uniq(usedSubPlugins)\n\n  const sanitizedUsedPlugins = usedPlugins.map(plugin => {\n    // TODO: We don't support functions in pluginOptions here\n    return {\n      ...plugin,\n      resolve: ``,\n      pluginFilepath: ``,\n      subPluginPaths: undefined,\n    }\n  })\n\n  const pluginsWithWorkers = filterPluginsWithWorkers(uniqGatsbyNode)\n\n  const subPluginModuleToImportNameMapping = new Map<string, string>()\n  const imports: Array<string> = [\n    ...uniqGatsbyNode.map(\n      (plugin, i) =>\n        `import * as pluginGatsbyNode${i} from \"${relativePluginPath(\n          plugin.resolve\n        )}/gatsby-node\"`\n    ),\n    ...pluginsWithWorkers.map(\n      (plugin, i) =>\n        `import * as pluginGatsbyWorker${i} from \"${relativePluginPath(\n          plugin.resolve\n        )}/gatsby-worker\"`\n    ),\n    ...uniqSubPlugins.map((plugin, i) => {\n      const importName = `subPlugin${i}`\n      subPluginModuleToImportNameMapping.set(plugin.modulePath!, importName)\n      return `import * as ${importName} from \"${relativePluginPath(\n        plugin.modulePath!\n      )}\"`\n    }),\n  ]\n  const gatsbyNodeExports = uniqGatsbyNode.map(\n    (plugin, i) => `\"${plugin.name}\": pluginGatsbyNode${i},`\n  )\n  const gatsbyWorkerExports = pluginsWithWorkers.map(\n    (plugin, i) => `\"${plugin.name}\": pluginGatsbyWorker${i},`\n  )\n  const output = `\n${imports.join(`\\n`)}\n\nexport const gatsbyNodes = {\n${gatsbyNodeExports.join(`\\n`)}\n}\n\nexport const gatsbyWorkers = {\n${gatsbyWorkerExports.join(`\\n`)}\n}\n\nexport const flattenedPlugins =\n  ${JSON.stringify(\n    sanitizedUsedPlugins.map(plugin => {\n      return {\n        ...plugin,\n        pluginOptions: _.cloneDeepWith(\n          plugin.pluginOptions,\n          (value: any): any => {\n            if (\n              typeof value === `object` &&\n              value !== null &&\n              value.module &&\n              value.modulePath\n            ) {\n              const { module, modulePath, ...subPlugin } = value\n              return {\n                ...subPlugin,\n                module: `_SKIP_START_${subPluginModuleToImportNameMapping.get(\n                  modulePath\n                )}_SKIP_END_`,\n                resolve: ``,\n                pluginFilepath: ``,\n              }\n            }\n            return undefined\n          }\n        ),\n      }\n    }),\n    null,\n    2\n  ).replace(/\"_SKIP_START_|_SKIP_END_\"/g, ``)}\n`\n  return output\n}\n\nfunction filterPluginsWithWorkers(\n  plugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  return plugins.filter(plugin => {\n    try {\n      return Boolean(requireGatsbyPlugin(plugin, `gatsby-worker`))\n    } catch (err) {\n      return false\n    }\n  })\n}\n\ntype ArrayElement<ArrayType extends Array<unknown>> = ArrayType extends Array<\n  infer ElementType\n>\n  ? ElementType\n  : never\n\nfunction getSubpluginsByPluginPath(\n  parentPlugin: ArrayElement<IGatsbyState[\"flattenedPlugins\"]>,\n  path: string\n): IGatsbyState[\"flattenedPlugins\"] {\n  const segments = path.split(`.`)\n  let roots: Array<any> = [parentPlugin.pluginOptions]\n\n  for (const segment of segments) {\n    if (segment === `[]`) {\n      roots = roots.flat()\n    } else {\n      roots = roots.map(root => root[segment])\n    }\n  }\n  roots = roots.flat()\n\n  return roots\n}\n\nfunction findSubPlugins(\n  plugins: IGatsbyState[\"flattenedPlugins\"],\n  allFlattenedPlugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  const usedSubPluginResolves = new Set<string>(\n    plugins\n      .flatMap(plugin => {\n        if (plugin.subPluginPaths) {\n          const subPlugins: IGatsbyState[\"flattenedPlugins\"] = []\n          for (const subPluginPath of plugin.subPluginPaths) {\n            subPlugins.push(...getSubpluginsByPluginPath(plugin, subPluginPath))\n          }\n          return subPlugins\n        }\n\n        return []\n      })\n      .map(plugin => plugin[`resolve`])\n      .filter((p: unknown): p is string => typeof p === `string`)\n  )\n  return allFlattenedPlugins.filter(\n    p => usedSubPluginResolves.has(p.resolve) && !!p.modulePath\n  )\n}\n\nfunction uniq(\n  plugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  return Array.from(new Map(plugins.map(p => [p.resolve, p])).values())\n}\n"],"mappings":"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"}