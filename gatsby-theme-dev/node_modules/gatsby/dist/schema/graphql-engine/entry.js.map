{"version":3,"file":"entry.js","names":["tracerReadyPromise","initTracer","process","env","GATSBY_OPEN_TRACING_CONFIG_FILE","GraphQLEngine","constructor","dbPath","setupLmdbStore","getRunner","_doGetRunner","wrapActivity","reporter","phantomActivity","start","store","dispatch","actions","createTypes","SCHEMA_SNAPSHOT","type","payload","flattenedPlugins","pluginName","Object","keys","gatsbyNodes","setGatsbyPluginCache","name","resolve","gatsbyWorkers","apiRunnerNode","parentSpan","span","build","fullMetadataBuild","GraphQLRunner","end","runnerPromise","ready","runQuery","query","context","opts","engineContext","requestId","uuid","v4","doRunQuery","queryName","undefined","gettingRunnerActivity","graphqlRunner","result","waitingForJobsCreatedByCurrentRequestActivity","waitJobsByRequest","runWithEngineContext","findPageByPath","pathName","state","pages","get","getDataStore","getNode","values","iterateNodesByType"],"sources":["../../../src/schema/graphql-engine/entry.ts"],"sourcesContent":["// \"engines-fs-provider\" must be first import, as it sets up global\n// fs and this need to happen before anything else tries to import fs\nimport \"../../utils/engines-fs-provider\"\n\nimport { ExecutionResult, Source } from \"graphql\"\nimport { uuid } from \"gatsby-core-utils\"\nimport { build } from \"../index\"\nimport { setupLmdbStore } from \"../../datastore/lmdb/lmdb-datastore\"\nimport { store } from \"../../redux\"\nimport { actions } from \"../../redux/actions\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { GraphQLRunner, IQueryOptions } from \"../../query/graphql-runner\"\nimport { waitJobsByRequest } from \"../../utils/wait-until-jobs-complete\"\nimport { setGatsbyPluginCache } from \"../../utils/require-gatsby-plugin\"\nimport apiRunnerNode from \"../../utils/api-runner-node\"\nimport type { IGatsbyPage, IGatsbyState } from \"../../redux/types\"\nimport { findPageByPath } from \"../../utils/find-page-by-path\"\nimport { runWithEngineContext } from \"../../utils/engine-context\"\nimport { getDataStore } from \"../../datastore\"\nimport {\n  gatsbyNodes,\n  gatsbyWorkers,\n  flattenedPlugins,\n  // @ts-ignore\n} from \".cache/query-engine-plugins\"\nimport { initTracer } from \"../../utils/tracer\"\n\ntype MaybePhantomActivity =\n  | ReturnType<typeof reporter.phantomActivity>\n  | undefined\n\nconst tracerReadyPromise = initTracer(\n  process.env.GATSBY_OPEN_TRACING_CONFIG_FILE ?? ``\n)\n\nexport class GraphQLEngine {\n  // private schema: GraphQLSchema\n  private runnerPromise?: Promise<GraphQLRunner>\n\n  constructor({ dbPath }: { dbPath: string }) {\n    setupLmdbStore({ dbPath })\n    // start initializing runner ASAP\n    this.getRunner()\n  }\n\n  private async _doGetRunner(): Promise<GraphQLRunner> {\n    await tracerReadyPromise\n\n    const wrapActivity = reporter.phantomActivity(`Initializing GraphQL Engine`)\n    wrapActivity.start()\n    try {\n      // @ts-ignore SCHEMA_SNAPSHOT is being \"inlined\" by bundler\n      store.dispatch(actions.createTypes(SCHEMA_SNAPSHOT))\n\n      // TODO: FLATTENED_PLUGINS needs to be merged with plugin options from gatsby-config\n      //  (as there might be non-serializable options, i.e. functions)\n      store.dispatch({\n        type: `SET_SITE_FLATTENED_PLUGINS`,\n        payload: flattenedPlugins,\n      })\n\n      for (const pluginName of Object.keys(gatsbyNodes)) {\n        setGatsbyPluginCache(\n          { name: pluginName, resolve: `` },\n          `gatsby-node`,\n          gatsbyNodes[pluginName]\n        )\n      }\n      for (const pluginName of Object.keys(gatsbyWorkers)) {\n        setGatsbyPluginCache(\n          { name: pluginName, resolve: `` },\n          `gatsby-worker`,\n          gatsbyWorkers[pluginName]\n        )\n      }\n\n      if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n        await apiRunnerNode(`onPluginInit`, { parentSpan: wrapActivity.span })\n      } else {\n        await apiRunnerNode(`unstable_onPluginInit`, {\n          parentSpan: wrapActivity.span,\n        })\n      }\n      await apiRunnerNode(`createSchemaCustomization`, {\n        parentSpan: wrapActivity.span,\n      })\n\n      // Build runs\n      // Note: skipping inference metadata because we rely on schema snapshot\n      await build({ fullMetadataBuild: false, parentSpan: wrapActivity.span })\n\n      return new GraphQLRunner(store)\n    } finally {\n      wrapActivity.end()\n    }\n  }\n\n  private async getRunner(): Promise<GraphQLRunner> {\n    if (!this.runnerPromise) {\n      this.runnerPromise = this._doGetRunner()\n    }\n    return this.runnerPromise\n  }\n\n  public async ready(): Promise<void> {\n    // We don't want to expose internal runner freely. We do expose `runQuery` function already.\n    // The way internal runner works can change, so we should not make it a public API.\n    // Here we just want to expose way to await it being ready\n    await this.getRunner()\n  }\n\n  public async runQuery(\n    query: string | Source,\n    context: Record<string, any> = {},\n    opts?: IQueryOptions\n  ): Promise<ExecutionResult> {\n    const engineContext = {\n      requestId: uuid.v4(),\n    }\n\n    const doRunQuery = async (): Promise<ExecutionResult> => {\n      if (!opts) {\n        opts = {\n          queryName: `GraphQL Engine query`,\n          parentSpan: undefined,\n        }\n      }\n\n      let gettingRunnerActivity: MaybePhantomActivity\n      let graphqlRunner: GraphQLRunner\n      try {\n        if (opts.parentSpan) {\n          gettingRunnerActivity = reporter.phantomActivity(\n            `Waiting for graphql runner to init`,\n            {\n              parentSpan: opts.parentSpan,\n            }\n          )\n          gettingRunnerActivity.start()\n        }\n        graphqlRunner = await this.getRunner()\n      } finally {\n        if (gettingRunnerActivity) {\n          gettingRunnerActivity.end()\n        }\n      }\n\n      // graphqlRunner creates it's own Span as long as we pass `parentSpan`\n      const result = await graphqlRunner.query(query, context, opts)\n\n      let waitingForJobsCreatedByCurrentRequestActivity: MaybePhantomActivity\n      try {\n        if (opts.parentSpan) {\n          waitingForJobsCreatedByCurrentRequestActivity =\n            reporter.phantomActivity(`Waiting for jobs to finish`, {\n              parentSpan: opts.parentSpan,\n            })\n          waitingForJobsCreatedByCurrentRequestActivity.start()\n        }\n        await waitJobsByRequest(engineContext.requestId)\n      } finally {\n        if (waitingForJobsCreatedByCurrentRequestActivity) {\n          waitingForJobsCreatedByCurrentRequestActivity.end()\n        }\n      }\n      return result\n    }\n\n    try {\n      return await runWithEngineContext(engineContext, doRunQuery)\n    } finally {\n      // Reset job-to-request mapping\n      store.dispatch({\n        type: `CLEAR_JOB_V2_CONTEXT`,\n        payload: engineContext,\n      })\n    }\n  }\n\n  public findPageByPath(pathName: string): IGatsbyPage | undefined {\n    // adapter so `findPageByPath` use SitePage nodes in datastore\n    // instead of `pages` redux slice\n    const state = {\n      pages: {\n        get(pathName: string): IGatsbyPage | undefined {\n          return getDataStore().getNode(`SitePage ${pathName}`) as\n            | IGatsbyPage\n            | undefined\n        },\n        values(): Iterable<IGatsbyPage> {\n          return getDataStore().iterateNodesByType(\n            `SitePage`\n          ) as Iterable<IGatsbyPage>\n        },\n      },\n    } as unknown as IGatsbyState\n\n    return findPageByPath(state, pathName, false)\n  }\n}\n\nexport default { GraphQLEngine }\n"],"mappings":"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"}