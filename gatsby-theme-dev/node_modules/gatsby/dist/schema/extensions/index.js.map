{"version":3,"file":"index.js","names":["GraphQLDirective","DirectiveLocation","specifiedDirectives","require","link","fileByPath","inferExtensionName","dontInferExtensionName","typeExtensions","description","mimeTypes","args","types","type","defaultValue","childOf","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","getDateResolver","by","from","on","schemaComposer","typeMapper","convertSDLWrappedTypeName","getType","resolve","fileByRelativePath","proxy","fromNode","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","extensions","defaultLocations","extension","createTC","normalizedArgs","convertArgConfigMap","forEach","argName","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField","module","exports"],"sources":["../../../src/schema/extensions/index.js"],"sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  specifiedDirectives,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nimport { getDateResolver } from \"../types/date\"\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig, ComposeOutputType } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst inferExtensionName = `infer`\nconst dontInferExtensionName = `dontInfer`\n\nconst typeExtensions = {\n  [inferExtensionName]: {\n    description: `Infer field types from field values.`,\n  },\n  [dontInferExtensionName]: {\n    description: `Do not infer field types from field values.`,\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` and \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `DEPRECATED: Use interface inheritance instead, i.e. \"interface Foo implements Node\".\\n\\n` +\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formatting options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n      on: `String`,\n    },\n    extend(args, fieldConfig, schemaComposer) {\n      const type =\n        args.on &&\n        schemaComposer.typeMapper.convertSDLWrappedTypeName(args.on)?.getType()\n      return {\n        resolve: link({ ...args, type }, fieldConfig),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n      fromNode: {\n        type: `Boolean!`,\n        defaultValue: false,\n      },\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n            fromNode: options.from ? options.fromNode : info.fromNode,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map(directive => directive.name),\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations, type } = extension\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type)\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n\n    // arg.type is a composer that needs to be converted to graphql-js type\n    Object.keys(normalizedArgs).forEach(argName => {\n      normalizedArgs[argName].type = normalizedArgs[argName].type.getType()\n    })\n\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig, schemaComposer)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n  inferExtensionName,\n  dontInferExtensionName,\n}\n"],"mappings":"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"}