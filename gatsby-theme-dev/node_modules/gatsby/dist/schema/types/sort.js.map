{"version":3,"file":"sort.js","names":["SORTABLE_ENUM","SORTABLE","NOT_SORTABLE","DEPRECATED_SORTABLE","getSortOrderEnum","schemaComposer","getOrCreateETC","etc","setFields","ASC","value","DESC","MAX_SORT_DEPTH","SORT_FIELD_DELIMITER","convert","typeComposer","fields","prefix","depth","deprecationReason","parentFieldDeprecationReason","sortFields","Object","keys","forEach","fieldName","fieldConfig","sortable","UnionTypeComposer","ScalarTypeComposer","undefined","getFieldExtension","sortKey","sortKeyFieldName","split","join","getNullableType","type","GraphQLList","getNamedType","GraphQLInputObjectType","getAnyTC","name","replace","assign","getFields","getFieldsEnum","inputTypeComposer","typeName","getTypeName","fieldsEnumTypeName","fieldsEnumTypeComposer","addDerivedType","derivedTypeName","getType","getSortInput","toInputObjectType","fallbackType","sortOrderEnumTC","fieldsEnumTC","sortInputTypeName","getOrCreateITC","itc","addFields","order","defaultValue"],"sources":["../../../src/schema/types/sort.ts"],"sourcesContent":["// @flow\nimport {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLInputFieldMap,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  SchemaComposer,\n  EnumTypeComposer,\n  ObjectTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n  toInputObjectType,\n} from \"graphql-compose\"\n\ntype AnyTypeComposer<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SORTABLE_ENUM = {\n  SORTABLE: `SORTABLE`,\n  NOT_SORTABLE: `NOT_SORTABLE`,\n  DEPRECATED_SORTABLE: `DEPRECATED_SORTABLE`,\n}\n\nexport const getSortOrderEnum = <TContext = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n}): EnumTypeComposer<TContext> =>\n  schemaComposer.getOrCreateETC(`SortOrderEnum`, etc => {\n    etc.setFields({\n      ASC: { value: `ASC` },\n      DESC: { value: `DESC` },\n    })\n  })\n\nconst MAX_SORT_DEPTH = 3\nconst SORT_FIELD_DELIMITER = `___`\n\nconst convert = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n  fields,\n  prefix = null,\n  depth = 0,\n  deprecationReason: parentFieldDeprecationReason,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: AnyTypeComposer<TContext>\n  fields: GraphQLInputFieldMap\n  prefix?: string | null\n  depth?: number\n  deprecationReason?: string\n}): any => {\n  const sortFields = {}\n\n  Object.keys(fields).forEach(fieldName => {\n    let deprecationReason = parentFieldDeprecationReason\n    const fieldConfig = fields[fieldName]\n    const sortable =\n      typeComposer instanceof UnionTypeComposer ||\n      typeComposer instanceof ScalarTypeComposer\n        ? undefined\n        : typeComposer.getFieldExtension(fieldName, `sortable`)\n    if (sortable === SORTABLE_ENUM.NOT_SORTABLE) {\n      return\n    } else if (sortable === SORTABLE_ENUM.DEPRECATED_SORTABLE) {\n      deprecationReason = `Sorting on fields that need arguments to resolve is deprecated.`\n    }\n    const sortKey = prefix ? `${prefix}.${fieldName}` : fieldName\n    const sortKeyFieldName = sortKey.split(`.`).join(SORT_FIELD_DELIMITER)\n\n    // XXX(freiksenet): this is to preserve legacy behaviour, this probably doesn't actually sort\n    if (getNullableType(fieldConfig.type) instanceof GraphQLList) {\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n\n    const type = getNamedType(fieldConfig.type)\n    if (type instanceof GraphQLInputObjectType) {\n      if (depth < MAX_SORT_DEPTH) {\n        const typeComposer = schemaComposer.getAnyTC(\n          type.name.replace(/Input$/, ``)\n        )\n        Object.assign(\n          sortFields,\n          convert({\n            schemaComposer,\n            typeComposer,\n            fields: type.getFields(),\n            prefix: sortKey,\n            depth: depth + 1,\n            deprecationReason,\n          })\n        )\n      }\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n        deprecationReason,\n      }\n    }\n  })\n  return sortFields\n}\n\nexport const getFieldsEnum = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer:\n    | ObjectTypeComposer<TSource, TContext>\n    | InterfaceTypeComposer<TSource, TContext>\n  inputTypeComposer: InputTypeComposer<TContext>\n}): EnumTypeComposer<TContext> => {\n  const typeName = typeComposer.getTypeName()\n  const fieldsEnumTypeName = `${typeName}FieldsEnum`\n  const fieldsEnumTypeComposer =\n    schemaComposer.getOrCreateETC(fieldsEnumTypeName)\n  addDerivedType({ typeComposer, derivedTypeName: fieldsEnumTypeName })\n\n  const fields = convert({\n    schemaComposer,\n    typeComposer,\n    fields: inputTypeComposer.getType().getFields(),\n  })\n  fieldsEnumTypeComposer.setFields(fields)\n  return fieldsEnumTypeComposer\n}\n\nexport const getSortInput = <TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer<TSource, TContext>\n}): InputTypeComposer<TContext> => {\n  // toInputObjectType() will fail to convert fields of union types, e.g.\n  //   union FooBar = Foo | Bar\n  //   type Baz {\n  //     fooBar: FooBar\n  //   }\n  // Passing `fallbackType: null` allows us to skip this field in the input type\n  const inputTypeComposer = toInputObjectType(typeComposer, {\n    fallbackType: null,\n  })\n  const sortOrderEnumTC = getSortOrderEnum({ schemaComposer })\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const typeName = typeComposer.getTypeName()\n  // console.log(fieldsEnumTC.getType().getValues())\n\n  const sortInputTypeName = `${typeName}SortInput`\n  addDerivedType({ typeComposer, derivedTypeName: sortInputTypeName })\n\n  return schemaComposer.getOrCreateITC(sortInputTypeName, itc => {\n    itc.addFields({\n      fields: [fieldsEnumTC],\n      order: { type: [sortOrderEnumTC], defaultValue: [`ASC`] },\n    })\n  })\n}\n"],"mappings":"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"}