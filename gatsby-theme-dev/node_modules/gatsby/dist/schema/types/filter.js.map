{"version":3,"file":"filter.js","names":["SEARCHABLE_ENUM","SEARCHABLE","NOT_SEARCHABLE","DEPRECATED_SEARCHABLE","getQueryOperatorListInput","schemaComposer","inputTypeComposer","typeName","getTypeName","replace","getOrCreateITC","itc","addFields","elemMatch","removeEmptyFields","cache","Set","convert","has","add","fields","getFields","nonEmptyFields","Object","keys","forEach","fieldName","fieldITC","type","InputTypeComposer","convertedITC","getFieldNames","length","setFields","EQ","NE","GT","GTE","LT","LTE","IN","NIN","REGEX","GLOB","ALLOWED_OPERATORS","Boolean","Date","Float","ID","Int","JSON","String","Enum","CustomScalar","ARRAY_OPERATORS","getOperatorFields","fieldType","operators","result","op","includes","isBuiltInScalarType","isSpecifiedScalarType","GraphQLDate","GraphQLJSON","getQueryOperatorInput","GraphQLEnumType","name","typeComposer","filterInputComposer","deprecationReason","inputTypeName","addDerivedType","derivedTypeName","getITC","GraphQLInputObjectType","fieldNames","convertedFields","fieldConfig","getFieldConfig","getNamedType","searchable","UnionTypeComposer","ScalarTypeComposer","undefined","getFieldExtension","getAnyTC","operatorsInputTC","isListType","getNullableType","GraphQLList","operatorFields","getFilterInput","getInputTypeComposer","hasField","getFieldType","extendField","filterInputTC"],"sources":["../../../src/schema/types/filter.ts"],"sourcesContent":["import {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLList,\n  isSpecifiedScalarType,\n  GraphQLScalarType,\n} from \"graphql\"\nimport { addDerivedType } from \"./derived-types\"\nimport {\n  InputTypeComposer,\n  GraphQLJSON,\n  SchemaComposer,\n  ObjectTypeComposer,\n  EnumTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  ScalarTypeComposer,\n} from \"graphql-compose\"\nimport { GraphQLDate } from \"./date\"\n\ntype Context = any\n\ntype AnyComposeType<TContext> =\n  | ObjectTypeComposer<any, TContext>\n  | InputTypeComposer<TContext>\n  | EnumTypeComposer<TContext>\n  | InterfaceTypeComposer<any, TContext>\n  | UnionTypeComposer<any, TContext>\n  | ScalarTypeComposer<TContext>\n\nexport const SEARCHABLE_ENUM = {\n  SEARCHABLE: `SEARCHABLE`,\n  NOT_SEARCHABLE: `NON_SEARCHABLE`,\n  DEPRECATED_SEARCHABLE: `DERPECATED_SEARCHABLE`,\n} as const\n\nconst getQueryOperatorListInput = ({\n  schemaComposer,\n  inputTypeComposer,\n}: {\n  schemaComposer: SchemaComposer<any>\n  inputTypeComposer: InputTypeComposer\n}): InputTypeComposer => {\n  const typeName = inputTypeComposer.getTypeName().replace(/Input/, `ListInput`)\n  return schemaComposer.getOrCreateITC(typeName, itc => {\n    itc.addFields({\n      elemMatch: inputTypeComposer,\n    })\n  })\n}\n\nconst removeEmptyFields = (\n  { inputTypeComposer }: { inputTypeComposer: InputTypeComposer },\n  cache = new Set()\n): InputTypeComposer => {\n  const convert = (itc: InputTypeComposer): InputTypeComposer => {\n    if (cache.has(itc)) {\n      return itc\n    }\n    cache.add(itc)\n    const fields = itc.getFields()\n    const nonEmptyFields = {}\n    Object.keys(fields).forEach(fieldName => {\n      const fieldITC = fields[fieldName].type\n      if (fieldITC instanceof InputTypeComposer) {\n        const convertedITC = convert(fieldITC)\n        if (convertedITC.getFieldNames().length) {\n          nonEmptyFields[fieldName] = convertedITC\n        }\n      } else {\n        nonEmptyFields[fieldName] = fieldITC\n      }\n    })\n    itc.setFields(nonEmptyFields)\n    return itc\n  }\n  return convert(inputTypeComposer)\n}\n\nconst EQ = `eq`\nconst NE = `ne`\nconst GT = `gt`\nconst GTE = `gte`\nconst LT = `lt`\nconst LTE = `lte`\nconst IN = `in`\nconst NIN = `nin`\nconst REGEX = `regex`\nconst GLOB = `glob`\n\nconst ALLOWED_OPERATORS = {\n  Boolean: [EQ, NE, IN, NIN],\n  Date: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  Float: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  ID: [EQ, NE, IN, NIN],\n  Int: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  JSON: [EQ, NE, IN, NIN, REGEX, GLOB],\n  String: [EQ, NE, IN, NIN, REGEX, GLOB],\n  Enum: [EQ, NE, IN, NIN],\n  CustomScalar: [EQ, NE, IN, NIN],\n}\n\ntype TypeName = keyof typeof ALLOWED_OPERATORS\n\nconst ARRAY_OPERATORS = [IN, NIN]\n\nconst getOperatorFields = (\n  fieldType: string,\n  operators: Array<string>\n): Record<string, string | Array<string>> => {\n  const result = {}\n  operators.forEach(op => {\n    if (ARRAY_OPERATORS.includes(op)) {\n      result[op] = [fieldType]\n    } else {\n      result[op] = fieldType\n    }\n  })\n  return result\n}\n\nconst isBuiltInScalarType = (type: any): type is GraphQLScalarType =>\n  isSpecifiedScalarType(type) || type === GraphQLDate || type === GraphQLJSON\n\nconst getQueryOperatorInput = ({\n  schemaComposer,\n  type,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  type: any\n}): InputTypeComposer => {\n  let typeName: TypeName\n  if (type instanceof GraphQLEnumType) {\n    typeName = `Enum`\n  } else if (isBuiltInScalarType(type)) {\n    typeName = type.name as Exclude<TypeName, \"Enum\" | \"CustomScalar\">\n  } else {\n    typeName = `CustomScalar`\n  }\n  const operators = ALLOWED_OPERATORS[typeName]\n  return schemaComposer.getOrCreateITC(type.name + `QueryOperatorInput`, itc =>\n    itc.addFields(getOperatorFields(type, operators))\n  )\n}\n\nconst convert = ({\n  schemaComposer,\n  typeComposer,\n  inputTypeComposer,\n  filterInputComposer,\n  deprecationReason,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: AnyComposeType<Context>\n  inputTypeComposer: InputTypeComposer<Context>\n  filterInputComposer?: InputTypeComposer<Context>\n  deprecationReason?: any\n}): InputTypeComposer<Context> => {\n  const inputTypeName = inputTypeComposer\n    .getTypeName()\n    .replace(/Input$/, `FilterInput`)\n\n  addDerivedType({ typeComposer, derivedTypeName: inputTypeName })\n\n  let convertedITC\n  if (filterInputComposer) {\n    convertedITC = filterInputComposer\n  } else if (schemaComposer.has(inputTypeName)) {\n    return schemaComposer.getITC(inputTypeName)\n  } else {\n    convertedITC = new InputTypeComposer(\n      new GraphQLInputObjectType({\n        name: inputTypeName,\n        fields: {},\n      }),\n      schemaComposer\n    )\n  }\n\n  schemaComposer.add(convertedITC)\n\n  const fieldNames = inputTypeComposer.getFieldNames()\n  const convertedFields = {}\n  fieldNames.forEach(fieldName => {\n    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)\n    const type = getNamedType(fieldConfig.type)\n    const searchable =\n      typeComposer instanceof UnionTypeComposer ||\n      typeComposer instanceof ScalarTypeComposer\n        ? undefined\n        : typeComposer.getFieldExtension(fieldName, `searchable`)\n\n    if (searchable === SEARCHABLE_ENUM.NOT_SEARCHABLE) {\n      return\n    } else if (searchable === SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE) {\n      deprecationReason = `Filtering on fields that need arguments to resolve is deprecated.`\n    }\n\n    if (type instanceof GraphQLInputObjectType) {\n      // Input type composers has names `FooInput`, get the type associated\n      // with it\n      const typeComposer = schemaComposer.getAnyTC(\n        type.name.replace(/Input$/, ``)\n      )\n      const itc = new InputTypeComposer(type, schemaComposer)\n\n      const operatorsInputTC = convert({\n        schemaComposer,\n        typeComposer,\n        inputTypeComposer: itc,\n        deprecationReason,\n      })\n\n      // TODO: array of arrays?\n      const isListType =\n        getNullableType(fieldConfig.type) instanceof GraphQLList\n\n      // elemMatch operator\n      convertedFields[fieldName] = isListType\n        ? getQueryOperatorListInput({\n            schemaComposer,\n            inputTypeComposer: operatorsInputTC,\n          })\n        : operatorsInputTC\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      const operatorFields = getQueryOperatorInput({ schemaComposer, type })\n      if (operatorFields) {\n        convertedFields[fieldName] = operatorFields\n      }\n    }\n\n    if (convertedFields[fieldName]) {\n      convertedFields[fieldName].deprecationReason = deprecationReason\n    }\n  })\n\n  convertedITC.addFields(convertedFields)\n  return convertedITC\n}\n\nexport const getFilterInput = ({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<Context>\n  typeComposer: ObjectTypeComposer<Context> | InterfaceTypeComposer<Context>\n}): InputTypeComposer => {\n  const typeName = typeComposer.getTypeName()\n  const filterInputComposer = schemaComposer.getOrCreateITC(\n    `${typeName}FilterInput`\n  )\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n\n  if (\n    inputTypeComposer?.hasField(`id`) &&\n    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`\n  ) {\n    inputTypeComposer.extendField(`id`, { type: `String` })\n  }\n\n  const filterInputTC = convert({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n    filterInputComposer,\n  })\n\n  return removeEmptyFields({ inputTypeComposer: filterInputTC })\n}\n"],"mappings":"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"}