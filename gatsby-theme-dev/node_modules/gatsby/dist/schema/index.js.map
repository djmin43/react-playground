{"version":3,"file":"index.js","names":["tracer","require","globalTracer","store","getDataStore","getTypes","createSchemaComposer","buildSchema","builtInFieldExtensions","builtInTypeDefinitions","TypeConflictReporter","shouldPrintEngineSnapshot","getAllTypeDefinitions","schemaCustomization","types","getState","builtInTypes","map","typeDef","typeOrTypeDef","plugin","undefined","filter","type","name","getAllFieldExtensions","fieldExtensions","customFieldExtensions","buildInferenceMetadata","Promise","resolve","length","typeNames","processNextType","typeName","pop","dispatch","payload","nodes","iterateNodesByType","setTimeout","build","parentSpan","fullMetadataBuild","spanArgs","childOf","span","startSpan","ready","thirdPartySchemas","printConfig","inferenceMetadata","config","mapping","typeMapping","program","directory","typeConflictReporter","enginePrintConfig","path","rewrite","schemaComposer","schema","printConflicts","finish","rebuild","module","exports"],"sources":["../../src/schema/index.js"],"sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst { getDataStore, getTypes } = require(`../datastore`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema } = require(`./schema`)\nconst { builtInFieldExtensions } = require(`./extensions`)\nconst { builtInTypeDefinitions } = require(`./types/built-in-types`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\nconst { shouldPrintEngineSnapshot } = require(`../utils/engines-helpers`)\n\nconst getAllTypeDefinitions = () => {\n  const {\n    schemaCustomization: { types },\n  } = store.getState()\n\n  const builtInTypes = builtInTypeDefinitions().map(typeDef => {\n    return {\n      typeOrTypeDef: typeDef,\n      plugin: undefined,\n    }\n  })\n\n  // Ensure that user-defined types are processed last\n  return [\n    ...builtInTypes,\n    ...types.filter(\n      type => type.plugin && type.plugin.name !== `default-site-plugin`\n    ),\n    ...types.filter(\n      type => !type.plugin || type.plugin.name === `default-site-plugin`\n    ),\n  ]\n}\n\nconst getAllFieldExtensions = () => {\n  const {\n    schemaCustomization: { fieldExtensions: customFieldExtensions },\n  } = store.getState()\n\n  return {\n    ...customFieldExtensions,\n    ...builtInFieldExtensions,\n  }\n}\n\n// Schema building requires metadata for type inference.\n// Technically it means looping through all type nodes, analyzing node structure\n// and then using this aggregated node structure in related GraphQL type.\n// Actual logic for inference located in inferenceMetadata reducer and ./infer\n// Here we just orchestrate the process via redux actions\nconst buildInferenceMetadata = ({ types }) =>\n  new Promise(resolve => {\n    if (!types || !types.length) {\n      resolve()\n      return\n    }\n    const typeNames = [...types]\n    // TODO: use async iterators when we switch to node>=10\n    //  or better investigate if we can offload metadata building to worker/Jobs API\n    //  and then feed the result into redux?\n    const processNextType = () => {\n      const typeName = typeNames.pop()\n      store.dispatch({\n        type: `BUILD_TYPE_METADATA`,\n        payload: {\n          typeName,\n          nodes: getDataStore().iterateNodesByType(typeName),\n        },\n      })\n      if (typeNames.length > 0) {\n        // Give event-loop a break\n        setTimeout(processNextType, 0)\n      } else {\n        resolve()\n      }\n    }\n    processNextType()\n  })\n\nconst build = async ({ parentSpan, fullMetadataBuild = true }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n  await getDataStore().ready()\n\n  if (fullMetadataBuild) {\n    // Build metadata for type inference and start updating it incrementally\n    await buildInferenceMetadata({ types: getTypes() })\n    store.dispatch({ type: `START_INCREMENTAL_INFERENCE` })\n  }\n\n  const {\n    schemaCustomization: { thirdPartySchemas, printConfig },\n    inferenceMetadata,\n    config: { mapping: typeMapping },\n    program: { directory },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const enginePrintConfig =\n    _CFLAGS_.GATSBY_MAJOR === `4` && shouldPrintEngineSnapshot()\n      ? {\n          path: `${directory}/.cache/schema.gql`,\n          rewrite: true,\n        }\n      : undefined\n\n  const fieldExtensions = getAllFieldExtensions()\n  const schemaComposer = createSchemaComposer({ fieldExtensions })\n  const schema = await buildSchema({\n    schemaComposer,\n    types: getAllTypeDefinitions(),\n    fieldExtensions,\n    thirdPartySchemas,\n    typeMapping,\n    printConfig,\n    enginePrintConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nconst rebuild = async ({ parentSpan }) =>\n  await build({ parentSpan, fullMetadataBuild: false })\n\nmodule.exports = {\n  build,\n  rebuild,\n}\n"],"mappings":"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"}