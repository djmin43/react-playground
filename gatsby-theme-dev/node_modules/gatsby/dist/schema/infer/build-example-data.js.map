{"version":3,"file":"build-example-data.js","names":["getExampleObject","fieldMap","typeName","typeConflictReporter","Object","keys","reduce","acc","key","value","buildExampleValue","path","descriptor","isArrayItem","type","conflicts","resolveWinnerType","addConflict","prepareConflictExamples","typeInfo","isMixOfDateAndString","hasOnlyEmptyStrings","example","item","exampleItemValue","nodes","multiple","linkedNodes","filter","dprops","hasKeys","result","forEach","prop","candidates","possibleTypes","length","isMixedNumber","typeNameMapper","includes","reportedValueMapper","relatedNode","find","relatedNodeList","object","itemValue","array","undefined","conflictingTypes","groups","first","map","nodeId","join","float","int","Boolean","total","date","string","empty"],"sources":["../../../src/schema/infer/build-example-data.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { groupBy } from \"lodash\"\nimport {\n  IValueDescriptor,\n  ValueType,\n  ITypeMetadata,\n} from \"./inference-metadata\"\nimport {\n  TypeConflictReporter,\n  ITypeConflictExample,\n} from \"./type-conflict-reporter\"\n\n// See gatsby/src/schema/infer/inference-metadata.ts for the ValueDescriptor structs (-> typeInfo)\n\nconst getExampleObject = ({\n  fieldMap = {},\n  typeName,\n  typeConflictReporter,\n}: ITypeMetadata): { [k: string]: unknown } =>\n  Object.keys(fieldMap).reduce((acc, key) => {\n    const value = buildExampleValue({\n      path: `${typeName}.${key}`,\n      descriptor: fieldMap[key],\n      typeConflictReporter,\n    })\n    if (key && value !== null) {\n      acc[key] = value\n    }\n    return acc\n  }, {})\n\nconst buildExampleValue = ({\n  descriptor,\n  typeConflictReporter,\n  isArrayItem = false,\n  path = ``,\n}: {\n  descriptor: IValueDescriptor\n  typeConflictReporter?: TypeConflictReporter\n  path?: string\n  isArrayItem?: boolean\n}): unknown | null => {\n  const [type, conflicts = false] = resolveWinnerType(descriptor)\n\n  if (conflicts && typeConflictReporter) {\n    typeConflictReporter.addConflict(\n      path,\n      prepareConflictExamples(descriptor, isArrayItem)\n    )\n  }\n\n  const typeInfo = descriptor[type]\n\n  switch (type) {\n    case `null`:\n      return null\n\n    case `date`:\n    case `string`: {\n      if (isMixOfDateAndString(descriptor)) {\n        return hasOnlyEmptyStrings(descriptor) ? `1978-09-26` : `String`\n      }\n      return typeInfo.example\n    }\n\n    case `array`: {\n      const { item } = typeInfo\n      const exampleItemValue = item\n        ? buildExampleValue({\n            descriptor: item,\n            isArrayItem: true,\n            typeConflictReporter,\n            path,\n          })\n        : null\n      return exampleItemValue === null ? null : [exampleItemValue]\n    }\n\n    case `relatedNode`:\n    case `relatedNodeList`: {\n      const { nodes = {} } = typeInfo\n      return {\n        multiple: type === `relatedNodeList`,\n        linkedNodes: Object.keys(nodes).filter(key => nodes[key] > 0),\n      }\n    }\n\n    case `object`: {\n      const { dprops } = typeInfo\n      let hasKeys = false\n      const result = {}\n      Object.keys(dprops).forEach(prop => {\n        const value = buildExampleValue({\n          descriptor: dprops[prop],\n          typeConflictReporter,\n          path: `${path}.${prop}`,\n        })\n        if (value !== null) {\n          hasKeys = true\n          result[prop] = value\n        }\n      })\n      return hasKeys ? result : null\n    }\n\n    default:\n      return typeInfo.example\n  }\n}\n\nconst resolveWinnerType = (\n  descriptor: IValueDescriptor\n): [ValueType | \"null\", boolean?] => {\n  const candidates = possibleTypes(descriptor)\n  if (candidates.length === 1) {\n    return [candidates[0]]\n  }\n  if (candidates.length === 2 && isMixedNumber(descriptor)) {\n    return [`float`]\n  }\n  if (candidates.length === 2 && isMixOfDateAndString(descriptor)) {\n    return [hasOnlyEmptyStrings(descriptor) ? `date` : `string`]\n  }\n  if (candidates.length > 1) {\n    return [`null`, true]\n  }\n  return [`null`]\n}\n\nconst prepareConflictExamples = (\n  descriptor: IValueDescriptor,\n  isArrayItem: boolean\n): Array<ITypeConflictExample> => {\n  const typeNameMapper = (typeName: ValueType): string => {\n    if (typeName === `relatedNode`) {\n      return `string`\n    }\n    if (typeName === `relatedNodeList`) {\n      return `[string]`\n    }\n    return [`float`, `int`].includes(typeName) ? `number` : typeName\n  }\n  const reportedValueMapper = (typeName: ValueType): unknown => {\n    if (typeName === `relatedNode`) {\n      const { nodes } = descriptor.relatedNode ?? { nodes: {} }\n      return Object.keys(nodes).find(key => nodes[key] > 0)\n    }\n    if (typeName === `relatedNodeList`) {\n      const { nodes } = descriptor.relatedNodeList ?? { nodes: {} }\n      return Object.keys(nodes).filter(key => nodes[key] > 0)\n    }\n    if (typeName === `object`) {\n      return getExampleObject({\n        typeName,\n        fieldMap: descriptor!.object!.dprops,\n      })\n    }\n    if (typeName === `array`) {\n      const itemValue = buildExampleValue({\n        descriptor: descriptor!.array!.item,\n        isArrayItem: true,\n      })\n      return itemValue === null || itemValue === undefined ? [] : [itemValue]\n    }\n    return descriptor[typeName]?.example\n  }\n  const conflictingTypes = possibleTypes(descriptor)\n\n  if (isArrayItem) {\n    // Differentiate conflict examples by node they were first seen in.\n    // See Caveats section in the header of the ./inference-metadata.ts\n    const groups = groupBy(\n      conflictingTypes,\n      type => descriptor[type]?.first || ``\n    )\n    return Object.keys(groups).map(nodeId => {\n      return {\n        type: `[${groups[nodeId].map(typeNameMapper).join(`,`)}]`,\n        value: groups[nodeId].map(reportedValueMapper),\n      }\n    })\n  }\n\n  return conflictingTypes.map(type => {\n    return {\n      type: typeNameMapper(type),\n      value: reportedValueMapper(type),\n    }\n  })\n}\n\nconst isMixedNumber = (descriptor: IValueDescriptor): boolean => {\n  const { float, int } = descriptor\n  return Boolean(float?.total) && Boolean(int?.total)\n}\n\nconst isMixOfDateAndString = (descriptor: IValueDescriptor): boolean => {\n  const { date, string } = descriptor\n  return Boolean(date?.total) && Boolean(string?.total)\n}\n\nconst hasOnlyEmptyStrings = (descriptor: IValueDescriptor): boolean => {\n  const { string } = descriptor\n  return string !== undefined && string?.empty === string?.total\n}\n\nconst possibleTypes = (descriptor: IValueDescriptor = {}): Array<ValueType> =>\n  Object.keys(descriptor).filter(\n    type => descriptor[type].total > 0\n  ) as Array<ValueType>\n\nexport { getExampleObject }\n"],"mappings":"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"}