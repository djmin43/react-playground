{"version":3,"file":"type-conflict-reporter.js","names":["formatValue","value","Array","isArray","util","inspect","colors","depth","breakLength","Infinity","output","length","push","wasElipsisLast","usedTypes","forEach","item","type","typeOf","includes","join","TypeConflictEntry","constructor","selector","types","Map","addExample","parent","set","description","internal","printEntry","sortedByTypeName","sortBy","from","entries","typeName","report","log","map","TypeConflictReporter","clearConflicts","clear","getEntryFromSelector","dataEntry","get","addConflict","examples","substring","entry","filter","example","printConflicts","size","warn","getConflicts","values"],"sources":["../../../src/schema/infer/type-conflict-reporter.ts"],"sourcesContent":["import sortBy from \"lodash/sortBy\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport typeOf from \"type-of\"\nimport util from \"util\"\n\nimport { Node } from \"../../../index\"\n\nexport interface ITypeConflictExample {\n  value: unknown\n  type: string\n  parent?: Node\n  arrayTypes?: Array<string>\n}\n\ninterface ITypeConflict {\n  value: unknown\n  description?: string\n}\n\nconst formatValue = (value: unknown): string => {\n  if (!Array.isArray(value)) {\n    return util.inspect(value, {\n      colors: true,\n      depth: 0,\n      breakLength: Infinity,\n    })\n  }\n\n  const output: Array<string> = []\n\n  if (value.length === 1) {\n    // For arrays usually a single conflicting item is exposed vs. the whole array\n    output.push(`...`)\n    output.push(formatValue(value[0]))\n    output.push(`...`)\n  } else {\n    let wasElipsisLast = false\n    const usedTypes: Array<string> = []\n    value.forEach(item => {\n      const type = typeOf(item)\n      if (usedTypes.includes(type)) {\n        if (!wasElipsisLast) {\n          output.push(`...`)\n          wasElipsisLast = true\n        }\n      } else {\n        output.push(formatValue(item))\n        wasElipsisLast = false\n        usedTypes.push(type)\n      }\n    })\n  }\n\n  return `[ ${output.join(`, `)} ]`\n}\n\nclass TypeConflictEntry {\n  selector: string\n  types: Map<string, ITypeConflict>\n\n  constructor(selector: string) {\n    this.selector = selector\n    this.types = new Map()\n  }\n\n  addExample({ value, type, parent }: ITypeConflictExample): void {\n    this.types.set(type, {\n      value,\n      description: parent?.internal?.description ?? ``,\n    })\n  }\n\n  printEntry(): void {\n    const sortedByTypeName = sortBy(\n      Array.from(this.types.entries()),\n      ([typeName]) => typeName\n    )\n\n    report.log(\n      `${this.selector}:${sortedByTypeName\n        .map(\n          ([typeName, { value, description }]) =>\n            `\\n - type: ${typeName}\\n   value: ${formatValue(value)}${\n              description && `\\n   source: ${description}`\n            }`\n        )\n        .join(``)}`\n    )\n  }\n}\n\nclass TypeConflictReporter {\n  entries: Map<string, TypeConflictEntry>\n\n  constructor() {\n    this.entries = new Map()\n  }\n\n  clearConflicts(): void {\n    this.entries.clear()\n  }\n\n  getEntryFromSelector(selector: string): TypeConflictEntry {\n    let dataEntry = this.entries.get(selector)\n\n    if (!dataEntry) {\n      dataEntry = new TypeConflictEntry(selector)\n      this.entries.set(selector, dataEntry)\n    }\n\n    return dataEntry\n  }\n\n  addConflict(selector: string, examples: Array<ITypeConflictExample>): void {\n    if (selector.substring(0, 11) === `SitePlugin.`) {\n      // Don't store and print out type conflicts in plugins.\n      // This is out of user control so he/she can't do anything\n      // to hide those.\n      return\n    }\n\n    const entry = this.getEntryFromSelector(selector)\n    examples\n      .filter(example => example.value != null)\n      .forEach(example => entry.addExample(example))\n  }\n\n  printConflicts(): void {\n    if (this.entries.size > 0) {\n      report.warn(\n        `There are conflicting field types in your data.\\n\\n` +\n          `If you have explicitly defined a type for those fields, you can ` +\n          `safely ignore this warning message.\\n` +\n          `Otherwise, Gatsby will omit those fields from the GraphQL schema.\\n\\n` +\n          `If you know all field types in advance, the best strategy is to ` +\n          `explicitly define them with the \\`createTypes\\` action, and skip ` +\n          `inference with the \\`@dontInfer\\` directive.\\n` +\n          `See https://www.gatsbyjs.com/docs/actions/#createTypes`\n      )\n      this.entries.forEach(entry => entry.printEntry())\n    }\n  }\n\n  getConflicts(): Array<TypeConflictEntry> {\n    return Array.from(this.entries.values())\n  }\n}\n\nexport { TypeConflictReporter, TypeConflictEntry }\n"],"mappings":"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"}