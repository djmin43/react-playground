{"version":3,"file":"index.js","names":["report","require","ObjectTypeComposer","hasNodes","getExampleObject","addNodeInterface","addInferredFields","getDataStore","addInferredTypes","schemaComposer","typeConflictReporter","typeMapping","inferenceMetadata","parentSpan","typeMap","typesWithNodes","Object","keys","filter","typeName","typeNames","putFileFirst","noNodeInterfaceTypes","typesToInfer","forEach","typeComposer","has","getOTC","runInfer","hasExtension","getExtension","hasInterface","push","create","setExtension","length","warn","panic","map","addInferredType","getTypeName","firstNode","node","iterateNodesByType","internal","owner","exampleValue","index","indexOf","slice","module","exports"],"sources":["../../../src/schema/infer/index.js"],"sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst { ObjectTypeComposer } = require(`graphql-compose`)\nconst { hasNodes } = require(`./inference-metadata`)\nconst { getExampleObject } = require(`./build-example-data`)\nconst { addNodeInterface } = require(`../types/node-interface`)\nconst { addInferredFields } = require(`./add-inferred-fields`)\nconst { getDataStore } = require(`../../datastore`)\n\nconst addInferredTypes = ({\n  schemaComposer,\n  typeConflictReporter,\n  typeMapping,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  // XXX(freiksenet): Won't be needed after plugins set typedefs\n  // Infer File first so all the links to it would work\n  const { typeMap } = inferenceMetadata\n  const typesWithNodes = Object.keys(typeMap).filter(typeName =>\n    hasNodes(typeMap[typeName])\n  )\n  const typeNames = putFileFirst(typesWithNodes)\n  const noNodeInterfaceTypes = []\n\n  const typesToInfer = []\n\n  typeNames.forEach(typeName => {\n    let typeComposer\n    if (schemaComposer.has(typeName)) {\n      typeComposer = schemaComposer.getOTC(typeName)\n      const runInfer = typeComposer.hasExtension(`infer`)\n        ? typeComposer.getExtension(`infer`)\n        : true\n      if (runInfer) {\n        if (!typeComposer.hasInterface(`Node`)) {\n          noNodeInterfaceTypes.push(typeName)\n        }\n        typesToInfer.push(typeComposer)\n      }\n    } else {\n      typeComposer = ObjectTypeComposer.create(typeName, schemaComposer)\n      addNodeInterface({ schemaComposer, typeComposer })\n      typeComposer.setExtension(`createdFrom`, `inference`)\n      typesToInfer.push(typeComposer)\n    }\n  })\n\n  if (noNodeInterfaceTypes.length > 0) {\n    noNodeInterfaceTypes.forEach(typeName => {\n      report.warn(\n        `Type \\`${typeName}\\` declared in \\`createTypes\\` looks like a node, ` +\n          `but doesn't implement a \\`Node\\` interface. It's likely that you should ` +\n          `add the \\`Node\\` interface to your type def:\\n\\n` +\n          `\\`type ${typeName} implements Node { ... }\\`\\n\\n` +\n          `If you know that you don't want it to be a node (which would mean no ` +\n          `root queries to retrieve it), you can explicitly disable inference ` +\n          `for it:\\n\\n` +\n          `\\`type ${typeName} @dontInfer { ... }\\``\n      )\n    })\n    report.panic(`Building schema failed`)\n  }\n\n  return typesToInfer.map(typeComposer =>\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      typeConflictReporter,\n      typeMapping,\n      parentSpan,\n      inferenceMetadata,\n    })\n  )\n}\n\nconst addInferredType = ({\n  schemaComposer,\n  typeComposer,\n  typeConflictReporter,\n  typeMapping,\n  inferenceMetadata = {},\n  parentSpan,\n}) => {\n  const typeName = typeComposer.getTypeName()\n  // TODO: Move this to where the type is created once we can get\n  // node type owner information directly from store\n  if (\n    typeComposer.getExtension(`createdFrom`) === `inference` &&\n    hasNodes(inferenceMetadata.typeMap[typeName])\n  ) {\n    let firstNode\n    for (const node of getDataStore().iterateNodesByType(typeName)) {\n      firstNode = node\n      break\n    }\n    if (firstNode) {\n      typeComposer.setExtension(`plugin`, firstNode.internal.owner)\n    }\n  }\n\n  const exampleValue = getExampleObject({\n    ...inferenceMetadata.typeMap[typeName],\n    typeName,\n    typeConflictReporter,\n  })\n\n  addInferredFields({\n    schemaComposer,\n    typeComposer,\n    exampleValue,\n    typeMapping,\n    parentSpan,\n  })\n  return typeComposer\n}\n\nconst putFileFirst = typeNames => {\n  const index = typeNames.indexOf(`File`)\n  if (index !== -1) {\n    return [`File`, ...typeNames.slice(0, index), ...typeNames.slice(index + 1)]\n  } else {\n    return typeNames\n  }\n}\n\nmodule.exports = {\n  addInferredType,\n  addInferredTypes,\n}\n"],"mappings":"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"}