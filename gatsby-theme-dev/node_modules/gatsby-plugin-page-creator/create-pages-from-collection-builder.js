"use strict";

exports.__esModule = true;
exports.createPagesFromCollectionBuilder = createPagesFromCollectionBuilder;

var _gatsbyPageUtils = require("gatsby-page-utils");

var _extractQuery = require("./extract-query");

var _gatsbyCoreUtils = require("gatsby-core-utils");

var _getCollectionRouteParams = require("./get-collection-route-params");

var _derivePath = require("./derive-path");

var _watchCollectionBuilder = require("./watch-collection-builder");

var _collectionExtractQueryString = require("./collection-extract-query-string");

var _isValidCollectionPathImplementation = require("./is-valid-collection-path-implementation");

var _errorUtils = require("./error-utils");

// Move this to gatsby-core-utils?
async function createPagesFromCollectionBuilder(filePath, absolutePath, actions, graphql, reporter, trailingSlash, slugifyOptions) {
  if ((0, _isValidCollectionPathImplementation.isValidCollectionPathImplementation)(absolutePath, reporter) === false) {
    (0, _watchCollectionBuilder.watchCollectionBuilder)(absolutePath, ``, [], actions, reporter, () => createPagesFromCollectionBuilder(filePath, absolutePath, actions, graphql, reporter, trailingSlash, slugifyOptions));
    return;
  } // 1. Query for the data for the collection to generate pages


  const queryString = (0, _collectionExtractQueryString.collectionExtractQueryString)(absolutePath, reporter); // 1.a  If the query string is not findable, we can't move on. So we stop and watch

  if (queryString === null) {
    (0, _watchCollectionBuilder.watchCollectionBuilder)(absolutePath, ``, [], actions, reporter, () => createPagesFromCollectionBuilder(filePath, absolutePath, actions, graphql, reporter, trailingSlash, slugifyOptions));
    return;
  }

  const {
    data,
    errors
  } = await graphql(queryString); // 1.a If it fails, we need to inform the user and exit early

  if (!data || errors) {
    reporter.error({
      id: (0, _errorUtils.prefixId)(_errorUtils.CODES.CollectionBuilder),
      context: {
        sourceMessage: `Tried to create pages from the collection builder.
Unfortunately, the query came back empty. There may be an error in your query:

${errors.map(error => error.message).join(`\n`)}`.trim()
      },
      filePath: absolutePath
    });
    (0, _watchCollectionBuilder.watchCollectionBuilder)(absolutePath, queryString, [], actions, reporter, () => createPagesFromCollectionBuilder(filePath, absolutePath, actions, graphql, reporter, trailingSlash, slugifyOptions));
    return;
  } // 2. Get the nodes out of the data. We very much expect data to come back in a known shape:
  //    data = { [key: string]: { nodes: Array<ACTUAL_DATA> } }


  const nodes = Object.values(Object.values(data)[0])[0];

  if (nodes) {
    reporter.verbose(`   PageCreator: Creating ${nodes.length} page${nodes.length > 1 ? `s` : ``} from ${filePath}`);
  }

  let derivePathErrors = 0;
  const knownPagePaths = new Set(); // 3. Loop through each node and create the page, also save the path it creates to pass to the watcher
  //    the watcher will use this data to delete the pages if the query changes significantly.

  const paths = [];
  nodes.forEach(node => {
    // URL path for the component and node
    const {
      derivedPath,
      errors
    } = (0, _derivePath.derivePath)(filePath, node, reporter, slugifyOptions); // TODO(v5): Remove legacy handling

    const isLegacy = trailingSlash === `legacy`;
    const hasTrailingSlash = derivedPath.endsWith(`/`);
    const path = (0, _gatsbyPageUtils.createPath)(derivedPath, isLegacy || hasTrailingSlash, true); // We've already created a page with this path

    if (knownPagePaths.has(path)) {
      return;
    }

    knownPagePaths.add(path); // Params is supplied to the FE component on props.params

    const params = (0, _getCollectionRouteParams.getCollectionRouteParams)((0, _gatsbyPageUtils.createPath)(filePath), path); // nodeParams is fed to the graphql query for the component

    const nodeParams = (0, _extractQuery.reverseLookupParams)(node, absolutePath); // matchPath is an optional value. It's used if someone does a path like `{foo}/[bar].js`

    const matchPath = (0, _gatsbyCoreUtils.getMatchPath)(path);
    const modifiedPath = (0, _gatsbyPageUtils.applyTrailingSlashOption)(path, trailingSlash);
    actions.createPage({
      path: modifiedPath,
      matchPath,
      component: absolutePath,
      context: { ...nodeParams,
        __params: params
      }
    });
    derivePathErrors += errors;
    paths.push(path);
  });

  if (derivePathErrors > 0) {
    reporter.panicOnBuild({
      id: (0, _errorUtils.prefixId)(_errorUtils.CODES.GeneratePath),
      context: {
        sourceMessage: `Could not find a value in the node for ${filePath}. Please make sure that the syntax is correct and supported.`
      }
    });
  }

  (0, _watchCollectionBuilder.watchCollectionBuilder)(absolutePath, queryString, paths, actions, reporter, () => createPagesFromCollectionBuilder(filePath, absolutePath, actions, graphql, reporter, trailingSlash, slugifyOptions));
}