{"version":3,"file":"index.js","sources":["../src/parse-path.js","../src/is-local-link.js","../src/prefix-helpers.js","../src/rewrite-link-path.js","../src/index.js"],"sourcesContent":["export function parsePath(path) {\n  let pathname = path || `/`\n  let search = ``\n  let hash = ``\n\n  const hashIndex = pathname.indexOf(`#`)\n  if (hashIndex !== -1) {\n    hash = pathname.slice(hashIndex)\n    pathname = pathname.slice(0, hashIndex)\n  }\n\n  const searchIndex = pathname.indexOf(`?`)\n  if (searchIndex !== -1) {\n    search = pathname.slice(searchIndex)\n    pathname = pathname.slice(0, searchIndex)\n  }\n\n  return {\n    pathname: pathname,\n    search: search === `?` ? `` : search,\n    hash: hash === `#` ? `` : hash,\n  }\n}\n","// Copied from https://github.com/sindresorhus/is-absolute-url/blob/3ab19cc2e599a03ea691bcb8a4c09fa3ebb5da4f/index.js\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/\nconst isAbsolute = path => ABSOLUTE_URL_REGEX.test(path)\n\nexport const isLocalLink = path => {\n  if (typeof path !== `string`) {\n    return undefined\n    // TODO(v5): Re-Add TypeError\n    // throw new TypeError(`Expected a \\`string\\`, got \\`${typeof path}\\``)\n  }\n\n  return !isAbsolute(path)\n}\n","import { isLocalLink } from \"./is-local-link\"\n\nexport const getGlobalBasePrefix = () =>\n  process.env.NODE_ENV !== `production`\n    ? typeof __BASE_PATH__ !== `undefined`\n      ? __BASE_PATH__\n      : undefined\n    : __BASE_PATH__\n\n// These global values are wrapped in typeof clauses to ensure the values exist.\n// This is especially problematic in unit testing of this component.\nexport const getGlobalPathPrefix = () =>\n  process.env.NODE_ENV !== `production`\n    ? typeof __PATH_PREFIX__ !== `undefined`\n      ? __PATH_PREFIX__\n      : undefined\n    : __PATH_PREFIX__\n\nexport function withPrefix(path, prefix = getGlobalBasePrefix()) {\n  if (!isLocalLink(path)) {\n    return path\n  }\n\n  if (path.startsWith(`./`) || path.startsWith(`../`)) {\n    return path\n  }\n  const base = prefix ?? getGlobalPathPrefix() ?? `/`\n\n  return `${base?.endsWith(`/`) ? base.slice(0, -1) : base}${\n    path.startsWith(`/`) ? path : `/${path}`\n  }`\n}\n","import { resolve } from \"@gatsbyjs/reach-router\"\n// Specific import to treeshake Node.js stuff\nimport { applyTrailingSlashOption } from \"gatsby-page-utils/apply-trailing-slash-option\"\nimport { parsePath } from \"./parse-path\"\nimport { isLocalLink } from \"./is-local-link\"\nimport { withPrefix } from \"./prefix-helpers\"\n\nconst isAbsolutePath = path => path?.startsWith(`/`)\n\nconst getGlobalTrailingSlash = () =>\n  typeof __TRAILING_SLASH__ !== `undefined` ? __TRAILING_SLASH__ : undefined\n\nfunction absolutify(path, current) {\n  // If it's already absolute, return as-is\n  if (isAbsolutePath(path)) {\n    return path\n  }\n\n  const option = getGlobalTrailingSlash()\n  const absolutePath = resolve(path, current)\n\n  if (option === `always` || option === `never`) {\n    return applyTrailingSlashOption(absolutePath, option)\n  }\n\n  return absolutePath\n}\n\nexport const rewriteLinkPath = (path, relativeTo) => {\n  if (typeof path === `number`) {\n    return path\n  }\n  if (!isLocalLink(path)) {\n    return path\n  }\n\n  const { pathname, search, hash } = parsePath(path)\n  const option = getGlobalTrailingSlash()\n  let adjustedPath = path\n\n  if (option === `always` || option === `never`) {\n    const output = applyTrailingSlashOption(pathname, option)\n    adjustedPath = `${output}${search}${hash}`\n  }\n\n  return isAbsolutePath(adjustedPath)\n    ? withPrefix(adjustedPath)\n    : absolutify(adjustedPath, relativeTo)\n}\n","import PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { Link, Location } from \"@gatsbyjs/reach-router\"\nimport { parsePath } from \"./parse-path\"\nimport { isLocalLink } from \"./is-local-link\"\nimport { rewriteLinkPath } from \"./rewrite-link-path\"\nimport { withPrefix, getGlobalPathPrefix } from \"./prefix-helpers\"\n\nexport { parsePath, withPrefix }\n\nexport function withAssetPrefix(path) {\n  return withPrefix(path, getGlobalPathPrefix())\n}\n\nconst NavLinkPropTypes = {\n  activeClassName: PropTypes.string,\n  activeStyle: PropTypes.object,\n  partiallyActive: PropTypes.bool,\n}\n\n// Set up IntersectionObserver\nconst createIntersectionObserver = (el, cb) => {\n  const io = new window.IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn't currently support isIntersecting, so also test for  an intersectionRatio > 0\n        cb(entry.isIntersecting || entry.intersectionRatio > 0)\n      }\n    })\n  })\n\n  // Add element to the observer\n  io.observe(el)\n\n  return { instance: io, el }\n}\n\nfunction GatsbyLinkLocationWrapper(props) {\n  return (\n    <Location>\n      {({ location }) => <GatsbyLink {...props} _location={location} />}\n    </Location>\n  )\n}\n\nclass GatsbyLink extends React.Component {\n  constructor(props) {\n    super(props)\n    // Default to no support for IntersectionObserver\n    let IOSupported = false\n    if (typeof window !== `undefined` && window.IntersectionObserver) {\n      IOSupported = true\n    }\n\n    this.state = {\n      IOSupported,\n    }\n    this.abortPrefetch = null\n    this.handleRef = this.handleRef.bind(this)\n  }\n\n  _prefetch() {\n    let currentPath = window.location.pathname + window.location.search\n\n    // reach router should have the correct state\n    if (this.props._location && this.props._location.pathname) {\n      currentPath = this.props._location.pathname + this.props._location.search\n    }\n\n    const rewrittenPath = rewriteLinkPath(this.props.to, currentPath)\n    const parsed = parsePath(rewrittenPath)\n\n    const newPathName = parsed.pathname + parsed.search\n\n    // Prefetch is used to speed up next navigations. When you use it on the current navigation,\n    // there could be a race-condition where Chrome uses the stale data instead of waiting for the network to complete\n    if (currentPath !== newPathName) {\n      return ___loader.enqueue(newPathName)\n    }\n\n    return undefined\n  }\n\n  componentWillUnmount() {\n    if (!this.io) {\n      return\n    }\n    const { instance, el } = this.io\n\n    if (this.abortPrefetch) {\n      this.abortPrefetch.abort()\n    }\n\n    instance.unobserve(el)\n    instance.disconnect()\n  }\n\n  handleRef(ref) {\n    if (\n      this.props.innerRef &&\n      Object.prototype.hasOwnProperty.call(this.props.innerRef, `current`)\n    ) {\n      this.props.innerRef.current = ref\n    } else if (this.props.innerRef) {\n      this.props.innerRef(ref)\n    }\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      this.io = createIntersectionObserver(ref, inViewPort => {\n        if (inViewPort) {\n          this.abortPrefetch = this._prefetch()\n        } else {\n          if (this.abortPrefetch) {\n            this.abortPrefetch.abort()\n          }\n        }\n      })\n    }\n  }\n\n  defaultGetProps = ({ isPartiallyCurrent, isCurrent }) => {\n    if (this.props.partiallyActive ? isPartiallyCurrent : isCurrent) {\n      return {\n        className: [this.props.className, this.props.activeClassName]\n          .filter(Boolean)\n          .join(` `),\n        style: { ...this.props.style, ...this.props.activeStyle },\n      }\n    }\n    return null\n  }\n\n  render() {\n    const {\n      to,\n      getProps = this.defaultGetProps,\n      onClick,\n      onMouseEnter,\n      /* eslint-disable no-unused-vars */\n      activeClassName: $activeClassName,\n      activeStyle: $activeStyle,\n      innerRef: $innerRef,\n      partiallyActive,\n      state,\n      replace,\n      _location,\n      /* eslint-enable no-unused-vars */\n      ...rest\n    } = this.props\n\n    if (process.env.NODE_ENV !== `production` && !isLocalLink(to)) {\n      console.warn(\n        `External link ${to} was detected in a Link component. Use the Link component only for internal links. See: https://gatsby.dev/internal-links`\n      )\n    }\n\n    const prefixedTo = rewriteLinkPath(to, _location.pathname)\n    if (!isLocalLink(prefixedTo)) {\n      return <a href={prefixedTo} {...rest} />\n    }\n\n    return (\n      <Link\n        to={prefixedTo}\n        state={state}\n        getProps={getProps}\n        innerRef={this.handleRef}\n        onMouseEnter={e => {\n          if (onMouseEnter) {\n            onMouseEnter(e)\n          }\n          const parsed = parsePath(prefixedTo)\n          ___loader.hovering(parsed.pathname + parsed.search)\n        }}\n        onClick={e => {\n          if (onClick) {\n            onClick(e)\n          }\n\n          if (\n            e.button === 0 && // ignore right clicks\n            !this.props.target && // let browser handle \"target=_blank\"\n            !e.defaultPrevented && // onClick prevented default\n            !e.metaKey && // ignore clicks with modifier keys...\n            !e.altKey &&\n            !e.ctrlKey &&\n            !e.shiftKey\n          ) {\n            e.preventDefault()\n\n            let shouldReplace = replace\n            const isCurrent = encodeURI(prefixedTo) === _location.pathname\n\n            if (typeof replace !== `boolean` && isCurrent) {\n              shouldReplace = true\n            }\n            // Make sure the necessary scripts and data are\n            // loaded before continuing.\n            window.___navigate(prefixedTo, {\n              state,\n              replace: shouldReplace,\n            })\n          }\n\n          return true\n        }}\n        {...rest}\n      />\n    )\n  }\n}\n\nGatsbyLink.propTypes = {\n  ...NavLinkPropTypes,\n  onClick: PropTypes.func,\n  to: PropTypes.string.isRequired,\n  replace: PropTypes.bool,\n  state: PropTypes.object,\n}\n\nexport default React.forwardRef((props, ref) => (\n  <GatsbyLinkLocationWrapper innerRef={ref} {...props} />\n))\n\nexport const navigate = (to, options) => {\n  window.___navigate(rewriteLinkPath(to, window.location.pathname), options)\n}\n"],"names":["path","pathname","indexOf","hashIndex","hash","slice","searchIndex","search","test","isAbsolute","env","NODE_ENV","__PATH_PREFIX__","undefined","prefix","__BASE_PATH__","isLocalLink","startsWith","getGlobalPathPrefix","base","endsWith","__TRAILING_SLASH__","relativeTo","parsePath","getGlobalTrailingSlash","option","adjustedPath","applyTrailingSlashOption","withPrefix","current","isAbsolutePath","resolve","absolutePath","absolutify","activeClassName","PropTypes","string","activeStyle","object","partiallyActive","bool","props","React","Location","GatsbyLink","_location","location","_this","defaultGetProps","isPartiallyCurrent","isCurrent","className","filter","Boolean","join","style","window","IntersectionObserver","IOSupported","state","abortPrefetch","handleRef","bind","_prefetch","this","currentPath","rewriteLinkPath","to","parsed","newPathName","enqueue","componentWillUnmount","io","instance","el","abort","unobserve","disconnect","ref","cb","innerRef","Object","prototype","hasOwnProperty","call","inViewPort","_this2","entries","forEach","entry","target","isIntersecting","intersectionRatio","observe","render","getProps","onClick","onMouseEnter","replace","rest","process","console","warn","prefixedTo","Link","e","___loader","hovering","button","_this3","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","preventDefault","encodeURI","shouldReplace","___navigate","href","Component","propTypes","NavLinkPropTypes","func","isRequired","forwardRef","GatsbyLinkLocationWrapper","options"],"mappings":"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"}